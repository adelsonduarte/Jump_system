
STM32F411CEU_BP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fed0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d4c  08010070  08010070  00020070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dbc  08010dbc  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08010dbc  08010dbc  00020dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dc4  08010dc4  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dc4  08010dc4  00020dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dc8  08010dc8  00020dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08010dcc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  200001c8  08010f94  000301c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08010f94  00030b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d675  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b15  00000000  00000000  0004d86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00052388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  00053e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6fa  00000000  00000000  00055698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241f1  00000000  00000000  00073d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096498  00000000  00000000  00097f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e41b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007980  00000000  00000000  0012e46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010058 	.word	0x08010058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	08010058 	.word	0x08010058

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <eraseStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char eraseStateMachine(struct Menu* subMenu)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuErase = subMenu;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	613b      	str	r3, [r7, #16]
    unsigned char key = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	75fb      	strb	r3, [r7, #23]
    unsigned char index = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	72fb      	strb	r3, [r7, #11]
    unsigned char displayUpdateStatus = IDDLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	72bb      	strb	r3, [r7, #10]
    //unsigned char cursorPosition[2] = {0,0};
    unsigned char* ptr_eraseString;
    while(key != MENU)
 8000f44:	e08d      	b.n	8001062 <eraseStateMachine+0x136>
    {
        switch(subMenuErase->menuState)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	78db      	ldrb	r3, [r3, #3]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d077      	beq.n	800103e <eraseStateMachine+0x112>
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	f300 8087 	bgt.w	8001062 <eraseStateMachine+0x136>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <eraseStateMachine+0x32>
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d008      	beq.n	8000f6e <eraseStateMachine+0x42>
 8000f5c:	e081      	b.n	8001062 <eraseStateMachine+0x136>
        {
            case IDDLE:
                subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f003 feda 	bl	8004d18 <getNextSub>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	70da      	strb	r2, [r3, #3]
            break;
 8000f6c:	e079      	b.n	8001062 <eraseStateMachine+0x136>

            case VERFICA_APAGAR:
                updateUserMsg(0,USERMSG1,eraseselectUserMsg,&displayUpdateStatus);
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <eraseStateMachine+0x148>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	f107 030a 	add.w	r3, r7, #10
 8000f76:	2100      	movs	r1, #0
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f002 f867 	bl	800304c <updateUserMsg>
                ptr_eraseString = getEraseTestString();
 8000f7e:	f001 fd41 	bl	8002a04 <getEraseTestString>
 8000f82:	60f8      	str	r0, [r7, #12]
                HW_PRINT_DATA(0,INSERTMSG,ptr_eraseString);
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	2102      	movs	r1, #2
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f002 ffc3 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <eraseStateMachine+0x14c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	2103      	movs	r1, #3
 8000f96:	2000      	movs	r0, #0
 8000f98:	f002 ffbc 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <eraseStateMachine+0x14c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fbad 	bl	8002700 <stringLenght>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <eraseStateMachine+0x150>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	f002 ffaf 	bl	8003f14 <HW_PRINT_DATA>

                key = getKeyPressed();
 8000fb6:	f004 fc93 	bl	80058e0 <getKeyPressed>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	75fb      	strb	r3, [r7, #23]

                if(key == INSERIR)
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	2b49      	cmp	r3, #73	; 0x49
 8000fc2:	d10e      	bne.n	8000fe2 <eraseStateMachine+0xb6>
                {
                	resetKeyPressed();
 8000fc4:	f004 fc98 	bl	80058f8 <resetKeyPressed>
                    setUserErase(&index);
 8000fc8:	f107 030b 	add.w	r3, r7, #11
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fd7d 	bl	8002acc <setUserErase>
                    subMenuErase->menuState = getNextSub(VERFICA_APAGAR);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f003 fea0 	bl	8004d18 <getNextSub>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	70da      	strb	r2, [r3, #3]
 8000fe0:	e03f      	b.n	8001062 <eraseStateMachine+0x136>
                }
                else if(key == CONFIRMAR)
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	2b43      	cmp	r3, #67	; 0x43
 8000fe6:	d13c      	bne.n	8001062 <eraseStateMachine+0x136>
                {
                	resetKeyPressed();
 8000fe8:	f004 fc86 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8000fec:	f107 030a 	add.w	r3, r7, #10
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f846 	bl	8003082 <readyUserInterface>
                    if(*ptr_eraseString == '5')
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b35      	cmp	r3, #53	; 0x35
 8000ffc:	d111      	bne.n	8001022 <eraseStateMachine+0xf6>
                    {
                        updateUserMsg(3,2,erasingUserMsg,&displayUpdateStatus);
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <eraseStateMachine+0x154>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f107 030a 	add.w	r3, r7, #10
 8001006:	2102      	movs	r1, #2
 8001008:	2003      	movs	r0, #3
 800100a:	f002 f81f 	bl	800304c <updateUserMsg>
                        resetMyResults();
 800100e:	f001 fa89 	bl	8002524 <resetMyResults>
                        //subMenuErase->menuSelect = setSelectSub(&subMenuErase->menuState);
                        subMenuErase->menuState = getNextSub(CONFIRMA_APAGAR);
 8001012:	2002      	movs	r0, #2
 8001014:	f003 fe80 	bl	8004d18 <getNextSub>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	70da      	strb	r2, [r3, #3]
 8001020:	e01f      	b.n	8001062 <eraseStateMachine+0x136>
                    }
                    else if(*ptr_eraseString == '2')
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b32      	cmp	r3, #50	; 0x32
 8001028:	d11b      	bne.n	8001062 <eraseStateMachine+0x136>
                    {
                     subMenuErase->menuState = getNextSub(IDDLE);
 800102a:	2000      	movs	r0, #0
 800102c:	f003 fe74 	bl	8004d18 <getNextSub>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	70da      	strb	r2, [r3, #3]
                      key = MENU;
 8001038:	234d      	movs	r3, #77	; 0x4d
 800103a:	75fb      	strb	r3, [r7, #23]
                    }
                }

            break;
 800103c:	e011      	b.n	8001062 <eraseStateMachine+0x136>

            case CONFIRMA_APAGAR:
                updateUserMsg(3,2,erasedUserMsg,&displayUpdateStatus);
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <eraseStateMachine+0x158>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f107 030a 	add.w	r3, r7, #10
 8001046:	2102      	movs	r1, #2
 8001048:	2003      	movs	r0, #3
 800104a:	f001 ffff 	bl	800304c <updateUserMsg>
                subMenuErase->menuState = getNextSub(IDDLE);
 800104e:	2000      	movs	r0, #0
 8001050:	f003 fe62 	bl	8004d18 <getNextSub>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	70da      	strb	r2, [r3, #3]
                key = MENU;
 800105c:	234d      	movs	r3, #77	; 0x4d
 800105e:	75fb      	strb	r3, [r7, #23]
                break;
 8001060:	bf00      	nop
    while(key != MENU)
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	2b4d      	cmp	r3, #77	; 0x4d
 8001066:	f47f af6e 	bne.w	8000f46 <eraseStateMachine+0x1a>
        }
    }
}
 800106a:	bf00      	nop
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000b8 	.word	0x200000b8
 8001078:	200000d0 	.word	0x200000d0
 800107c:	200000c8 	.word	0x200000c8
 8001080:	200000bc 	.word	0x200000bc
 8001084:	200000c0 	.word	0x200000c0

08001088 <configStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char configStateMachine(struct Menu* subMenu)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b096      	sub	sp, #88	; 0x58
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

	struct tm* configIntervalSeriesTimeStruct;



    struct Menu* subMenuTesteConfigurar = subMenu;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	653b      	str	r3, [r7, #80]	; 0x50
    //
    struct dataInsert* ptr_userConfiguration = getUserConfigStruct();
 8001094:	f001 f8a6 	bl	80021e4 <getUserConfigStruct>
 8001098:	64f8      	str	r0, [r7, #76]	; 0x4c
    resetConfigStruct(ptr_userConfiguration);
 800109a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800109c:	f001 fa04 	bl	80024a8 <resetConfigStruct>

    //
    unsigned char key = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    unsigned char displayUpdateStatus = IDDLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
    short index = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	81bb      	strh	r3, [r7, #12]
    unsigned int altMin = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned int altMax = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
    unsigned int tmin = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned int tmax = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c


    while(key != MENU)
 80010be:	bf00      	nop
 80010c0:	f000 bdd7 	b.w	8001c72 <configStateMachine+0xbea>
    {
        switch(subMenuTesteConfigurar->menuState)
 80010c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c6:	78db      	ldrb	r3, [r3, #3]
 80010c8:	2b0d      	cmp	r3, #13
 80010ca:	f200 85d2 	bhi.w	8001c72 <configStateMachine+0xbea>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <configStateMachine+0x4c>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	0800110d 	.word	0x0800110d
 80010d8:	0800111f 	.word	0x0800111f
 80010dc:	080011c9 	.word	0x080011c9
 80010e0:	08001273 	.word	0x08001273
 80010e4:	08001389 	.word	0x08001389
 80010e8:	080014bf 	.word	0x080014bf
 80010ec:	080015c5 	.word	0x080015c5
 80010f0:	080016d7 	.word	0x080016d7
 80010f4:	080017c5 	.word	0x080017c5
 80010f8:	080018cb 	.word	0x080018cb
 80010fc:	080019d1 	.word	0x080019d1
 8001100:	08001b05 	.word	0x08001b05
 8001104:	08001ba9 	.word	0x08001ba9
 8001108:	08001c4d 	.word	0x08001c4d
        {
        case IDDLE:
            subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 800110c:	2001      	movs	r0, #1
 800110e:	f003 fe03 	bl	8004d18 <getNextSub>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001118:	70da      	strb	r2, [r3, #3]

            break;
 800111a:	f000 bdaa 	b.w	8001c72 <configStateMachine+0xbea>
            case CONFIG_SENSOR_1:
                updateUserMsg(0,USERMSG1,sensor1UserMsg,&displayUpdateStatus);
 800111e:	4bcd      	ldr	r3, [pc, #820]	; (8001454 <configStateMachine+0x3cc>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f107 030f 	add.w	r3, r7, #15
 8001126:	2100      	movs	r1, #0
 8001128:	2000      	movs	r0, #0
 800112a:	f001 ff8f 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800112e:	4bca      	ldr	r3, [pc, #808]	; (8001458 <configStateMachine+0x3d0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	2102      	movs	r1, #2
 8001136:	2000      	movs	r0, #0
 8001138:	f002 feec 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800113c:	4bc6      	ldr	r3, [pc, #792]	; (8001458 <configStateMachine+0x3d0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fadd 	bl	8002700 <stringLenght>
 8001146:	4603      	mov	r3, r0
 8001148:	4618      	mov	r0, r3
 800114a:	4bc4      	ldr	r3, [pc, #784]	; (800145c <configStateMachine+0x3d4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	2102      	movs	r1, #2
 8001152:	f002 fedf 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001156:	4bc2      	ldr	r3, [pc, #776]	; (8001460 <configStateMachine+0x3d8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	2103      	movs	r1, #3
 800115e:	2000      	movs	r0, #0
 8001160:	f002 fed8 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001164:	f004 fbbc 	bl	80058e0 <getKeyPressed>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == AVANCAR)
 800116e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001172:	2b41      	cmp	r3, #65	; 0x41
 8001174:	d10f      	bne.n	8001196 <configStateMachine+0x10e>
                {
                	resetKeyPressed();
 8001176:	f004 fbbf 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800117a:	f107 030f 	add.w	r3, r7, #15
 800117e:	4618      	mov	r0, r3
 8001180:	f001 ff7f 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_2);
 8001184:	2002      	movs	r0, #2
 8001186:	f003 fdc7 	bl	8004d18 <getNextSub>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001190:	70da      	strb	r2, [r3, #3]
 8001192:	f000 bd6e 	b.w	8001c72 <configStateMachine+0xbea>
                }
                else if(key == CONFIRMAR)
 8001196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800119a:	2b43      	cmp	r3, #67	; 0x43
 800119c:	f040 8569 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 80011a0:	f004 fbaa 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80011a4:	f107 030f 	add.w	r3, r7, #15
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 ff6a 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 1;
 80011ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f003 fdae 	bl	8004d18 <getNextSub>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011c2:	70da      	strb	r2, [r3, #3]
                }

                break;
 80011c4:	f000 bd55 	b.w	8001c72 <configStateMachine+0xbea>

            case CONFIG_SENSOR_2:
                updateUserMsg(0,0,sensor2UserMsg,&displayUpdateStatus);
 80011c8:	4ba6      	ldr	r3, [pc, #664]	; (8001464 <configStateMachine+0x3dc>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	f107 030f 	add.w	r3, r7, #15
 80011d0:	2100      	movs	r1, #0
 80011d2:	2000      	movs	r0, #0
 80011d4:	f001 ff3a 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80011d8:	4b9f      	ldr	r3, [pc, #636]	; (8001458 <configStateMachine+0x3d0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	2102      	movs	r1, #2
 80011e0:	2000      	movs	r0, #0
 80011e2:	f002 fe97 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80011e6:	4b9c      	ldr	r3, [pc, #624]	; (8001458 <configStateMachine+0x3d0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fa88 	bl	8002700 <stringLenght>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	4b99      	ldr	r3, [pc, #612]	; (800145c <configStateMachine+0x3d4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2102      	movs	r1, #2
 80011fc:	f002 fe8a 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <configStateMachine+0x3d8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	2103      	movs	r1, #3
 8001208:	2000      	movs	r0, #0
 800120a:	f002 fe83 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 800120e:	f004 fb67 	bl	80058e0 <getKeyPressed>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == AVANCAR)
 8001218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800121c:	2b41      	cmp	r3, #65	; 0x41
 800121e:	d10f      	bne.n	8001240 <configStateMachine+0x1b8>
                {
                	resetKeyPressed();
 8001220:	f004 fb6a 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001224:	f107 030f 	add.w	r3, r7, #15
 8001228:	4618      	mov	r0, r3
 800122a:	f001 ff2a 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 800122e:	2001      	movs	r0, #1
 8001230:	f003 fd72 	bl	8004d18 <getNextSub>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800123a:	70da      	strb	r2, [r3, #3]
 800123c:	f000 bd19 	b.w	8001c72 <configStateMachine+0xbea>
                }
                else if(key == CONFIRMAR)
 8001240:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001244:	2b43      	cmp	r3, #67	; 0x43
 8001246:	f040 8514 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 800124a:	f004 fb55 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800124e:	f107 030f 	add.w	r3, r7, #15
 8001252:	4618      	mov	r0, r3
 8001254:	f001 ff15 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userSelectSensorChannel = 2;
 8001258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 8001260:	2003      	movs	r0, #3
 8001262:	f003 fd59 	bl	8004d18 <getNextSub>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800126c:	70da      	strb	r2, [r3, #3]
                }
                break;
 800126e:	f000 bd00 	b.w	8001c72 <configStateMachine+0xbea>

            case SENSOR_ALTMIN:
                updateUserMsg(0,USERMSG1,altminUserMsg,&displayUpdateStatus);
 8001272:	4b7d      	ldr	r3, [pc, #500]	; (8001468 <configStateMachine+0x3e0>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f107 030f 	add.w	r3, r7, #15
 800127a:	2100      	movs	r1, #0
 800127c:	2000      	movs	r0, #0
 800127e:	f001 fee5 	bl	800304c <updateUserMsg>
                ptr_altMinString = getAltMinString();
 8001282:	f001 faa3 	bl	80027cc <getAltMinString>
 8001286:	61f8      	str	r0, [r7, #28]
                HW_PRINT_DATA(0,USERMSG2,ptr_altMinString);
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	2101      	movs	r1, #1
 800128c:	2000      	movs	r0, #0
 800128e:	f002 fe41 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001292:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001296:	2101      	movs	r1, #1
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fe5f 	bl	8003f5c <HW_UPDATE_DATA>

				HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800129e:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <configStateMachine+0x3d0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2102      	movs	r1, #2
 80012a6:	2000      	movs	r0, #0
 80012a8:	f002 fe34 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <configStateMachine+0x3d0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fa25 	bl	8002700 <stringLenght>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4618      	mov	r0, r3
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <configStateMachine+0x3d4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	2102      	movs	r1, #2
 80012c2:	f002 fe27 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80012c6:	4b66      	ldr	r3, [pc, #408]	; (8001460 <configStateMachine+0x3d8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	2103      	movs	r1, #3
 80012ce:	2000      	movs	r0, #0
 80012d0:	f002 fe20 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80012d4:	4b62      	ldr	r3, [pc, #392]	; (8001460 <configStateMachine+0x3d8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fa11 	bl	8002700 <stringLenght>
 80012de:	4603      	mov	r3, r0
 80012e0:	4618      	mov	r0, r3
 80012e2:	4b62      	ldr	r3, [pc, #392]	; (800146c <configStateMachine+0x3e4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	2103      	movs	r1, #3
 80012ea:	f002 fe13 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 80012ee:	f004 faf7 	bl	80058e0 <getKeyPressed>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 80012f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012fc:	2b49      	cmp	r3, #73	; 0x49
 80012fe:	d10f      	bne.n	8001320 <configStateMachine+0x298>
                {
                	resetKeyPressed();
 8001300:	f004 fafa 	bl	80058f8 <resetKeyPressed>
                    setUserAltMin(&index);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fbbb 	bl	8002a84 <setUserAltMin>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMIN);
 800130e:	2003      	movs	r0, #3
 8001310:	f003 fd02 	bl	8004d18 <getNextSub>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800131a:	70da      	strb	r2, [r3, #3]
 800131c:	f000 bca9 	b.w	8001c72 <configStateMachine+0xbea>
                }
                else if(key == AVANCAR)
 8001320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001324:	2b41      	cmp	r3, #65	; 0x41
 8001326:	d109      	bne.n	800133c <configStateMachine+0x2b4>
                {
                	resetKeyPressed();
 8001328:	f004 fae6 	bl	80058f8 <resetKeyPressed>
                    indexChange(&index,2);
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2102      	movs	r1, #2
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fa2a 	bl	800278c <indexChange>
 8001338:	f000 bc9b 	b.w	8001c72 <configStateMachine+0xbea>
                }
                else if(key == CONFIRMAR)
 800133c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001340:	2b43      	cmp	r3, #67	; 0x43
 8001342:	f040 8496 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 8001346:	f004 fad7 	bl	80058f8 <resetKeyPressed>
                    index = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	81bb      	strh	r3, [r7, #12]
                    altMin = stringToInt(getAltMinString());
 800134e:	f001 fa3d 	bl	80027cc <getAltMinString>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f9c1 	bl	80026dc <stringToInt>
 800135a:	64b8      	str	r0, [r7, #72]	; 0x48
                    tmin = alturaToTempo(altMin);
 800135c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800135e:	f001 fe37 	bl	8002fd0 <alturaToTempo>
 8001362:	4603      	mov	r3, r0
 8001364:	643b      	str	r3, [r7, #64]	; 0x40
                    ptr_userConfiguration->userAlturaMin = tmin;
 8001366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001368:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800136a:	60da      	str	r2, [r3, #12]
                    readyUserInterface(&displayUpdateStatus);
 800136c:	f107 030f 	add.w	r3, r7, #15
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fe86 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8001376:	2004      	movs	r0, #4
 8001378:	f003 fcce 	bl	8004d18 <getNextSub>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001382:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001384:	f000 bc75 	b.w	8001c72 <configStateMachine+0xbea>

            case SENSOR_ALTMAX:
                updateUserMsg(0,USERMSG1,altmaxUserMsg,&displayUpdateStatus);
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <configStateMachine+0x3e8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	f107 030f 	add.w	r3, r7, #15
 8001390:	2100      	movs	r1, #0
 8001392:	2000      	movs	r0, #0
 8001394:	f001 fe5a 	bl	800304c <updateUserMsg>
                ptr_altMaxString = getAltMaxString();
 8001398:	f001 fa38 	bl	800280c <getAltMaxString>
 800139c:	6238      	str	r0, [r7, #32]
                HW_PRINT_DATA(0,USERMSG2,ptr_altMaxString);
 800139e:	6a3a      	ldr	r2, [r7, #32]
 80013a0:	2101      	movs	r1, #1
 80013a2:	2000      	movs	r0, #0
 80013a4:	f002 fdb6 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 80013a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ac:	2101      	movs	r1, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fdd4 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <configStateMachine+0x3d0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	2102      	movs	r1, #2
 80013bc:	2000      	movs	r0, #0
 80013be:	f002 fda9 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <configStateMachine+0x3d0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 f99a 	bl	8002700 <stringLenght>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <configStateMachine+0x3d4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	2102      	movs	r1, #2
 80013d8:	f002 fd9c 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <configStateMachine+0x3d8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	2103      	movs	r1, #3
 80013e4:	2000      	movs	r0, #0
 80013e6:	f002 fd95 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <configStateMachine+0x3d8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 f986 	bl	8002700 <stringLenght>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <configStateMachine+0x3e4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	2103      	movs	r1, #3
 8001400:	f002 fd88 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001404:	f004 fa6c 	bl	80058e0 <getKeyPressed>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 800140e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001412:	2b49      	cmp	r3, #73	; 0x49
 8001414:	d10f      	bne.n	8001436 <configStateMachine+0x3ae>
                {
                	resetKeyPressed();
 8001416:	f004 fa6f 	bl	80058f8 <resetKeyPressed>
                    setUserAltMax(&index);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4618      	mov	r0, r3
 8001420:	f001 fb79 	bl	8002b16 <setUserAltMax>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTMAX);
 8001424:	2004      	movs	r0, #4
 8001426:	f003 fc77 	bl	8004d18 <getNextSub>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001430:	70da      	strb	r2, [r3, #3]
 8001432:	f000 bc1e 	b.w	8001c72 <configStateMachine+0xbea>
                }
                else if(key == AVANCAR)
 8001436:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800143a:	2b41      	cmp	r3, #65	; 0x41
 800143c:	d11a      	bne.n	8001474 <configStateMachine+0x3ec>
                {
                	resetKeyPressed();
 800143e:	f004 fa5b 	bl	80058f8 <resetKeyPressed>
                    indexChange(&index,2);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2102      	movs	r1, #2
 8001448:	4618      	mov	r0, r3
 800144a:	f001 f99f 	bl	800278c <indexChange>
 800144e:	f000 bc10 	b.w	8001c72 <configStateMachine+0xbea>
 8001452:	bf00      	nop
 8001454:	20000078 	.word	0x20000078
 8001458:	200000c4 	.word	0x200000c4
 800145c:	200000cc 	.word	0x200000cc
 8001460:	200000d0 	.word	0x200000d0
 8001464:	2000007c 	.word	0x2000007c
 8001468:	20000080 	.word	0x20000080
 800146c:	200000c8 	.word	0x200000c8
 8001470:	20000084 	.word	0x20000084
                }
                else if(key == CONFIRMAR)
 8001474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001478:	2b43      	cmp	r3, #67	; 0x43
 800147a:	f040 83fa 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 800147e:	f004 fa3b 	bl	80058f8 <resetKeyPressed>
                    index = 2;
 8001482:	2302      	movs	r3, #2
 8001484:	81bb      	strh	r3, [r7, #12]
                    altMax = stringToInt(getAltMaxString());
 8001486:	f001 f9c1 	bl	800280c <getAltMaxString>
 800148a:	4603      	mov	r3, r0
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f925 	bl	80026dc <stringToInt>
 8001492:	6478      	str	r0, [r7, #68]	; 0x44
                    tmax = alturaToTempo(altMax);
 8001494:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001496:	f001 fd9b 	bl	8002fd0 <alturaToTempo>
 800149a:	4603      	mov	r3, r0
 800149c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    ptr_userConfiguration->userAlturaMax = tmax;
 800149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014a2:	611a      	str	r2, [r3, #16]
                    readyUserInterface(&displayUpdateStatus);
 80014a4:	f107 030f 	add.w	r3, r7, #15
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fdea 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 80014ae:	2005      	movs	r0, #5
 80014b0:	f003 fc32 	bl	8004d18 <getNextSub>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ba:	70da      	strb	r2, [r3, #3]
                }

                break;
 80014bc:	e3d9      	b.n	8001c72 <configStateMachine+0xbea>

            case SENSOR_SALTOS:
                updateUserMsg(0,USERMSG1,numsaltosUserMsg,&displayUpdateStatus);
 80014be:	4bb9      	ldr	r3, [pc, #740]	; (80017a4 <configStateMachine+0x71c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f107 030f 	add.w	r3, r7, #15
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f001 fdbf 	bl	800304c <updateUserMsg>
                ptr_numSaltosString = getNumSaltosString();
 80014ce:	f001 f9bd 	bl	800284c <getNumSaltosString>
 80014d2:	6278      	str	r0, [r7, #36]	; 0x24
                HW_PRINT_DATA(0,USERMSG2,ptr_numSaltosString);
 80014d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d6:	2101      	movs	r1, #1
 80014d8:	2000      	movs	r0, #0
 80014da:	f002 fd1b 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 80014de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e2:	2101      	movs	r1, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fd39 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80014ea:	4baf      	ldr	r3, [pc, #700]	; (80017a8 <configStateMachine+0x720>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	2102      	movs	r1, #2
 80014f2:	2000      	movs	r0, #0
 80014f4:	f002 fd0e 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80014f8:	4bab      	ldr	r3, [pc, #684]	; (80017a8 <configStateMachine+0x720>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f8ff 	bl	8002700 <stringLenght>
 8001502:	4603      	mov	r3, r0
 8001504:	4618      	mov	r0, r3
 8001506:	4ba9      	ldr	r3, [pc, #676]	; (80017ac <configStateMachine+0x724>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	2102      	movs	r1, #2
 800150e:	f002 fd01 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001512:	4ba7      	ldr	r3, [pc, #668]	; (80017b0 <configStateMachine+0x728>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	2103      	movs	r1, #3
 800151a:	2000      	movs	r0, #0
 800151c:	f002 fcfa 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001520:	4ba3      	ldr	r3, [pc, #652]	; (80017b0 <configStateMachine+0x728>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f001 f8eb 	bl	8002700 <stringLenght>
 800152a:	4603      	mov	r3, r0
 800152c:	4618      	mov	r0, r3
 800152e:	4ba1      	ldr	r3, [pc, #644]	; (80017b4 <configStateMachine+0x72c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	2103      	movs	r1, #3
 8001536:	f002 fced 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 800153a:	f004 f9d1 	bl	80058e0 <getKeyPressed>
 800153e:	4603      	mov	r3, r0
 8001540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 8001544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001548:	2b49      	cmp	r3, #73	; 0x49
 800154a:	d10e      	bne.n	800156a <configStateMachine+0x4e2>
                {
                	resetKeyPressed();
 800154c:	f004 f9d4 	bl	80058f8 <resetKeyPressed>
                    setUserNumSaltos(&index);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fb02 	bl	8002b5e <setUserNumSaltos>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SALTOS);
 800155a:	2005      	movs	r0, #5
 800155c:	f003 fbdc 	bl	8004d18 <getNextSub>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001566:	70da      	strb	r2, [r3, #3]
 8001568:	e383      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == AVANCAR)
 800156a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800156e:	2b41      	cmp	r3, #65	; 0x41
 8001570:	d108      	bne.n	8001584 <configStateMachine+0x4fc>
                {
                	resetKeyPressed();
 8001572:	f004 f9c1 	bl	80058f8 <resetKeyPressed>
                    indexChange(&index,2);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2102      	movs	r1, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f001 f905 	bl	800278c <indexChange>
 8001582:	e376      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == CONFIRMAR)
 8001584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001588:	2b43      	cmp	r3, #67	; 0x43
 800158a:	f040 8372 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 800158e:	f004 f9b3 	bl	80058f8 <resetKeyPressed>
                    index = 4;
 8001592:	2304      	movs	r3, #4
 8001594:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userNumSaltos = stringToInt(getNumSaltosString());
 8001596:	f001 f959 	bl	800284c <getNumSaltosString>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f001 f89d 	bl	80026dc <stringToInt>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a8:	751a      	strb	r2, [r3, #20]
                    readyUserInterface(&displayUpdateStatus);
 80015aa:	f107 030f 	add.w	r3, r7, #15
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fd67 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 80015b4:	2006      	movs	r0, #6
 80015b6:	f003 fbaf 	bl	8004d18 <getNextSub>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80015c2:	e356      	b.n	8001c72 <configStateMachine+0xbea>

            case SENSOR_INT_SALTOS:
                updateUserMsg(0,USERMSG1,intersaltosUserMsg,&displayUpdateStatus);
 80015c4:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <configStateMachine+0x730>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	f107 030f 	add.w	r3, r7, #15
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f001 fd3c 	bl	800304c <updateUserMsg>
                configIntervalTimeStruct = getIntervalSaltosTimeStruct();
 80015d4:	f000 fd8a 	bl	80020ec <getIntervalSaltosTimeStruct>
 80015d8:	62b8      	str	r0, [r7, #40]	; 0x28
                strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalTimeStruct);
 80015da:	f107 0010 	add.w	r0, r7, #16
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	4a76      	ldr	r2, [pc, #472]	; (80017bc <configStateMachine+0x734>)
 80015e2:	2109      	movs	r1, #9
 80015e4:	f00d f94c 	bl	800e880 <strftime>
                HW_PRINT_DATA(0,USERMSG2,userIntervalTimeString);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	461a      	mov	r2, r3
 80015ee:	2101      	movs	r1, #1
 80015f0:	2000      	movs	r0, #0
 80015f2:	f002 fc8f 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 80015f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015fa:	2101      	movs	r1, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fcad 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <configStateMachine+0x720>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	2102      	movs	r1, #2
 800160a:	2000      	movs	r0, #0
 800160c:	f002 fc82 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001610:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <configStateMachine+0x720>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f001 f873 	bl	8002700 <stringLenght>
 800161a:	4603      	mov	r3, r0
 800161c:	4618      	mov	r0, r3
 800161e:	4b63      	ldr	r3, [pc, #396]	; (80017ac <configStateMachine+0x724>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	2102      	movs	r1, #2
 8001626:	f002 fc75 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800162a:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <configStateMachine+0x728>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	2103      	movs	r1, #3
 8001632:	2000      	movs	r0, #0
 8001634:	f002 fc6e 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001638:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <configStateMachine+0x728>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f001 f85f 	bl	8002700 <stringLenght>
 8001642:	4603      	mov	r3, r0
 8001644:	4618      	mov	r0, r3
 8001646:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <configStateMachine+0x72c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	2103      	movs	r1, #3
 800164e:	f002 fc61 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001652:	f004 f945 	bl	80058e0 <getKeyPressed>
 8001656:	4603      	mov	r3, r0
 8001658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 800165c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001660:	2b49      	cmp	r3, #73	; 0x49
 8001662:	d10e      	bne.n	8001682 <configStateMachine+0x5fa>
                {
                	resetKeyPressed();
 8001664:	f004 f948 	bl	80058f8 <resetKeyPressed>
                	setUserIntervalSaltosTime(&index);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fb73 	bl	8002d58 <setUserIntervalSaltosTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SALTOS);
 8001672:	2006      	movs	r0, #6
 8001674:	f003 fb50 	bl	8004d18 <getNextSub>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800167e:	70da      	strb	r2, [r3, #3]
 8001680:	e2f7      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == AVANCAR)
 8001682:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001686:	2b41      	cmp	r3, #65	; 0x41
 8001688:	d108      	bne.n	800169c <configStateMachine+0x614>
				{
					resetKeyPressed();
 800168a:	f004 f935 	bl	80058f8 <resetKeyPressed>
					indexColumn(&index,4);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2104      	movs	r1, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f000 ffb9 	bl	800260c <indexColumn>
 800169a:	e2ea      	b.n	8001c72 <configStateMachine+0xbea>
				}
                else if(key == CONFIRMAR)
 800169c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016a0:	2b43      	cmp	r3, #67	; 0x43
 80016a2:	f040 82e6 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 80016a6:	f004 f927 	bl	80058f8 <resetKeyPressed>
                    index = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSaltos = milisecondsTime(configIntervalTimeStruct);
 80016ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016b0:	f000 ffe8 	bl	8002684 <milisecondsTime>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ba:	619a      	str	r2, [r3, #24]
                    readyUserInterface(&displayUpdateStatus);
 80016bc:	f107 030f 	add.w	r3, r7, #15
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fcde 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 80016c6:	2007      	movs	r0, #7
 80016c8:	f003 fb26 	bl	8004d18 <getNextSub>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016d2:	70da      	strb	r2, [r3, #3]
                }

                break;
 80016d4:	e2cd      	b.n	8001c72 <configStateMachine+0xbea>

            case SENSOR_JMP_SELECT:
                updateUserMsg(0,USERMSG1,tiposaltoUserMsg,&displayUpdateStatus);
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <configStateMachine+0x738>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f107 030f 	add.w	r3, r7, #15
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f001 fcb3 	bl	800304c <updateUserMsg>
                ptr_jumpSelectString = getTypeJumpString();
 80016e6:	f001 f8d1 	bl	800288c <getTypeJumpString>
 80016ea:	62f8      	str	r0, [r7, #44]	; 0x2c
                HW_PRINT_DATA(0,USERMSG2,ptr_jumpSelectString);
 80016ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ee:	2101      	movs	r1, #1
 80016f0:	2000      	movs	r0, #0
 80016f2:	f002 fc0f 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 80016f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016fa:	2101      	movs	r1, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fc2d 	bl	8003f5c <HW_UPDATE_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <configStateMachine+0x728>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	2103      	movs	r1, #3
 800170a:	2000      	movs	r0, #0
 800170c:	f002 fc02 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <configStateMachine+0x728>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fff3 	bl	8002700 <stringLenght>
 800171a:	4603      	mov	r3, r0
 800171c:	4618      	mov	r0, r3
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <configStateMachine+0x72c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	2103      	movs	r1, #3
 8001726:	f002 fbf5 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 800172a:	f004 f8d9 	bl	80058e0 <getKeyPressed>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 8001734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001738:	2b49      	cmp	r3, #73	; 0x49
 800173a:	d10e      	bne.n	800175a <configStateMachine+0x6d2>
                {
                	resetKeyPressed();
 800173c:	f004 f8dc 	bl	80058f8 <resetKeyPressed>
                    setUserTypeJump(&index);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fa2e 	bl	8002ba6 <setUserTypeJump>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_JMP_SELECT);
 800174a:	2007      	movs	r0, #7
 800174c:	f003 fae4 	bl	8004d18 <getNextSub>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001756:	70da      	strb	r2, [r3, #3]
 8001758:	e28b      	b.n	8001c72 <configStateMachine+0xbea>

                }
                else if(key == CONFIRMAR)
 800175a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800175e:	2b43      	cmp	r3, #67	; 0x43
 8001760:	f040 8287 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 8001764:	f004 f8c8 	bl	80058f8 <resetKeyPressed>
                    if(*ptr_jumpSelectString == '3')
 8001768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b33      	cmp	r3, #51	; 0x33
 800176e:	d109      	bne.n	8001784 <configStateMachine+0x6fc>
                    {
                    	index = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8001774:	2008      	movs	r0, #8
 8001776:	f003 facf 	bl	8004d18 <getNextSub>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001780:	70da      	strb	r2, [r3, #3]
 8001782:	e008      	b.n	8001796 <configStateMachine+0x70e>
                    }
                    else
                    {
                    	index = 2;
 8001784:	2302      	movs	r3, #2
 8001786:	81bb      	strh	r3, [r7, #12]
                        subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001788:	2009      	movs	r0, #9
 800178a:	f003 fac5 	bl	8004d18 <getNextSub>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001794:	70da      	strb	r2, [r3, #3]
                    }
                    //TESTE trocar a variavel por uma local e o resultado enviar para ptr_userConfiguration->userCMJ.
                    readyUserInterface(&displayUpdateStatus);
 8001796:	f107 030f 	add.w	r3, r7, #15
 800179a:	4618      	mov	r0, r3
 800179c:	f001 fc71 	bl	8003082 <readyUserInterface>

                }

                break;
 80017a0:	e267      	b.n	8001c72 <configStateMachine+0xbea>
 80017a2:	bf00      	nop
 80017a4:	20000088 	.word	0x20000088
 80017a8:	200000c4 	.word	0x200000c4
 80017ac:	200000cc 	.word	0x200000cc
 80017b0:	200000d0 	.word	0x200000d0
 80017b4:	200000c8 	.word	0x200000c8
 80017b8:	2000008c 	.word	0x2000008c
 80017bc:	08010070 	.word	0x08010070
 80017c0:	20000090 	.word	0x20000090

            case SENSOR_ALTDJ:
                updateUserMsg(0,USERMSG1,altdjUserMsg,&displayUpdateStatus);
 80017c4:	4bc7      	ldr	r3, [pc, #796]	; (8001ae4 <configStateMachine+0xa5c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f107 030f 	add.w	r3, r7, #15
 80017cc:	2100      	movs	r1, #0
 80017ce:	2000      	movs	r0, #0
 80017d0:	f001 fc3c 	bl	800304c <updateUserMsg>
                ptr_altDJString = getAltDJString();
 80017d4:	f001 f870 	bl	80028b8 <getAltDJString>
 80017d8:	6338      	str	r0, [r7, #48]	; 0x30
                HW_PRINT_DATA(0,USERMSG2,ptr_altDJString);
 80017da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017dc:	2101      	movs	r1, #1
 80017de:	2000      	movs	r0, #0
 80017e0:	f002 fb98 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 80017e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017e8:	2101      	movs	r1, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fbb6 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80017f0:	4bbd      	ldr	r3, [pc, #756]	; (8001ae8 <configStateMachine+0xa60>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	2102      	movs	r1, #2
 80017f8:	2000      	movs	r0, #0
 80017fa:	f002 fb8b 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80017fe:	4bba      	ldr	r3, [pc, #744]	; (8001ae8 <configStateMachine+0xa60>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 ff7c 	bl	8002700 <stringLenght>
 8001808:	4603      	mov	r3, r0
 800180a:	4618      	mov	r0, r3
 800180c:	4bb7      	ldr	r3, [pc, #732]	; (8001aec <configStateMachine+0xa64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	2102      	movs	r1, #2
 8001814:	f002 fb7e 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001818:	4bb5      	ldr	r3, [pc, #724]	; (8001af0 <configStateMachine+0xa68>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	2103      	movs	r1, #3
 8001820:	2000      	movs	r0, #0
 8001822:	f002 fb77 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001826:	4bb2      	ldr	r3, [pc, #712]	; (8001af0 <configStateMachine+0xa68>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 ff68 	bl	8002700 <stringLenght>
 8001830:	4603      	mov	r3, r0
 8001832:	4618      	mov	r0, r3
 8001834:	4baf      	ldr	r3, [pc, #700]	; (8001af4 <configStateMachine+0xa6c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	2103      	movs	r1, #3
 800183c:	f002 fb6a 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001840:	f004 f84e 	bl	80058e0 <getKeyPressed>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 800184a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800184e:	2b49      	cmp	r3, #73	; 0x49
 8001850:	d10e      	bne.n	8001870 <configStateMachine+0x7e8>
                {
                	resetKeyPressed();
 8001852:	f004 f851 	bl	80058f8 <resetKeyPressed>
                    setUserAltDJ(&index);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4618      	mov	r0, r3
 800185c:	f001 f9c7 	bl	8002bee <setUserAltDJ>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_ALTDJ);
 8001860:	2008      	movs	r0, #8
 8001862:	f003 fa59 	bl	8004d18 <getNextSub>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186c:	70da      	strb	r2, [r3, #3]
 800186e:	e200      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == CONFIRMAR)
 8001870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001874:	2b43      	cmp	r3, #67	; 0x43
 8001876:	d11a      	bne.n	80018ae <configStateMachine+0x826>
                {
                	resetKeyPressed();
 8001878:	f004 f83e 	bl	80058f8 <resetKeyPressed>
                    index = 2;
 800187c:	2302      	movs	r3, #2
 800187e:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 8001880:	f107 030f 	add.w	r3, r7, #15
 8001884:	4618      	mov	r0, r3
 8001886:	f001 fbfc 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userAlturaDJ = stringToInt(getAltDJString());
 800188a:	f001 f815 	bl	80028b8 <getAltDJString>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	f000 ff23 	bl	80026dc <stringToInt>
 8001896:	4603      	mov	r3, r0
 8001898:	b2da      	uxtb	r2, r3
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	775a      	strb	r2, [r3, #29]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 800189e:	2009      	movs	r0, #9
 80018a0:	f003 fa3a 	bl	8004d18 <getNextSub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018aa:	70da      	strb	r2, [r3, #3]
 80018ac:	e1e1      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == AVANCAR)
 80018ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018b2:	2b41      	cmp	r3, #65	; 0x41
 80018b4:	f040 81dd 	bne.w	8001c72 <configStateMachine+0xbea>
				{
					resetKeyPressed();
 80018b8:	f004 f81e 	bl	80058f8 <resetKeyPressed>
					indexColumn(&index,2);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fea2 	bl	800260c <indexColumn>
				}

                break;
 80018c8:	e1d3      	b.n	8001c72 <configStateMachine+0xbea>

            case SENSOR_SERIES:
                updateUserMsg(0,USERMSG1,numserieUserMsg,&displayUpdateStatus);
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <configStateMachine+0xa70>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f107 030f 	add.w	r3, r7, #15
 80018d2:	2100      	movs	r1, #0
 80018d4:	2000      	movs	r0, #0
 80018d6:	f001 fbb9 	bl	800304c <updateUserMsg>
                ptr_numSeriesString = getNumSeriesString();
 80018da:	f001 f807 	bl	80028ec <getNumSeriesString>
 80018de:	6378      	str	r0, [r7, #52]	; 0x34
                HW_PRINT_DATA(0,USERMSG2,ptr_numSeriesString);
 80018e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e2:	2101      	movs	r1, #1
 80018e4:	2000      	movs	r0, #0
 80018e6:	f002 fb15 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 80018ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018ee:	2101      	movs	r1, #1
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fb33 	bl	8003f5c <HW_UPDATE_DATA>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80018f6:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <configStateMachine+0xa60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	2102      	movs	r1, #2
 80018fe:	2000      	movs	r0, #0
 8001900:	f002 fb08 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001904:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <configStateMachine+0xa60>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fef9 	bl	8002700 <stringLenght>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	4b76      	ldr	r3, [pc, #472]	; (8001aec <configStateMachine+0xa64>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	2102      	movs	r1, #2
 800191a:	f002 fafb 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800191e:	4b74      	ldr	r3, [pc, #464]	; (8001af0 <configStateMachine+0xa68>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	2103      	movs	r1, #3
 8001926:	2000      	movs	r0, #0
 8001928:	f002 faf4 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800192c:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <configStateMachine+0xa68>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fee5 	bl	8002700 <stringLenght>
 8001936:	4603      	mov	r3, r0
 8001938:	4618      	mov	r0, r3
 800193a:	4b6e      	ldr	r3, [pc, #440]	; (8001af4 <configStateMachine+0xa6c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	2103      	movs	r1, #3
 8001942:	f002 fae7 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001946:	f003 ffcb 	bl	80058e0 <getKeyPressed>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 8001950:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001954:	2b49      	cmp	r3, #73	; 0x49
 8001956:	d10e      	bne.n	8001976 <configStateMachine+0x8ee>
                {
                	resetKeyPressed();
 8001958:	f003 ffce 	bl	80058f8 <resetKeyPressed>
                    setUserNumSeries(&index);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4618      	mov	r0, r3
 8001962:	f001 f968 	bl	8002c36 <setUserNumSeries>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_SERIES);
 8001966:	2009      	movs	r0, #9
 8001968:	f003 f9d6 	bl	8004d18 <getNextSub>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001972:	70da      	strb	r2, [r3, #3]
 8001974:	e17d      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == AVANCAR)
 8001976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800197a:	2b41      	cmp	r3, #65	; 0x41
 800197c:	d108      	bne.n	8001990 <configStateMachine+0x908>
				{
					resetKeyPressed();
 800197e:	f003 ffbb 	bl	80058f8 <resetKeyPressed>
					indexColumn(&index,2);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	2102      	movs	r1, #2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fe3f 	bl	800260c <indexColumn>
 800198e:	e170      	b.n	8001c72 <configStateMachine+0xbea>
				}
                else if(key == CONFIRMAR)
 8001990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001994:	2b43      	cmp	r3, #67	; 0x43
 8001996:	f040 816c 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 800199a:	f003 ffad 	bl	80058f8 <resetKeyPressed>
                    index = 4;
 800199e:	2304      	movs	r3, #4
 80019a0:	81bb      	strh	r3, [r7, #12]
                    readyUserInterface(&displayUpdateStatus);
 80019a2:	f107 030f 	add.w	r3, r7, #15
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 fb6b 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userNumSeries = stringToInt(getNumSeriesString());
 80019ac:	f000 ff9e 	bl	80028ec <getNumSeriesString>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fe92 	bl	80026dc <stringToInt>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019be:	779a      	strb	r2, [r3, #30]
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 80019c0:	200a      	movs	r0, #10
 80019c2:	f003 f9a9 	bl	8004d18 <getNextSub>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019cc:	70da      	strb	r2, [r3, #3]
                }

                break;
 80019ce:	e150      	b.n	8001c72 <configStateMachine+0xbea>

            case SENSOR_INT_SERIES:
                updateUserMsg(0,USERMSG1,interseriesUserMsg,&displayUpdateStatus);
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <configStateMachine+0xa74>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	f107 030f 	add.w	r3, r7, #15
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f001 fb36 	bl	800304c <updateUserMsg>
                configIntervalSeriesTimeStruct = getintervalSeriesTimeStruct();
 80019e0:	f000 fb90 	bl	8002104 <getintervalSeriesTimeStruct>
 80019e4:	63b8      	str	r0, [r7, #56]	; 0x38
				strftime(userIntervalTimeString, sizeof(userIntervalTimeString), "%M:%S", configIntervalSeriesTimeStruct);
 80019e6:	f107 0010 	add.w	r0, r7, #16
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	4a44      	ldr	r2, [pc, #272]	; (8001b00 <configStateMachine+0xa78>)
 80019ee:	2109      	movs	r1, #9
 80019f0:	f00c ff46 	bl	800e880 <strftime>
				HW_PRINT_DATA(0,USERMSG2,userIntervalTimeString);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	461a      	mov	r2, r3
 80019fa:	2101      	movs	r1, #1
 80019fc:	2000      	movs	r0, #0
 80019fe:	f002 fa89 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001a02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 faa7 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001a0e:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <configStateMachine+0xa60>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	2102      	movs	r1, #2
 8001a16:	2000      	movs	r0, #0
 8001a18:	f002 fa7c 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <configStateMachine+0xa60>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fe6d 	bl	8002700 <stringLenght>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <configStateMachine+0xa64>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2102      	movs	r1, #2
 8001a32:	f002 fa6f 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <configStateMachine+0xa68>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f002 fa68 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <configStateMachine+0xa68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fe59 	bl	8002700 <stringLenght>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <configStateMachine+0xa6c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	2103      	movs	r1, #3
 8001a5a:	f002 fa5b 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001a5e:	f003 ff3f 	bl	80058e0 <getKeyPressed>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == INSERIR)
 8001a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a6c:	2b49      	cmp	r3, #73	; 0x49
 8001a6e:	d10e      	bne.n	8001a8e <configStateMachine+0xa06>
                {
                	resetKeyPressed();
 8001a70:	f003 ff42 	bl	80058f8 <resetKeyPressed>
                	setUserIntervalSeriesTime(&index);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 f9cb 	bl	8002e14 <setUserIntervalSeriesTime>
                    subMenuTesteConfigurar->menuState = getNextSub(SENSOR_INT_SERIES);
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f003 f94a 	bl	8004d18 <getNextSub>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a8a:	70da      	strb	r2, [r3, #3]
 8001a8c:	e0f1      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == AVANCAR)
 8001a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a92:	2b41      	cmp	r3, #65	; 0x41
 8001a94:	d108      	bne.n	8001aa8 <configStateMachine+0xa20>
				{
					resetKeyPressed();
 8001a96:	f003 ff2f 	bl	80058f8 <resetKeyPressed>
					indexColumn(&index,4);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fdb3 	bl	800260c <indexColumn>
 8001aa6:	e0e4      	b.n	8001c72 <configStateMachine+0xbea>
				}
                else if(key == CONFIRMAR)
 8001aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001aac:	2b43      	cmp	r3, #67	; 0x43
 8001aae:	f040 80e0 	bne.w	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 8001ab2:	f003 ff21 	bl	80058f8 <resetKeyPressed>
                    index = 2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	81bb      	strh	r3, [r7, #12]
                    ptr_userConfiguration->userIntervalSeries = milisecondsTime(configIntervalSeriesTimeStruct);
 8001aba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001abc:	f000 fde2 	bl	8002684 <milisecondsTime>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac6:	621a      	str	r2, [r3, #32]
                    readyUserInterface(&displayUpdateStatus);
 8001ac8:	f107 030f 	add.w	r3, r7, #15
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 fad8 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001ad2:	200b      	movs	r0, #11
 8001ad4:	f003 f920 	bl	8004d18 <getNextSub>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ade:	70da      	strb	r2, [r3, #3]
                }

            break;
 8001ae0:	e0c7      	b.n	8001c72 <configStateMachine+0xbea>
 8001ae2:	bf00      	nop
 8001ae4:	20000094 	.word	0x20000094
 8001ae8:	200000c4 	.word	0x200000c4
 8001aec:	200000cc 	.word	0x200000cc
 8001af0:	200000d0 	.word	0x200000d0
 8001af4:	200000c8 	.word	0x200000c8
 8001af8:	20000098 	.word	0x20000098
 8001afc:	2000009c 	.word	0x2000009c
 8001b00:	08010070 	.word	0x08010070

            case TAPETE_ON:
                updateUserMsg(0,USERMSG1,intapeteUserMsg,&displayUpdateStatus);
 8001b04:	4b60      	ldr	r3, [pc, #384]	; (8001c88 <configStateMachine+0xc00>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	f107 030f 	add.w	r3, r7, #15
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f001 fa9c 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001b14:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <configStateMachine+0xc04>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f002 f9f9 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001b22:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <configStateMachine+0xc04>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fdea 	bl	8002700 <stringLenght>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <configStateMachine+0xc08>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	2102      	movs	r1, #2
 8001b38:	f002 f9ec 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001b3c:	4b55      	ldr	r3, [pc, #340]	; (8001c94 <configStateMachine+0xc0c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	2103      	movs	r1, #3
 8001b44:	2000      	movs	r0, #0
 8001b46:	f002 f9e5 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001b4a:	f003 fec9 	bl	80058e0 <getKeyPressed>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == AVANCAR)
 8001b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b58:	2b41      	cmp	r3, #65	; 0x41
 8001b5a:	d10e      	bne.n	8001b7a <configStateMachine+0xaf2>
                {
                	resetKeyPressed();
 8001b5c:	f003 fecc 	bl	80058f8 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus);
 8001b60:	f107 030f 	add.w	r3, r7, #15
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 fa8c 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_OFF);
 8001b6a:	200c      	movs	r0, #12
 8001b6c:	f003 f8d4 	bl	8004d18 <getNextSub>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b76:	70da      	strb	r2, [r3, #3]
 8001b78:	e07b      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == CONFIRMAR)
 8001b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b7e:	2b43      	cmp	r3, #67	; 0x43
 8001b80:	d177      	bne.n	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 8001b82:	f003 feb9 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001b86:	f107 030f 	add.w	r3, r7, #15
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fa79 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userSelectTapete = TRUE;
 8001b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001b98:	200d      	movs	r0, #13
 8001b9a:	f003 f8bd 	bl	8004d18 <getNextSub>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba4:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001ba6:	e064      	b.n	8001c72 <configStateMachine+0xbea>

            case TAPETE_OFF:
                updateUserMsg(0,USERMSG1,outtapeteUserMsg,&displayUpdateStatus);
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <configStateMachine+0xc10>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f107 030f 	add.w	r3, r7, #15
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f001 fa4a 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <configStateMachine+0xc04>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f002 f9a7 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <configStateMachine+0xc04>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fd98 	bl	8002700 <stringLenght>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <configStateMachine+0xc08>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2102      	movs	r1, #2
 8001bdc:	f002 f99a 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <configStateMachine+0xc0c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2103      	movs	r1, #3
 8001be8:	2000      	movs	r0, #0
 8001bea:	f002 f993 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001bee:	f003 fe77 	bl	80058e0 <getKeyPressed>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(key == AVANCAR)
 8001bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bfc:	2b41      	cmp	r3, #65	; 0x41
 8001bfe:	d10e      	bne.n	8001c1e <configStateMachine+0xb96>
                {
                	resetKeyPressed();
 8001c00:	f003 fe7a 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001c04:	f107 030f 	add.w	r3, r7, #15
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fa3a 	bl	8003082 <readyUserInterface>
                    subMenuTesteConfigurar->menuState = getNextSub(TAPETE_ON);
 8001c0e:	200b      	movs	r0, #11
 8001c10:	f003 f882 	bl	8004d18 <getNextSub>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c1a:	70da      	strb	r2, [r3, #3]
 8001c1c:	e029      	b.n	8001c72 <configStateMachine+0xbea>
                }
                else if(key == CONFIRMAR)
 8001c1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c22:	2b43      	cmp	r3, #67	; 0x43
 8001c24:	d125      	bne.n	8001c72 <configStateMachine+0xbea>
                {
                	resetKeyPressed();
 8001c26:	f003 fe67 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001c2a:	f107 030f 	add.w	r3, r7, #15
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fa27 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userSelectTapete = FALSE;
 8001c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    subMenuTesteConfigurar->menuState = getNextSub(SAVE_CONFIGS);
 8001c3c:	200d      	movs	r0, #13
 8001c3e:	f003 f86b 	bl	8004d18 <getNextSub>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c48:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001c4a:	e012      	b.n	8001c72 <configStateMachine+0xbea>

            case SAVE_CONFIGS:
                subMenuTesteConfigurar->menuState = getNextSub(CONFIG_SENSOR_1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f003 f863 	bl	8004d18 <getNextSub>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c58:	70da      	strb	r2, [r3, #3]
                setInsertData(ptr_userConfiguration);
 8001c5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c5c:	f003 f86e 	bl	8004d3c <setInsertData>
//                wflashConfigData(ptr_userConfiguration);
                readyUserInterface(&displayUpdateStatus);
 8001c60:	f107 030f 	add.w	r3, r7, #15
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 fa0c 	bl	8003082 <readyUserInterface>
                key = MENU;
 8001c6a:	234d      	movs	r3, #77	; 0x4d
 8001c6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                break;
 8001c70:	bf00      	nop
    while(key != MENU)
 8001c72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c76:	2b4d      	cmp	r3, #77	; 0x4d
 8001c78:	f47f aa24 	bne.w	80010c4 <configStateMachine+0x3c>
        }
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3758      	adds	r7, #88	; 0x58
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200000a0 	.word	0x200000a0
 8001c8c:	200000c4 	.word	0x200000c4
 8001c90:	200000cc 	.word	0x200000cc
 8001c94:	200000d0 	.word	0x200000d0
 8001c98:	200000a4 	.word	0x200000a4

08001c9c <consultStateMachine>:
        unsigned char menuState;
//        struct dataInsert menuInsert;
    };

unsigned char consultStateMachine(struct Menu* subMenu)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuTesteConsultar = subMenu;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char* ptr_sampleString;
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    unsigned char* ptr_potString;
    struct results* ptr_structConsultResult;
    unsigned char selectedUserTest = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char testSamples=0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    //unsigned char cursorPosition[2] = {0,0};
    short index = 2; //(000 MENU)
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	81fb      	strh	r3, [r7, #14]
    unsigned char key = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    static unsigned char results = 0;
    unsigned char displayUpdateStatus = IDDLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	737b      	strb	r3, [r7, #13]

    while(key != MENU)
 8001cc2:	bf00      	nop
 8001cc4:	e19c      	b.n	8002000 <consultStateMachine+0x364>
    {
        switch(subMenuTesteConsultar->menuState)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	78db      	ldrb	r3, [r3, #3]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	f200 8198 	bhi.w	8002000 <consultStateMachine+0x364>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <consultStateMachine+0x3c>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cf9 	.word	0x08001cf9
 8001ce0:	08001de7 	.word	0x08001de7
 8001ce4:	08001f6d 	.word	0x08001f6d
        {
            case IDDLE:
                subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f003 f815 	bl	8004d18 <getNextSub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	70da      	strb	r2, [r3, #3]
            break;
 8001cf6:	e183      	b.n	8002000 <consultStateMachine+0x364>

            case CONSULTA_TESTE:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 8001cf8:	4bc6      	ldr	r3, [pc, #792]	; (8002014 <consultStateMachine+0x378>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f107 030d 	add.w	r3, r7, #13
 8001d00:	2100      	movs	r1, #0
 8001d02:	2000      	movs	r0, #0
 8001d04:	f001 f9a2 	bl	800304c <updateUserMsg>
                ptr_consultTestString = getNumTestString();
 8001d08:	f000 fe5c 	bl	80029c4 <getNumTestString>
 8001d0c:	62f8      	str	r0, [r7, #44]	; 0x2c
                HW_PRINT_DATA(0,USERMSG2,ptr_consultTestString);
 8001d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d10:	2101      	movs	r1, #1
 8001d12:	2000      	movs	r0, #0
 8001d14:	f002 f8fe 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 8001d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f91c 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8001d24:	4bbc      	ldr	r3, [pc, #752]	; (8002018 <consultStateMachine+0x37c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f002 f8f1 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8001d32:	4bb9      	ldr	r3, [pc, #740]	; (8002018 <consultStateMachine+0x37c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fce2 	bl	8002700 <stringLenght>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4bb6      	ldr	r3, [pc, #728]	; (800201c <consultStateMachine+0x380>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	2102      	movs	r1, #2
 8001d48:	f002 f8e4 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8001d4c:	4bb4      	ldr	r3, [pc, #720]	; (8002020 <consultStateMachine+0x384>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	2103      	movs	r1, #3
 8001d54:	2000      	movs	r0, #0
 8001d56:	f002 f8dd 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8001d5a:	4bb1      	ldr	r3, [pc, #708]	; (8002020 <consultStateMachine+0x384>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fcce 	bl	8002700 <stringLenght>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	4bae      	ldr	r3, [pc, #696]	; (8002024 <consultStateMachine+0x388>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2103      	movs	r1, #3
 8001d70:	f002 f8d0 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001d74:	f003 fdb4 	bl	80058e0 <getKeyPressed>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if(key == INSERIR)
 8001d7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d82:	2b49      	cmp	r3, #73	; 0x49
 8001d84:	d10e      	bne.n	8001da4 <consultStateMachine+0x108>
                {
                	resetKeyPressed();
 8001d86:	f003 fdb7 	bl	80058f8 <resetKeyPressed>
                    setUserNumTest(&index);
 8001d8a:	f107 030e 	add.w	r3, r7, #14
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 ffbd 	bl	8002d0e <setUserNumTest>
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f002 ffbf 	bl	8004d18 <getNextSub>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	70da      	strb	r2, [r3, #3]
 8001da2:	e12d      	b.n	8002000 <consultStateMachine+0x364>
                }
                else if(key == AVANCAR)
 8001da4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001da8:	2b41      	cmp	r3, #65	; 0x41
 8001daa:	d108      	bne.n	8001dbe <consultStateMachine+0x122>
                {
                	resetKeyPressed();
 8001dac:	f003 fda4 	bl	80058f8 <resetKeyPressed>
                    indexChange(&index,2);
 8001db0:	f107 030e 	add.w	r3, r7, #14
 8001db4:	2102      	movs	r1, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fce8 	bl	800278c <indexChange>
 8001dbc:	e120      	b.n	8002000 <consultStateMachine+0x364>
                }
                else if(key == CONFIRMAR)
 8001dbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001dc2:	2b43      	cmp	r3, #67	; 0x43
 8001dc4:	f040 811c 	bne.w	8002000 <consultStateMachine+0x364>
                {
                	resetKeyPressed();
 8001dc8:	f003 fd96 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001dcc:	f107 030d 	add.w	r3, r7, #13
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 f956 	bl	8003082 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f002 ff9e 	bl	8004d18 <getNextSub>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	70da      	strb	r2, [r3, #3]
                    //subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
                }
            break;
 8001de4:	e10c      	b.n	8002000 <consultStateMachine+0x364>

            case RESULT_TESTE:
                selectedUserTest = stringToInt(ptr_consultTestString);
 8001de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001de8:	f000 fc78 	bl	80026dc <stringToInt>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                HW_PRINT_DATA(0,OPTIONMSG,avancarUserMsg);
 8001df2:	4b89      	ldr	r3, [pc, #548]	; (8002018 <consultStateMachine+0x37c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	2103      	movs	r1, #3
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f002 f88a 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),OPTIONMSG,pararUserMsg);
 8001e00:	4b85      	ldr	r3, [pc, #532]	; (8002018 <consultStateMachine+0x37c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fc7b 	bl	8002700 <stringLenght>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	4b86      	ldr	r3, [pc, #536]	; (8002028 <consultStateMachine+0x38c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	2103      	movs	r1, #3
 8001e16:	f002 f87d 	bl	8003f14 <HW_PRINT_DATA>
//                ptr_structConsultResult = load_data(selectedUserTest); //APENAS PARA APLICAÇÃO COM SD
                ptr_structConsultResult = getUserResultData(selectedUserTest);
 8001e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fa56 	bl	80022d0 <getUserResultData>
 8001e24:	61f8      	str	r0, [r7, #28]
                if(testSamples<(ptr_structConsultResult->resultTestAcquiredSamples))
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	785b      	ldrb	r3, [r3, #1]
 8001e2a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d25e      	bcs.n	8001ef0 <consultStateMachine+0x254>
                {
                	HW_PRINT_DATA(0,USERMSG1,amostraUserMsg);
 8001e32:	4b7e      	ldr	r3, [pc, #504]	; (800202c <consultStateMachine+0x390>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f002 f86a 	bl	8003f14 <HW_PRINT_DATA>
					ptr_sampleString = param_1_toString(&ptr_structConsultResult->Measurement[testSamples].sampleNum);
 8001e40:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3304      	adds	r3, #4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fdee 	bl	8002a34 <param_1_toString>
 8001e58:	61b8      	str	r0, [r7, #24]
					HW_PRINT_DATA(stringLenght(amostraUserMsg),USERMSG1 , ptr_sampleString);
 8001e5a:	4b74      	ldr	r3, [pc, #464]	; (800202c <consultStateMachine+0x390>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fc4e 	bl	8002700 <stringLenght>
 8001e64:	4603      	mov	r3, r0
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 f852 	bl	8003f14 <HW_PRINT_DATA>

					HW_PRINT_DATA(0,USERMSG2,tempoVooUserMsg);
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <consultStateMachine+0x394>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	2101      	movs	r1, #1
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f002 f84b 	bl	8003f14 <HW_PRINT_DATA>
					ptr_vooTimeString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiVooTime);
 8001e7e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3308      	adds	r3, #8
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fde3 	bl	8002a5c <param_2_toString>
 8001e96:	6178      	str	r0, [r7, #20]
					HW_PRINT_DATA(stringLenght(tempoVooUserMsg),USERMSG2 ,ptr_vooTimeString);
 8001e98:	4b65      	ldr	r3, [pc, #404]	; (8002030 <consultStateMachine+0x394>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fc2f 	bl	8002700 <stringLenght>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 f833 	bl	8003f14 <HW_PRINT_DATA>


					HW_PRINT_DATA(0,INSERTMSG,tempoSoloUserMsg);
 8001eae:	4b61      	ldr	r3, [pc, #388]	; (8002034 <consultStateMachine+0x398>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f002 f82c 	bl	8003f14 <HW_PRINT_DATA>
					ptr_alturaString = param_2_toString(&ptr_structConsultResult->Measurement[testSamples].uiSoloTime);
 8001ebc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	3308      	adds	r3, #8
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fdc3 	bl	8002a5c <param_2_toString>
 8001ed6:	6138      	str	r0, [r7, #16]
					HW_PRINT_DATA(stringLenght(tempoSoloUserMsg),INSERTMSG , ptr_alturaString);
 8001ed8:	4b56      	ldr	r3, [pc, #344]	; (8002034 <consultStateMachine+0x398>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fc0f 	bl	8002700 <stringLenght>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 f813 	bl	8003f14 <HW_PRINT_DATA>
 8001eee:	e004      	b.n	8001efa <consultStateMachine+0x25e>

//                  ptr_potString; = param_3_toString(&ptr_structExportResult->Measurement[testSamples].uiSoloTime);
//					HW_PRINT_DATA(0, INSERTMSG, ptr_potString);

                }
                else  HW_PRINT_DATA(0,0,"VAZIO");
 8001ef0:	4a51      	ldr	r2, [pc, #324]	; (8002038 <consultStateMachine+0x39c>)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f002 f80d 	bl	8003f14 <HW_PRINT_DATA>

                key = getKeyPressed();
 8001efa:	f003 fcf1 	bl	80058e0 <getKeyPressed>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == AVANCAR)
 8001f04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f08:	2b41      	cmp	r3, #65	; 0x41
 8001f0a:	d11c      	bne.n	8001f46 <consultStateMachine+0x2aa>
                {
                	resetKeyPressed();
 8001f0c:	f003 fcf4 	bl	80058f8 <resetKeyPressed>
                	readyUserInterface(&displayUpdateStatus);
 8001f10:	f107 030d 	add.w	r3, r7, #13
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 f8b4 	bl	8003082 <readyUserInterface>
                    testSamples++;
 8001f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(testSamples == ptr_structConsultResult->resultTestAcquiredSamples) testSamples = 0;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	785b      	ldrb	r3, [r3, #1]
 8001f28:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d102      	bne.n	8001f36 <consultStateMachine+0x29a>
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    subMenuTesteConsultar->menuState = getNextSub(RESULT_TESTE);
 8001f36:	2002      	movs	r0, #2
 8001f38:	f002 feee 	bl	8004d18 <getNextSub>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	70da      	strb	r2, [r3, #3]
 8001f44:	e05c      	b.n	8002000 <consultStateMachine+0x364>
                }
                else if(key == PARAR)
 8001f46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f4a:	2b50      	cmp	r3, #80	; 0x50
 8001f4c:	d158      	bne.n	8002000 <consultStateMachine+0x364>
                {
                	resetKeyPressed();
 8001f4e:	f003 fcd3 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001f52:	f107 030d 	add.w	r3, r7, #13
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 f893 	bl	8003082 <readyUserInterface>
                    subMenuTesteConsultar->menuState = getNextSub(EXPORTAR);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f002 fedb 	bl	8004d18 <getNextSub>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001f6a:	e049      	b.n	8002000 <consultStateMachine+0x364>

            case EXPORTAR:
                updateUserMsg(0,USERMSG1,consultExportUserMsg,&displayUpdateStatus);
 8001f6c:	4b33      	ldr	r3, [pc, #204]	; (800203c <consultStateMachine+0x3a0>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f107 030d 	add.w	r3, r7, #13
 8001f74:	2100      	movs	r1, #0
 8001f76:	2000      	movs	r0, #0
 8001f78:	f001 f868 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,selecionarUserMsg);
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <consultStateMachine+0x384>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	2102      	movs	r1, #2
 8001f84:	2000      	movs	r0, #0
 8001f86:	f001 ffc5 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,pararUserMsg);
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <consultStateMachine+0x38c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2103      	movs	r1, #3
 8001f92:	2000      	movs	r0, #0
 8001f94:	f001 ffbe 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8001f98:	f003 fca2 	bl	80058e0 <getKeyPressed>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if(key == PARAR)
 8001fa2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001fa6:	2b50      	cmp	r3, #80	; 0x50
 8001fa8:	d111      	bne.n	8001fce <consultStateMachine+0x332>
                {
                	resetKeyPressed();
 8001faa:	f003 fca5 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8001fae:	f107 030d 	add.w	r3, r7, #13
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 f865 	bl	8003082 <readyUserInterface>
                    key = MENU;
 8001fb8:	234d      	movs	r3, #77	; 0x4d
 8001fba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f002 feaa 	bl	8004d18 <getNextSub>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	70da      	strb	r2, [r3, #3]
 8001fcc:	e017      	b.n	8001ffe <consultStateMachine+0x362>
                }
                else if(key == CONFIRMAR)
 8001fce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001fd2:	2b43      	cmp	r3, #67	; 0x43
 8001fd4:	d113      	bne.n	8001ffe <consultStateMachine+0x362>
                {
                	resetKeyPressed();
 8001fd6:	f003 fc8f 	bl	80058f8 <resetKeyPressed>
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <consultStateMachine+0x3a4>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f107 030d 	add.w	r3, r7, #13
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f001 f831 	bl	800304c <updateUserMsg>
                    //subMenuTesteConsultar->menuSelect = setSelectSub(&subMenuTesteConsultar->menuState);
                    subMenuTesteConsultar->menuState = getNextSub(CONSULTA_TESTE);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f002 fe94 	bl	8004d18 <getNextSub>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	70da      	strb	r2, [r3, #3]
                    key = MENU;
 8001ff8:	234d      	movs	r3, #77	; 0x4d
 8001ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                }
                break;
 8001ffe:	bf00      	nop
    while(key != MENU)
 8002000:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002004:	2b4d      	cmp	r3, #77	; 0x4d
 8002006:	f47f ae5e 	bne.w	8001cc6 <consultStateMachine+0x2a>
        }
    }
}
 800200a:	bf00      	nop
 800200c:	4618      	mov	r0, r3
 800200e:	3730      	adds	r7, #48	; 0x30
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000068 	.word	0x20000068
 8002018:	200000c4 	.word	0x200000c4
 800201c:	200000cc 	.word	0x200000cc
 8002020:	200000d0 	.word	0x200000d0
 8002024:	200000c8 	.word	0x200000c8
 8002028:	200000d4 	.word	0x200000d4
 800202c:	20000040 	.word	0x20000040
 8002030:	20000048 	.word	0x20000048
 8002034:	2000004c 	.word	0x2000004c
 8002038:	08010078 	.word	0x08010078
 800203c:	2000006c 	.word	0x2000006c
 8002040:	20000070 	.word	0x20000070

08002044 <getUserTime>:
{
	return myData.userNumSeries;
}

unsigned long int getUserTime()
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
    return myData.userTime;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <getUserTime+0x14>)
 800204a:	685b      	ldr	r3, [r3, #4]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200001e4 	.word	0x200001e4

0800205c <getUserNumSaltos>:
{
    return myData.userAlturaMax;
}

unsigned char getUserNumSaltos()
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    return myData.userNumSaltos;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <getUserNumSaltos+0x14>)
 8002062:	7d1b      	ldrb	r3, [r3, #20]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200001e4 	.word	0x200001e4

08002074 <getUserIntervalSaltos>:

unsigned char getUserIntervalSaltos()
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
    return myData.userIntervalSaltos;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <getUserIntervalSaltos+0x14>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	b2db      	uxtb	r3, r3
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	200001e4 	.word	0x200001e4

0800208c <getUserNumSeries>:
{
    return myData.userAlturaDJ;
}

unsigned char getUserNumSeries()
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
    return myData.userNumSeries;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <getUserNumSeries+0x14>)
 8002092:	7f9b      	ldrb	r3, [r3, #30]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200001e4 	.word	0x200001e4

080020a4 <getUserIntervalSeries>:

unsigned char getUserIntervalSeries()
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
    return myData.userIntervalSeries;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <getUserIntervalSeries+0x14>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	b2db      	uxtb	r3, r3
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	200001e4 	.word	0x200001e4

080020bc <getUserSelectTapete>:
{
    return myData.userSelectSensorChannel;
}

unsigned char getUserSelectTapete()
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
    return myData.userSelectTapete;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <getUserSelectTapete+0x14>)
 80020c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	200001e4 	.word	0x200001e4

080020d4 <getTimeStruct>:

unsigned char* getTimeStruct()
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
    return insertTime;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <getTimeStruct+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000000 	.word	0x20000000

080020ec <getIntervalSaltosTimeStruct>:

unsigned char* getIntervalSaltosTimeStruct()
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
    return intervalSaltos;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <getIntervalSaltosTimeStruct+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000004 	.word	0x20000004

08002104 <getintervalSeriesTimeStruct>:

unsigned char* getintervalSeriesTimeStruct()
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
    return intervalSeries;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <getintervalSeriesTimeStruct+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008

0800211c <getMassArray>:

unsigned char* getMassArray()
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
    return massArray;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <getMassArray+0x10>)
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	200004e4 	.word	0x200004e4

08002130 <getOverMassArray>:

unsigned char* getOverMassArray()
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    return overMassArray;
 8002134:	4b02      	ldr	r3, [pc, #8]	; (8002140 <getOverMassArray+0x10>)
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	200004ec 	.word	0x200004ec

08002144 <getAltMinArray>:

unsigned char* getAltMinArray()
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
    return altMinArray;
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <getAltMinArray+0x10>)
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	200004f4 	.word	0x200004f4

08002158 <getAltMaxArray>:

unsigned char* getAltMaxArray()
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
    return altMaxArray;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <getAltMaxArray+0x10>)
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	200004f8 	.word	0x200004f8

0800216c <getNumSaltosArray>:

unsigned char* getNumSaltosArray()
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
    return numSaltosArray;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <getNumSaltosArray+0x10>)
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	200004fc 	.word	0x200004fc

08002180 <getTypeJumpArray>:


unsigned char* getTypeJumpArray()
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    return JumpTypeArray;
 8002184:	4b02      	ldr	r3, [pc, #8]	; (8002190 <getTypeJumpArray+0x10>)
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000504 	.word	0x20000504

08002194 <getAltDJArray>:

unsigned char* getAltDJArray()
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
    return altDJArray;
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <getAltDJArray+0x10>)
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	20000500 	.word	0x20000500

080021a8 <getNumSeriesArray>:

unsigned char* getNumSeriesArray()
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
    return numSeriesArray;
 80021ac:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <getNumSeriesArray+0x10>)
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	20000508 	.word	0x20000508

080021bc <getNumTestArray>:

unsigned char* getNumTestArray()
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
    return numTestArray;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <getNumTestArray+0x10>)
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	2000050c 	.word	0x2000050c

080021d0 <getEraseTestArray>:

unsigned char* getEraseTestArray()
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
    return selectEraseArray;
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <getEraseTestArray+0x10>)
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000510 	.word	0x20000510

080021e4 <getUserConfigStruct>:

unsigned char* getUserConfigStruct() //VERIFICAR SE VOU USAR -- por enquanto sim 26/10
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
	return &myData;
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <getUserConfigStruct+0x10>)
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	200001e4 	.word	0x200001e4

080021f8 <getTimeAltMin>:

unsigned int getTimeAltMin()
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	return myData.userAlturaMin;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <getTimeAltMin+0x14>)
 80021fe:	68db      	ldr	r3, [r3, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200001e4 	.word	0x200001e4

08002210 <getTimeAltMax>:

unsigned int getTimeAltMax()
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
	return myData.userAlturaMax;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <getTimeAltMax+0x14>)
 8002216:	691b      	ldr	r3, [r3, #16]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200001e4 	.word	0x200001e4

08002228 <setUserInputConfigData>:


unsigned char setUserInputConfigData(struct dataInsert* dataToInsert) //alterar
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    myData.userTest = dataToInsert->userTest;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <setUserInputConfigData+0xa4>)
 8002236:	701a      	strb	r2, [r3, #0]
    myData.userTime = dataToInsert->userTime;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a23      	ldr	r2, [pc, #140]	; (80022cc <setUserInputConfigData+0xa4>)
 800223e:	6053      	str	r3, [r2, #4]
    myData.userMass = dataToInsert->userMass;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7a1a      	ldrb	r2, [r3, #8]
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <setUserInputConfigData+0xa4>)
 8002246:	721a      	strb	r2, [r3, #8]
    myData.userOverMass = dataToInsert->userOverMass;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7a5a      	ldrb	r2, [r3, #9]
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <setUserInputConfigData+0xa4>)
 800224e:	725a      	strb	r2, [r3, #9]
    myData.userConsultTest = dataToInsert->userConsultTest;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7a9a      	ldrb	r2, [r3, #10]
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <setUserInputConfigData+0xa4>)
 8002256:	729a      	strb	r2, [r3, #10]
    myData.userAlturaMin = dataToInsert->userAlturaMin;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <setUserInputConfigData+0xa4>)
 800225e:	60d3      	str	r3, [r2, #12]
    myData.userAlturaMax = dataToInsert->userAlturaMax;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <setUserInputConfigData+0xa4>)
 8002266:	6113      	str	r3, [r2, #16]
    myData.userNumSaltos = dataToInsert->userNumSaltos;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7d1a      	ldrb	r2, [r3, #20]
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <setUserInputConfigData+0xa4>)
 800226e:	751a      	strb	r2, [r3, #20]
    myData.userIntervalSaltos = dataToInsert->userIntervalSaltos;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a15      	ldr	r2, [pc, #84]	; (80022cc <setUserInputConfigData+0xa4>)
 8002276:	6193      	str	r3, [r2, #24]
    myData.userCMJ = dataToInsert->userCMJ;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7f1a      	ldrb	r2, [r3, #28]
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <setUserInputConfigData+0xa4>)
 800227e:	771a      	strb	r2, [r3, #28]
    myData.userAlturaDJ = dataToInsert->userAlturaDJ;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7f5a      	ldrb	r2, [r3, #29]
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <setUserInputConfigData+0xa4>)
 8002286:	775a      	strb	r2, [r3, #29]
    myData.userNumSeries = dataToInsert->userNumSeries;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7f9a      	ldrb	r2, [r3, #30]
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <setUserInputConfigData+0xa4>)
 800228e:	779a      	strb	r2, [r3, #30]
    myData.userIntervalSeries = dataToInsert->userIntervalSeries;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <setUserInputConfigData+0xa4>)
 8002296:	6213      	str	r3, [r2, #32]
    myData.userCommConfig = dataToInsert->userCommConfig;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <setUserInputConfigData+0xa4>)
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myData.userSelectTapete = dataToInsert->userSelectTapete;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <setUserInputConfigData+0xa4>)
 80022ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myData.userSelectSensorChannel = dataToInsert->userSelectSensorChannel;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <setUserInputConfigData+0xa4>)
 80022b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80022bc:	bf00      	nop
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200001e4 	.word	0x200001e4

080022d0 <getUserResultData>:

unsigned int* getUserResultData(unsigned char numTest)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
    return &myResults[numTest-1];
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	4613      	mov	r3, r2
 80022e0:	015b      	lsls	r3, r3, #5
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <getUserResultData+0x28>)
 80022e8:	4413      	add	r3, r2
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000020c 	.word	0x2000020c

080022fc <getResultTestNumber>:

unsigned char getResultTestNumber()
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
    return numberTest;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <getResultTestNumber+0x14>)
 8002302:	781b      	ldrb	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000511 	.word	0x20000511

08002314 <setResultTestNumber>:
{
     myResults[numTest].thereAreData = TRUE;
}

unsigned char setResultTestNumber()
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
     numberTest++;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <setResultTestNumber+0x1c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <setResultTestNumber+0x1c>)
 8002322:	701a      	strb	r2, [r3, #0]
}
 8002324:	bf00      	nop
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000511 	.word	0x20000511

08002334 <setUserResultData>:

unsigned char setUserResultData(struct results* structDataResult, unsigned char numTest)
{
 8002334:	b4b0      	push	{r4, r5, r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
	unsigned char numSample = structDataResult->resultTestAcquiredSamples;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	73bb      	strb	r3, [r7, #14]
    myResults[numTest].resultTestNum = numTest+1;
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	3301      	adds	r3, #1
 800234c:	b2d8      	uxtb	r0, r3
 800234e:	4955      	ldr	r1, [pc, #340]	; (80024a4 <setUserResultData+0x170>)
 8002350:	4613      	mov	r3, r2
 8002352:	015b      	lsls	r3, r3, #5
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	4602      	mov	r2, r0
 800235c:	701a      	strb	r2, [r3, #0]
    myResults[numTest].resultTestAcquiredSamples = numSample;
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	4950      	ldr	r1, [pc, #320]	; (80024a4 <setUserResultData+0x170>)
 8002362:	4613      	mov	r3, r2
 8002364:	015b      	lsls	r3, r3, #5
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3301      	adds	r3, #1
 800236e:	7bba      	ldrb	r2, [r7, #14]
 8002370:	701a      	strb	r2, [r3, #0]
    myResults[numTest].thereAreData = TRUE;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	494b      	ldr	r1, [pc, #300]	; (80024a4 <setUserResultData+0x170>)
 8002376:	4613      	mov	r3, r2
 8002378:	015b      	lsls	r3, r3, #5
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3302      	adds	r3, #2
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e080      	b.n	800248e <setUserResultData+0x15a>
    {
        myResults[numTest].Measurement[i].sampleNum = structDataResult->Measurement[i].sampleNum;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	78f9      	ldrb	r1, [r7, #3]
 8002390:	7bf8      	ldrb	r0, [r7, #15]
 8002392:	687c      	ldr	r4, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4423      	add	r3, r4
 800239e:	3304      	adds	r3, #4
 80023a0:	781d      	ldrb	r5, [r3, #0]
 80023a2:	4c40      	ldr	r4, [pc, #256]	; (80024a4 <setUserResultData+0x170>)
 80023a4:	4602      	mov	r2, r0
 80023a6:	0052      	lsls	r2, r2, #1
 80023a8:	4402      	add	r2, r0
 80023aa:	00d3      	lsls	r3, r2, #3
 80023ac:	461a      	mov	r2, r3
 80023ae:	460b      	mov	r3, r1
 80023b0:	015b      	lsls	r3, r3, #5
 80023b2:	1a5b      	subs	r3, r3, r1
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	4423      	add	r3, r4
 80023ba:	3304      	adds	r3, #4
 80023bc:	462a      	mov	r2, r5
 80023be:	701a      	strb	r2, [r3, #0]
        myResults[numTest].Measurement[i].alturaSalto = structDataResult->Measurement[i].alturaSalto;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	78f9      	ldrb	r1, [r7, #3]
 80023c4:	7bf8      	ldrb	r0, [r7, #15]
 80023c6:	687c      	ldr	r4, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4423      	add	r3, r4
 80023d2:	3314      	adds	r3, #20
 80023d4:	681c      	ldr	r4, [r3, #0]
 80023d6:	4d33      	ldr	r5, [pc, #204]	; (80024a4 <setUserResultData+0x170>)
 80023d8:	4602      	mov	r2, r0
 80023da:	0052      	lsls	r2, r2, #1
 80023dc:	4402      	add	r2, r0
 80023de:	00d3      	lsls	r3, r2, #3
 80023e0:	461a      	mov	r2, r3
 80023e2:	460b      	mov	r3, r1
 80023e4:	015b      	lsls	r3, r3, #5
 80023e6:	1a5b      	subs	r3, r3, r1
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	442b      	add	r3, r5
 80023ee:	3314      	adds	r3, #20
 80023f0:	601c      	str	r4, [r3, #0]
        myResults[numTest].Measurement[i].potenciaSalto = structDataResult->Measurement[i].potenciaSalto;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	78f9      	ldrb	r1, [r7, #3]
 80023f6:	7bf8      	ldrb	r0, [r7, #15]
 80023f8:	687c      	ldr	r4, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4423      	add	r3, r4
 8002404:	3318      	adds	r3, #24
 8002406:	681c      	ldr	r4, [r3, #0]
 8002408:	4d26      	ldr	r5, [pc, #152]	; (80024a4 <setUserResultData+0x170>)
 800240a:	4602      	mov	r2, r0
 800240c:	0052      	lsls	r2, r2, #1
 800240e:	4402      	add	r2, r0
 8002410:	00d3      	lsls	r3, r2, #3
 8002412:	461a      	mov	r2, r3
 8002414:	460b      	mov	r3, r1
 8002416:	015b      	lsls	r3, r3, #5
 8002418:	1a5b      	subs	r3, r3, r1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	442b      	add	r3, r5
 8002420:	3318      	adds	r3, #24
 8002422:	601c      	str	r4, [r3, #0]
        myResults[numTest].Measurement[i].uiSoloTime = structDataResult->Measurement[i].uiSoloTime;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	78f9      	ldrb	r1, [r7, #3]
 8002428:	7bf8      	ldrb	r0, [r7, #15]
 800242a:	687c      	ldr	r4, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4423      	add	r3, r4
 8002436:	330c      	adds	r3, #12
 8002438:	681c      	ldr	r4, [r3, #0]
 800243a:	4d1a      	ldr	r5, [pc, #104]	; (80024a4 <setUserResultData+0x170>)
 800243c:	4602      	mov	r2, r0
 800243e:	0052      	lsls	r2, r2, #1
 8002440:	4402      	add	r2, r0
 8002442:	00d3      	lsls	r3, r2, #3
 8002444:	461a      	mov	r2, r3
 8002446:	460b      	mov	r3, r1
 8002448:	015b      	lsls	r3, r3, #5
 800244a:	1a5b      	subs	r3, r3, r1
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	442b      	add	r3, r5
 8002452:	330c      	adds	r3, #12
 8002454:	601c      	str	r4, [r3, #0]
        myResults[numTest].Measurement[i].uiVooTime = structDataResult->Measurement[i].uiVooTime;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	78f9      	ldrb	r1, [r7, #3]
 800245a:	7bf8      	ldrb	r0, [r7, #15]
 800245c:	687c      	ldr	r4, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4423      	add	r3, r4
 8002468:	3308      	adds	r3, #8
 800246a:	681c      	ldr	r4, [r3, #0]
 800246c:	4d0d      	ldr	r5, [pc, #52]	; (80024a4 <setUserResultData+0x170>)
 800246e:	4602      	mov	r2, r0
 8002470:	0052      	lsls	r2, r2, #1
 8002472:	4402      	add	r2, r0
 8002474:	00d3      	lsls	r3, r2, #3
 8002476:	461a      	mov	r2, r3
 8002478:	460b      	mov	r3, r1
 800247a:	015b      	lsls	r3, r3, #5
 800247c:	1a5b      	subs	r3, r3, r1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	442b      	add	r3, r5
 8002484:	3308      	adds	r3, #8
 8002486:	601c      	str	r4, [r3, #0]
    for(unsigned char i = 0;i<numSample;i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	7bbb      	ldrb	r3, [r7, #14]
 8002492:	429a      	cmp	r2, r3
 8002494:	f4ff af7a 	bcc.w	800238c <setUserResultData+0x58>
    }
}
 8002498:	bf00      	nop
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bcb0      	pop	{r4, r5, r7}
 80024a2:	4770      	bx	lr
 80024a4:	2000020c 	.word	0x2000020c

080024a8 <resetConfigStruct>:
    }

}

unsigned char resetConfigStruct(struct dataInsert* structToReset)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    structToReset->userTest = 0;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
    structToReset->userAlturaDJ = 0;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	775a      	strb	r2, [r3, #29]
    structToReset->userAlturaMax = 0;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
    structToReset->userAlturaMin = 0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
    structToReset->userCMJ = 0;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	771a      	strb	r2, [r3, #28]
    structToReset->userCommConfig = 0;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    structToReset->userConsultTest = 0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	729a      	strb	r2, [r3, #10]
    structToReset->userIntervalSaltos = 0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
    structToReset->userIntervalSeries = 0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
    structToReset->userMass = 0;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	721a      	strb	r2, [r3, #8]
    structToReset->userNumSaltos = 0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	751a      	strb	r2, [r3, #20]
    structToReset->userNumSeries = 0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	779a      	strb	r2, [r3, #30]
    structToReset->userOverMass = 0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	725a      	strb	r2, [r3, #9]
    structToReset->userSelectSensorChannel = 0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    structToReset->userSelectTapete = 0;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    structToReset->userTime = 0;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]

}
 8002516:	bf00      	nop
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <resetMyResults>:

void resetMyResults()
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
    numberTest = 0;
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <resetMyResults+0xe0>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    for(unsigned char test=0;test<TEST_SIZE;test++)
 8002530:	2300      	movs	r3, #0
 8002532:	71fb      	strb	r3, [r7, #7]
 8002534:	e05b      	b.n	80025ee <resetMyResults+0xca>
    {
        myResults[test].resultTestNum = 0;
 8002536:	79fa      	ldrb	r2, [r7, #7]
 8002538:	4933      	ldr	r1, [pc, #204]	; (8002608 <resetMyResults+0xe4>)
 800253a:	4613      	mov	r3, r2
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
        myResults[test].resultTestAcquiredSamples = 0;
 8002548:	79fa      	ldrb	r2, [r7, #7]
 800254a:	492f      	ldr	r1, [pc, #188]	; (8002608 <resetMyResults+0xe4>)
 800254c:	4613      	mov	r3, r2
 800254e:	015b      	lsls	r3, r3, #5
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3301      	adds	r3, #1
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
        myResults[test].thereAreData = FALSE;
 800255c:	79fa      	ldrb	r2, [r7, #7]
 800255e:	492a      	ldr	r1, [pc, #168]	; (8002608 <resetMyResults+0xe4>)
 8002560:	4613      	mov	r3, r2
 8002562:	015b      	lsls	r3, r3, #5
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3302      	adds	r3, #2
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 8002570:	2300      	movs	r3, #0
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	e035      	b.n	80025e2 <resetMyResults+0xbe>
        {
            myResults[test].Measurement[sample].sampleNum = 0;
 8002576:	79f9      	ldrb	r1, [r7, #7]
 8002578:	4823      	ldr	r0, [pc, #140]	; (8002608 <resetMyResults+0xe4>)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	0052      	lsls	r2, r2, #1
 8002580:	441a      	add	r2, r3
 8002582:	00d3      	lsls	r3, r2, #3
 8002584:	461a      	mov	r2, r3
 8002586:	460b      	mov	r3, r1
 8002588:	015b      	lsls	r3, r3, #5
 800258a:	1a5b      	subs	r3, r3, r1
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	4403      	add	r3, r0
 8002592:	3304      	adds	r3, #4
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
            myResults[test].Measurement[sample].alturaSalto = 0;
 8002598:	79f9      	ldrb	r1, [r7, #7]
 800259a:	481b      	ldr	r0, [pc, #108]	; (8002608 <resetMyResults+0xe4>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	0052      	lsls	r2, r2, #1
 80025a2:	441a      	add	r2, r3
 80025a4:	00d3      	lsls	r3, r2, #3
 80025a6:	461a      	mov	r2, r3
 80025a8:	460b      	mov	r3, r1
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	1a5b      	subs	r3, r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	4403      	add	r3, r0
 80025b4:	3314      	adds	r3, #20
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
            myResults[test].Measurement[sample].uiSoloTime = 0;
 80025ba:	79f9      	ldrb	r1, [r7, #7]
 80025bc:	4812      	ldr	r0, [pc, #72]	; (8002608 <resetMyResults+0xe4>)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	0052      	lsls	r2, r2, #1
 80025c4:	441a      	add	r2, r3
 80025c6:	00d3      	lsls	r3, r2, #3
 80025c8:	461a      	mov	r2, r3
 80025ca:	460b      	mov	r3, r1
 80025cc:	015b      	lsls	r3, r3, #5
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	4403      	add	r3, r0
 80025d6:	330c      	adds	r3, #12
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
        for(unsigned sample=0;sample<MEASUREMENT_SIZE;sample++)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d9c6      	bls.n	8002576 <resetMyResults+0x52>
    for(unsigned char test=0;test<TEST_SIZE;test++)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	3301      	adds	r3, #1
 80025ec:	71fb      	strb	r3, [r7, #7]
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d9a0      	bls.n	8002536 <resetMyResults+0x12>
        }

    }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000511 	.word	0x20000511
 8002608:	2000020c 	.word	0x2000020c

0800260c <indexColumn>:
        *index = 0;
    }
}

unsigned char indexColumn(short* currentColumn, unsigned char size)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
    *currentColumn = *currentColumn -1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29b      	uxth	r3, r3
 8002624:	b21a      	sxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	801a      	strh	r2, [r3, #0]
    if(*currentColumn == 5) *currentColumn = *currentColumn -1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d109      	bne.n	8002648 <indexColumn+0x3c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	b21a      	sxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e00d      	b.n	8002664 <indexColumn+0x58>
    else if(*currentColumn == 2) *currentColumn = *currentColumn -1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d108      	bne.n	8002664 <indexColumn+0x58>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29b      	uxth	r3, r3
 800265e:	b21a      	sxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	801a      	strh	r2, [r3, #0]
    if(*currentColumn <0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266a:	2b00      	cmp	r3, #0
 800266c:	da03      	bge.n	8002676 <indexColumn+0x6a>
    {
        *currentColumn = size;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	b21a      	sxth	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	801a      	strh	r2, [r3, #0]
    }
}
 8002676:	bf00      	nop
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <milisecondsTime>:

unsigned long milisecondsTime(unsigned char* ptr_inputTime)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	struct tm* time = ptr_inputTime;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60fb      	str	r3, [r7, #12]
	unsigned long int msTime = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]

	msTime = time->tm_hour*3600;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_min*60;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4413      	add	r3, r2
 80026b4:	60bb      	str	r3, [r7, #8]
	msTime += time->tm_sec;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4413      	add	r3, r2
 80026c0:	60bb      	str	r3, [r7, #8]
	msTime = msTime*1000;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	60bb      	str	r3, [r7, #8]

	return msTime;
 80026ce:	68bb      	ldr	r3, [r7, #8]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <stringToInt>:
    //fazer a convers�o de hhmmss para ms
    return intTime;
}

unsigned int stringToInt(unsigned char* string)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    char *ptr;
    unsigned int x = strtol(string,&ptr,10);
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	220a      	movs	r2, #10
 80026ea:	4619      	mov	r1, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f00c f94d 	bl	800e98c <strtol>
 80026f2:	4603      	mov	r3, r0
 80026f4:	60fb      	str	r3, [r7, #12]
    return x;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <stringLenght>:
    float x = strtof(string,NULL);
    return x;
}

unsigned char stringLenght(unsigned char* str)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    unsigned char strLen = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
    for(unsigned i = 0; str[i] != '\0';i++)
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	e005      	b.n	800271e <stringLenght+0x1e>
        strLen++;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3301      	adds	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
    for(unsigned i = 0; str[i] != '\0';i++)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3301      	adds	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f3      	bne.n	8002712 <stringLenght+0x12>
    return strLen;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <indexMass>:

unsigned char indexMass(short* index)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    *index = *index -1;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29b      	uxth	r3, r3
 800274c:	b21a      	sxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	801a      	strh	r2, [r3, #0]
    if(*index == 3) *index = *index -1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d108      	bne.n	800276e <indexMass+0x36>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21a      	sxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da02      	bge.n	800277e <indexMass+0x46>
    {
        *index = 4;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2204      	movs	r2, #4
 800277c:	801a      	strh	r2, [r3, #0]
    }
}
 800277e:	bf00      	nop
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <indexChange>:

unsigned char indexChange(short* index, unsigned char size)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
    *index = *index - 1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	801a      	strh	r2, [r3, #0]
    if(*index<0)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	da03      	bge.n	80027bc <indexChange+0x30>
    {
        *index = size;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	801a      	strh	r2, [r3, #0]
    }
}
 80027bc:	bf00      	nop
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <getAltMinString>:

unsigned char* getAltMinString()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af02      	add	r7, sp, #8
    unsigned char* altMinArray = getAltMinArray();
 80027d2:	f7ff fcb7 	bl	8002144 <getAltMinArray>
 80027d6:	6078      	str	r0, [r7, #4]
    sprintf(altMinString,"%d%d%d cm",altMinArray[0],altMinArray[1],altMinArray[2]);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3301      	adds	r3, #1
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3302      	adds	r3, #2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	460b      	mov	r3, r1
 80027f0:	4904      	ldr	r1, [pc, #16]	; (8002804 <getAltMinString+0x38>)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <getAltMinString+0x3c>)
 80027f4:	f00b faea 	bl	800ddcc <siprintf>
    return altMinString;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <getAltMinString+0x3c>)
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	08010080 	.word	0x08010080
 8002808:	2000052c 	.word	0x2000052c

0800280c <getAltMaxString>:

unsigned char* getAltMaxString()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af02      	add	r7, sp, #8
    unsigned char* altMaxArray = getAltMaxArray();
 8002812:	f7ff fca1 	bl	8002158 <getAltMaxArray>
 8002816:	6078      	str	r0, [r7, #4]
    sprintf(altMaxString,"%d%d%d cm",altMaxArray[0],altMaxArray[1],altMaxArray[2]);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3301      	adds	r3, #1
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3302      	adds	r3, #2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	460b      	mov	r3, r1
 8002830:	4904      	ldr	r1, [pc, #16]	; (8002844 <getAltMaxString+0x38>)
 8002832:	4805      	ldr	r0, [pc, #20]	; (8002848 <getAltMaxString+0x3c>)
 8002834:	f00b faca 	bl	800ddcc <siprintf>
    return altMaxString;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <getAltMaxString+0x3c>)
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	08010080 	.word	0x08010080
 8002848:	20000538 	.word	0x20000538

0800284c <getNumSaltosString>:

unsigned char* getNumSaltosString()
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af02      	add	r7, sp, #8
    unsigned char* numSaltosArray = getNumSaltosArray();
 8002852:	f7ff fc8b 	bl	800216c <getNumSaltosArray>
 8002856:	6078      	str	r0, [r7, #4]
    sprintf(numSaltosString,"%d%d%d",numSaltosArray[0],numSaltosArray[1],numSaltosArray[2]);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3301      	adds	r3, #1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3302      	adds	r3, #2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	460b      	mov	r3, r1
 8002870:	4904      	ldr	r1, [pc, #16]	; (8002884 <getNumSaltosString+0x38>)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <getNumSaltosString+0x3c>)
 8002874:	f00b faaa 	bl	800ddcc <siprintf>
    return numSaltosString;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <getNumSaltosString+0x3c>)
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	0801008c 	.word	0x0801008c
 8002888:	20000544 	.word	0x20000544

0800288c <getTypeJumpString>:

unsigned char* getTypeJumpString()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002892:	f7ff fc75 	bl	8002180 <getTypeJumpArray>
 8002896:	6078      	str	r0, [r7, #4]
    sprintf(tipoSaltoString,"%d",typeJumpArray[0]);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <getTypeJumpString+0x24>)
 80028a0:	4804      	ldr	r0, [pc, #16]	; (80028b4 <getTypeJumpString+0x28>)
 80028a2:	f00b fa93 	bl	800ddcc <siprintf>
    return tipoSaltoString;
 80028a6:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <getTypeJumpString+0x28>)
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	08010094 	.word	0x08010094
 80028b4:	20000550 	.word	0x20000550

080028b8 <getAltDJString>:

unsigned char* getAltDJString()
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
    unsigned char* altDJArray = getAltDJArray();
 80028be:	f7ff fc69 	bl	8002194 <getAltDJArray>
 80028c2:	6078      	str	r0, [r7, #4]
    sprintf(altDJString,"%d%d% cm",altDJArray[0],altDJArray[1]);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3301      	adds	r3, #1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4904      	ldr	r1, [pc, #16]	; (80028e4 <getAltDJString+0x2c>)
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <getAltDJString+0x30>)
 80028d4:	f00b fa7a 	bl	800ddcc <siprintf>
    return altDJString;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <getAltDJString+0x30>)
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	08010098 	.word	0x08010098
 80028e8:	2000055c 	.word	0x2000055c

080028ec <getNumSeriesString>:

unsigned char* getNumSeriesString()
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af02      	add	r7, sp, #8
    unsigned char* numSeriesArray = getNumSeriesArray();
 80028f2:	f7ff fc59 	bl	80021a8 <getNumSeriesArray>
 80028f6:	6078      	str	r0, [r7, #4]
    sprintf(numSeriesString,"%d%d%d",numSeriesArray[0],numSeriesArray[1],numSeriesArray[2]);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3301      	adds	r3, #1
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3302      	adds	r3, #2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	460b      	mov	r3, r1
 8002910:	4904      	ldr	r1, [pc, #16]	; (8002924 <getNumSeriesString+0x38>)
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <getNumSeriesString+0x3c>)
 8002914:	f00b fa5a 	bl	800ddcc <siprintf>
    return numSeriesString;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <getNumSeriesString+0x3c>)
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	0801008c 	.word	0x0801008c
 8002928:	20000568 	.word	0x20000568

0800292c <getMassString>:
    sprintf(interSeriesString,"%d%d%d",intervalSeriesArray[0],intervalSeriesArray[1],intervalSeriesArray[2]);
    return interSeriesString;
}

unsigned char* getMassString()
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af02      	add	r7, sp, #8
    unsigned char* massArray = getMassArray();
 8002932:	f7ff fbf3 	bl	800211c <getMassArray>
 8002936:	6078      	str	r0, [r7, #4]
    sprintf(massString,"%d%d%d.%d kg",massArray[0],massArray[1],massArray[2],massArray[4]);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3301      	adds	r3, #1
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3302      	adds	r3, #2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	9200      	str	r2, [sp, #0]
 8002958:	4603      	mov	r3, r0
 800295a:	460a      	mov	r2, r1
 800295c:	4904      	ldr	r1, [pc, #16]	; (8002970 <getMassString+0x44>)
 800295e:	4805      	ldr	r0, [pc, #20]	; (8002974 <getMassString+0x48>)
 8002960:	f00b fa34 	bl	800ddcc <siprintf>
    //massArray[3] ficou representando o "." no display
    return massString;
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <getMassString+0x48>)
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	080100a4 	.word	0x080100a4
 8002974:	20000514 	.word	0x20000514

08002978 <getOverMassString>:

unsigned char* getOverMassString()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af02      	add	r7, sp, #8
    unsigned char* overMassArray = getOverMassArray();
 800297e:	f7ff fbd7 	bl	8002130 <getOverMassArray>
 8002982:	6078      	str	r0, [r7, #4]
    sprintf(overMassString,"%d%d%d.%d kg",overMassArray[0],overMassArray[1],overMassArray[2],overMassArray[4]);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3301      	adds	r3, #1
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3302      	adds	r3, #2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	9200      	str	r2, [sp, #0]
 80029a4:	4603      	mov	r3, r0
 80029a6:	460a      	mov	r2, r1
 80029a8:	4904      	ldr	r1, [pc, #16]	; (80029bc <getOverMassString+0x44>)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <getOverMassString+0x48>)
 80029ac:	f00b fa0e 	bl	800ddcc <siprintf>
    return overMassString;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <getOverMassString+0x48>)
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	080100a4 	.word	0x080100a4
 80029c0:	20000520 	.word	0x20000520

080029c4 <getNumTestString>:

unsigned char* getNumTestString()
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af02      	add	r7, sp, #8
    unsigned char* numTestArray = getNumTestArray();
 80029ca:	f7ff fbf7 	bl	80021bc <getNumTestArray>
 80029ce:	6078      	str	r0, [r7, #4]
    sprintf(numTestString,"%d%d%d",numTestArray[0],numTestArray[1],numTestArray[2]);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3301      	adds	r3, #1
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3302      	adds	r3, #2
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	460b      	mov	r3, r1
 80029e8:	4904      	ldr	r1, [pc, #16]	; (80029fc <getNumTestString+0x38>)
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <getNumTestString+0x3c>)
 80029ec:	f00b f9ee 	bl	800ddcc <siprintf>
    return numTestString;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <getNumTestString+0x3c>)
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	0801008c 	.word	0x0801008c
 8002a00:	20000574 	.word	0x20000574

08002a04 <getEraseTestString>:

unsigned char* getEraseTestString()
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
    unsigned char* eraseTestArray = getEraseTestArray();
 8002a0a:	f7ff fbe1 	bl	80021d0 <getEraseTestArray>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	607b      	str	r3, [r7, #4]
    sprintf(eraseTestString,"(%d)",eraseTestArray[0]);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4904      	ldr	r1, [pc, #16]	; (8002a2c <getEraseTestString+0x28>)
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <getEraseTestString+0x2c>)
 8002a1c:	f00b f9d6 	bl	800ddcc <siprintf>
    return eraseTestString;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <getEraseTestString+0x2c>)
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	080100b4 	.word	0x080100b4
 8002a30:	20000580 	.word	0x20000580

08002a34 <param_1_toString>:
	static unsigned char saveResultString[50];
	return saveResultString;
}

unsigned int* param_1_toString(unsigned int* string)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%d",*string);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4904      	ldr	r1, [pc, #16]	; (8002a54 <param_1_toString+0x20>)
 8002a44:	4804      	ldr	r0, [pc, #16]	; (8002a58 <param_1_toString+0x24>)
 8002a46:	f00b f9c1 	bl	800ddcc <siprintf>
    return result;
 8002a4a:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <param_1_toString+0x24>)
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	08010094 	.word	0x08010094
 8002a58:	2000058c 	.word	0x2000058c

08002a5c <param_2_toString>:

unsigned int* param_2_toString(unsigned int* string)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    static unsigned int result[TEST_SIZE];
    sprintf(result,"%dms",*string);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <param_2_toString+0x20>)
 8002a6c:	4804      	ldr	r0, [pc, #16]	; (8002a80 <param_2_toString+0x24>)
 8002a6e:	f00b f9ad 	bl	800ddcc <siprintf>
    return result;
 8002a72:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <param_2_toString+0x24>)
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	080100bc 	.word	0x080100bc
 8002a80:	200005a0 	.word	0x200005a0

08002a84 <setUserAltMin>:
    sprintf(result,"%c",*string);
    return result;
}

unsigned char setUserAltMin(unsigned char* idx)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
    unsigned char* altMinArray = getAltMinArray();
 8002a8c:	f7ff fb5a 	bl	8002144 <getAltMinArray>
 8002a90:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	72fb      	strb	r3, [r7, #11]
    altMinArray[index] = altMinArray[index]+1;
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	68f9      	ldr	r1, [r7, #12]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3201      	adds	r2, #1
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]
    if(altMinArray[index]>9) altMinArray[index]= 0;
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d904      	bls.n	8002ac2 <setUserAltMin+0x3e>
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <setUserErase>:

unsigned char setUserErase(unsigned int* idx)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    unsigned char* eraseArray = getEraseTestArray();
 8002ad4:	f7ff fb7c 	bl	80021d0 <getEraseTestArray>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60fb      	str	r3, [r7, #12]
    unsigned int index = *idx;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60bb      	str	r3, [r7, #8]
    eraseArray[index] = eraseArray[index]+1;
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	440b      	add	r3, r1
 8002af0:	3201      	adds	r2, #1
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
    if(eraseArray[index]>9) eraseArray[index]= 0;
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4413      	add	r3, r2
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	d904      	bls.n	8002b0c <setUserErase+0x40>
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4413      	add	r3, r2
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <setUserAltMax>:

unsigned char setUserAltMax(unsigned char* idx)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
    unsigned char* altMaxArray = getAltMaxArray();
 8002b1e:	f7ff fb1b 	bl	8002158 <getAltMaxArray>
 8002b22:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	72fb      	strb	r3, [r7, #11]
    altMaxArray[index] = altMaxArray[index]+1;
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	68f9      	ldr	r1, [r7, #12]
 8002b36:	440b      	add	r3, r1
 8002b38:	3201      	adds	r2, #1
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
    if(altMaxArray[index]>9) altMaxArray[index]= 0;
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b09      	cmp	r3, #9
 8002b48:	d904      	bls.n	8002b54 <setUserAltMax+0x3e>
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
}
 8002b54:	bf00      	nop
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <setUserNumSaltos>:

unsigned char setUserNumSaltos(unsigned char* idx)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
    unsigned char* numSaltosArray = getNumSaltosArray();
 8002b66:	f7ff fb01 	bl	800216c <getNumSaltosArray>
 8002b6a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	72fb      	strb	r3, [r7, #11]
    numSaltosArray[index] = numSaltosArray[index]+1;
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	68f9      	ldr	r1, [r7, #12]
 8002b7e:	440b      	add	r3, r1
 8002b80:	3201      	adds	r2, #1
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]
    if(numSaltosArray[index]>9) numSaltosArray[index]= 0;
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	d904      	bls.n	8002b9c <setUserNumSaltos+0x3e>
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <setUserTypeJump>:

unsigned char setUserTypeJump(unsigned char* idx)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
    unsigned char* typeJumpArray = getTypeJumpArray();
 8002bae:	f7ff fae7 	bl	8002180 <getTypeJumpArray>
 8002bb2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	72fb      	strb	r3, [r7, #11]
    typeJumpArray[index] = typeJumpArray[index]+1;
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3201      	adds	r2, #1
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
    if(typeJumpArray[index]>3) typeJumpArray[index]= 0;
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d904      	bls.n	8002be4 <setUserTypeJump+0x3e>
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <setUserAltDJ>:

unsigned char setUserAltDJ(unsigned char* idx)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
    unsigned char* AltDJArray = getAltDJArray();
 8002bf6:	f7ff facd 	bl	8002194 <getAltDJArray>
 8002bfa:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	72fb      	strb	r3, [r7, #11]
    AltDJArray[index] = AltDJArray[index]+1;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	7afb      	ldrb	r3, [r7, #11]
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	440b      	add	r3, r1
 8002c10:	3201      	adds	r2, #1
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]
    if(AltDJArray[index]>9) AltDJArray[index]= 0;
 8002c16:	7afb      	ldrb	r3, [r7, #11]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	d904      	bls.n	8002c2c <setUserAltDJ+0x3e>
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <setUserNumSeries>:

unsigned char setUserNumSeries(unsigned char* idx)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
    unsigned char* numSeriesArray = getNumSeriesArray();
 8002c3e:	f7ff fab3 	bl	80021a8 <getNumSeriesArray>
 8002c42:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	72fb      	strb	r3, [r7, #11]
    numSeriesArray[index] = numSeriesArray[index]+1;
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	68f9      	ldr	r1, [r7, #12]
 8002c56:	440b      	add	r3, r1
 8002c58:	3201      	adds	r2, #1
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
    if(numSeriesArray[index]>9) numSeriesArray[index]= 0;
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b09      	cmp	r3, #9
 8002c68:	d904      	bls.n	8002c74 <setUserNumSeries+0x3e>
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <setUserMass>:
    IntervalSeriesArray[index] = IntervalSeriesArray[index]+1;
    if(IntervalSeriesArray[index]>9) IntervalSeriesArray[index]= 0;
}

unsigned char setUserMass(unsigned char* idx)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
    unsigned char* massArray = getMassArray();
 8002c86:	f7ff fa49 	bl	800211c <getMassArray>
 8002c8a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	72fb      	strb	r3, [r7, #11]
    massArray[index] = massArray[index]+1;
 8002c92:	7afb      	ldrb	r3, [r7, #11]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3201      	adds	r2, #1
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
    if(massArray[index]>9) massArray[index]= 0;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b09      	cmp	r3, #9
 8002cb0:	d904      	bls.n	8002cbc <setUserMass+0x3e>
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <setUserOverMass>:

unsigned char setUserOverMass(unsigned char* idx)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
    unsigned char* overMassArray = getOverMassArray();
 8002cce:	f7ff fa2f 	bl	8002130 <getOverMassArray>
 8002cd2:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	72fb      	strb	r3, [r7, #11]
    overMassArray[index] = overMassArray[index]+1;
 8002cda:	7afb      	ldrb	r3, [r7, #11]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3201      	adds	r2, #1
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
    if(overMassArray[index]>9) overMassArray[index]= 0;
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b09      	cmp	r3, #9
 8002cf8:	d904      	bls.n	8002d04 <setUserOverMass+0x3e>
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
}
 8002d04:	bf00      	nop
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <setUserNumTest>:

unsigned char setUserNumTest(unsigned char* idx)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
    unsigned char* numTestArray = getNumTestArray();
 8002d16:	f7ff fa51 	bl	80021bc <getNumTestArray>
 8002d1a:	60f8      	str	r0, [r7, #12]
    unsigned char index = *idx;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	72fb      	strb	r3, [r7, #11]
    numTestArray[index] = numTestArray[index]+1;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	440b      	add	r3, r1
 8002d30:	3201      	adds	r2, #1
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]
    if(numTestArray[index]>9) numTestArray[index]= 0;
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d904      	bls.n	8002d4c <setUserNumTest+0x3e>
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <setUserIntervalSaltosTime>:

void setUserIntervalSaltosTime(unsigned char* configInputTimer)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	3303      	adds	r3, #3
 8002d66:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getIntervalSaltosTimeStruct();
 8002d68:	f7ff f9c0 	bl	80020ec <getIntervalSaltosTimeStruct>
 8002d6c:	60b8      	str	r0, [r7, #8]

	switch(index)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d849      	bhi.n	8002e0a <setUserIntervalSaltosTime+0xb2>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <setUserIntervalSaltosTime+0x24>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002d91 	.word	0x08002d91
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08002e0b 	.word	0x08002e0b
 8002d88:	08002dc7 	.word	0x08002dc7
 8002d8c:	08002de3 	.word	0x08002de3
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f103 020a 	add.w	r2, r3, #10
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b3c      	cmp	r3, #60	; 0x3c
 8002da2:	dd2b      	ble.n	8002dfc <setUserIntervalSaltosTime+0xa4>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	605a      	str	r2, [r3, #4]
		break;
 8002daa:	e027      	b.n	8002dfc <setUserIntervalSaltosTime+0xa4>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b3c      	cmp	r3, #60	; 0x3c
 8002dbc:	dd20      	ble.n	8002e00 <setUserIntervalSaltosTime+0xa8>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	605a      	str	r2, [r3, #4]
		break;
 8002dc4:	e01c      	b.n	8002e00 <setUserIntervalSaltosTime+0xa8>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f103 020a 	add.w	r2, r3, #10
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b3c      	cmp	r3, #60	; 0x3c
 8002dd8:	dd14      	ble.n	8002e04 <setUserIntervalSaltosTime+0xac>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

		break;
 8002de0:	e010      	b.n	8002e04 <setUserIntervalSaltosTime+0xac>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b3c      	cmp	r3, #60	; 0x3c
 8002df2:	dd09      	ble.n	8002e08 <setUserIntervalSaltosTime+0xb0>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
		break;
 8002dfa:	e005      	b.n	8002e08 <setUserIntervalSaltosTime+0xb0>
		break;
 8002dfc:	bf00      	nop
 8002dfe:	e004      	b.n	8002e0a <setUserIntervalSaltosTime+0xb2>
		break;
 8002e00:	bf00      	nop
 8002e02:	e002      	b.n	8002e0a <setUserIntervalSaltosTime+0xb2>
		break;
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <setUserIntervalSaltosTime+0xb2>
		break;
 8002e08:	bf00      	nop
	}

}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop

08002e14 <setUserIntervalSeriesTime>:

void setUserIntervalSeriesTime(unsigned char* configInputTimer)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	unsigned char index = *configInputTimer + 3;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	3303      	adds	r3, #3
 8002e22:	73fb      	strb	r3, [r7, #15]
	struct tm* insertTime = getintervalSeriesTimeStruct();
 8002e24:	f7ff f96e 	bl	8002104 <getintervalSeriesTimeStruct>
 8002e28:	60b8      	str	r0, [r7, #8]

	switch(index)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	3b03      	subs	r3, #3
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d849      	bhi.n	8002ec6 <setUserIntervalSeriesTime+0xb2>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <setUserIntervalSeriesTime+0x24>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e4d 	.word	0x08002e4d
 8002e3c:	08002e69 	.word	0x08002e69
 8002e40:	08002ec7 	.word	0x08002ec7
 8002e44:	08002e83 	.word	0x08002e83
 8002e48:	08002e9f 	.word	0x08002e9f
	{
		case DEZENA_M:
			insertTime->tm_min = insertTime->tm_min+10;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f103 020a 	add.w	r2, r3, #10
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b3c      	cmp	r3, #60	; 0x3c
 8002e5e:	dd2b      	ble.n	8002eb8 <setUserIntervalSeriesTime+0xa4>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	605a      	str	r2, [r3, #4]
		break;
 8002e66:	e027      	b.n	8002eb8 <setUserIntervalSeriesTime+0xa4>

		case UNIDADE_M:
			insertTime->tm_min = insertTime->tm_min+1;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	605a      	str	r2, [r3, #4]
			if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b3c      	cmp	r3, #60	; 0x3c
 8002e78:	dd20      	ble.n	8002ebc <setUserIntervalSeriesTime+0xa8>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	605a      	str	r2, [r3, #4]
		break;
 8002e80:	e01c      	b.n	8002ebc <setUserIntervalSeriesTime+0xa8>

		case DEZENA_S:
			insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f103 020a 	add.w	r2, r3, #10
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b3c      	cmp	r3, #60	; 0x3c
 8002e94:	dd14      	ble.n	8002ec0 <setUserIntervalSeriesTime+0xac>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

		break;
 8002e9c:	e010      	b.n	8002ec0 <setUserIntervalSeriesTime+0xac>

		case UNIDADE_S:
			insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	601a      	str	r2, [r3, #0]
			if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b3c      	cmp	r3, #60	; 0x3c
 8002eae:	dd09      	ble.n	8002ec4 <setUserIntervalSeriesTime+0xb0>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
		break;
 8002eb6:	e005      	b.n	8002ec4 <setUserIntervalSeriesTime+0xb0>
		break;
 8002eb8:	bf00      	nop
 8002eba:	e004      	b.n	8002ec6 <setUserIntervalSeriesTime+0xb2>
		break;
 8002ebc:	bf00      	nop
 8002ebe:	e002      	b.n	8002ec6 <setUserIntervalSeriesTime+0xb2>
		break;
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <setUserIntervalSeriesTime+0xb2>
		break;
 8002ec4:	bf00      	nop
	}

}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop

08002ed0 <setUserTime>:

void setUserTime(unsigned char* inputUserTimer)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    unsigned char index = *inputUserTimer;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	73fb      	strb	r3, [r7, #15]
    struct tm* insertTime = getTimeStruct();
 8002ede:	f7ff f8f9 	bl	80020d4 <getTimeStruct>
 8002ee2:	60b8      	str	r0, [r7, #8]
//    static unsigned char timeString[9];

    switch(index)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	d86e      	bhi.n	8002fc8 <setUserTime+0xf8>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <setUserTime+0x20>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f11 	.word	0x08002f11
 8002ef4:	08002f2d 	.word	0x08002f2d
 8002ef8:	08002fc9 	.word	0x08002fc9
 8002efc:	08002f47 	.word	0x08002f47
 8002f00:	08002f63 	.word	0x08002f63
 8002f04:	08002fc9 	.word	0x08002fc9
 8002f08:	08002f7d 	.word	0x08002f7d
 8002f0c:	08002f99 	.word	0x08002f99
    {
        case DEZENA_H:
            insertTime->tm_hour = insertTime->tm_hour+10;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f103 020a 	add.w	r2, r3, #10
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b17      	cmp	r3, #23
 8002f22:	dd46      	ble.n	8002fb2 <setUserTime+0xe2>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002f2a:	e042      	b.n	8002fb2 <setUserTime+0xe2>

        case UNIDADE_H:
            insertTime->tm_hour = insertTime->tm_hour+1;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
            if(insertTime->tm_hour>23) insertTime->tm_hour = 0;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b17      	cmp	r3, #23
 8002f3c:	dd3b      	ble.n	8002fb6 <setUserTime+0xe6>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002f44:	e037      	b.n	8002fb6 <setUserTime+0xe6>

        case DEZENA_M:
            insertTime->tm_min = insertTime->tm_min+10;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f103 020a 	add.w	r2, r3, #10
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b3c      	cmp	r3, #60	; 0x3c
 8002f58:	dd2f      	ble.n	8002fba <setUserTime+0xea>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	605a      	str	r2, [r3, #4]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002f60:	e02b      	b.n	8002fba <setUserTime+0xea>

        case UNIDADE_M:
        	insertTime->tm_min = insertTime->tm_min+1;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	605a      	str	r2, [r3, #4]
            if(insertTime->tm_min>60) insertTime->tm_min = 0;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b3c      	cmp	r3, #60	; 0x3c
 8002f72:	dd24      	ble.n	8002fbe <setUserTime+0xee>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	605a      	str	r2, [r3, #4]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002f7a:	e020      	b.n	8002fbe <setUserTime+0xee>

        case DEZENA_S:
            insertTime->tm_sec =insertTime->tm_sec+10 ;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f103 020a 	add.w	r2, r3, #10
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b3c      	cmp	r3, #60	; 0x3c
 8002f8e:	dd18      	ble.n	8002fc2 <setUserTime+0xf2>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002f96:	e014      	b.n	8002fc2 <setUserTime+0xf2>

        case UNIDADE_S:
            insertTime->tm_sec =insertTime->tm_sec+1 ;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	601a      	str	r2, [r3, #0]
            if(insertTime->tm_sec>60) insertTime->tm_sec = 0;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b3c      	cmp	r3, #60	; 0x3c
 8002fa8:	dd0d      	ble.n	8002fc6 <setUserTime+0xf6>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
//            strftime(timeString, sizeof(timeString), "%H:%M:%S", insertTime);
        break;
 8002fb0:	e009      	b.n	8002fc6 <setUserTime+0xf6>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e008      	b.n	8002fc8 <setUserTime+0xf8>
        break;
 8002fb6:	bf00      	nop
 8002fb8:	e006      	b.n	8002fc8 <setUserTime+0xf8>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e004      	b.n	8002fc8 <setUserTime+0xf8>
        break;
 8002fbe:	bf00      	nop
 8002fc0:	e002      	b.n	8002fc8 <setUserTime+0xf8>
        break;
 8002fc2:	bf00      	nop
 8002fc4:	e000      	b.n	8002fc8 <setUserTime+0xf8>
        break;
 8002fc6:	bf00      	nop
    }
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <alturaToTempo>:

unsigned int alturaToTempo(unsigned int altura)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	float aux1 = 0;
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
	int tempo = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
	float nominator = 8 * altura;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fee:	edc7 7a03 	vstr	s15, [r7, #12]
	float relation =  nominator/G_CONSTANT;
 8002ff2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ff6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003044 <alturaToTempo+0x74>
 8002ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ffe:	edc7 7a02 	vstr	s15, [r7, #8]
	aux1 = sqrt(relation);
 8003002:	68b8      	ldr	r0, [r7, #8]
 8003004:	f7fd fab8 	bl	8000578 <__aeabi_f2d>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	ec43 2b10 	vmov	d0, r2, r3
 8003010:	f00c ff44 	bl	800fe9c <sqrt>
 8003014:	ec53 2b10 	vmov	r2, r3, d0
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fdb4 	bl	8000b88 <__aeabi_d2f>
 8003020:	4603      	mov	r3, r0
 8003022:	617b      	str	r3, [r7, #20]
	tempo = aux1*1000;
 8003024:	edd7 7a05 	vldr	s15, [r7, #20]
 8003028:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003048 <alturaToTempo+0x78>
 800302c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003034:	ee17 3a90 	vmov	r3, s15
 8003038:	613b      	str	r3, [r7, #16]
	return tempo;
 800303a:	693b      	ldr	r3, [r7, #16]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	44754000 	.word	0x44754000
 8003048:	447a0000 	.word	0x447a0000

0800304c <updateUserMsg>:
#include "time.h"
#include "stdlib.h"


unsigned char updateUserMsg(unsigned char col, unsigned char linha, unsigned char *userMessage, unsigned char* status)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60ba      	str	r2, [r7, #8]
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	4603      	mov	r3, r0
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	460b      	mov	r3, r1
 800305c:	73bb      	strb	r3, [r7, #14]
	if(*status == IDDLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <updateUserMsg+0x2c>
	{
	    HW_PRINT_DATA(col,linha,userMessage);
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	7bb9      	ldrb	r1, [r7, #14]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 ff51 	bl	8003f14 <HW_PRINT_DATA>
		*status = PRINTED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
	}
}
 8003078:	bf00      	nop
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <readyUserInterface>:

//unsigned char readyUserInterface(unsigned char* displayStatus,unsigned char* cursorPosition)
unsigned char readyUserInterface(unsigned char* displayStatus)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
	statusUserInterface(displayStatus);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f809 	bl	80030a2 <statusUserInterface>
	resetKeyPressed();
 8003090:	f002 fc32 	bl	80058f8 <resetKeyPressed>
//	resetCursorInterface(cursorPosition);
	eraseDataDisplay();
 8003094:	f000 fef6 	bl	8003e84 <eraseDataDisplay>
}
 8003098:	bf00      	nop
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <statusUserInterface>:

unsigned char statusUserInterface(unsigned char* displayStatus)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
	*displayStatus = IDDLE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <exportStateMachine>:
        struct dataInsert menuInsert;
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW
unsigned char exportStateMachine(struct Menu* subMenu)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuExport = subMenu;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	617b      	str	r3, [r7, #20]
    unsigned char key = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	77fb      	strb	r3, [r7, #31]
    short index = 2;
 80030d0:	2302      	movs	r3, #2
 80030d2:	817b      	strh	r3, [r7, #10]
    unsigned char indexTest = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	74fb      	strb	r3, [r7, #19]
    unsigned char testSamples = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	74bb      	strb	r3, [r7, #18]
    unsigned char selectedUserTest=0;
 80030dc:	2300      	movs	r3, #0
 80030de:	747b      	strb	r3, [r7, #17]
    unsigned char* ptr_vooTimeString;
    unsigned char* ptr_alturaString;
    struct results* ptr_structExportResult;
    unsigned char dataVerify;
    //unsigned char cursorPosition[2] = {0,0};
    unsigned char displayUpdateStatus = IDDLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	727b      	strb	r3, [r7, #9]
    while(key != MENU)
 80030e4:	bf00      	nop
 80030e6:	e171      	b.n	80033cc <exportStateMachine+0x30c>
    {
        switch(subMenuExport->menuState)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	78db      	ldrb	r3, [r3, #3]
 80030ec:	2b06      	cmp	r3, #6
 80030ee:	f200 816d 	bhi.w	80033cc <exportStateMachine+0x30c>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <exportStateMachine+0x38>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003115 	.word	0x08003115
 80030fc:	08003125 	.word	0x08003125
 8003100:	08003153 	.word	0x08003153
 8003104:	08003283 	.word	0x08003283
 8003108:	08003367 	.word	0x08003367
 800310c:	080031eb 	.word	0x080031eb
 8003110:	0800339f 	.word	0x0800339f
        {
            case IDDLE:
                subMenuExport->menuState = getNextSub(VERIFICA_COMM);
 8003114:	2001      	movs	r0, #1
 8003116:	f001 fdff 	bl	8004d18 <getNextSub>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	70da      	strb	r2, [r3, #3]
            break;
 8003122:	e153      	b.n	80033cc <exportStateMachine+0x30c>

            case VERIFICA_COMM:
            	startCOMM(); //verificar se nao preciso deixar uma flag de comm no data.c para acessar o valor dela
 8003124:	f000 feda 	bl	8003edc <startCOMM>
            	// e comparar para verificar se a comm já está ligada antes de liga-la novamente.
                updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 8003128:	4bad      	ldr	r3, [pc, #692]	; (80033e0 <exportStateMachine+0x320>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	f107 0309 	add.w	r3, r7, #9
 8003130:	2100      	movs	r1, #0
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff ff8a 	bl	800304c <updateUserMsg>
                subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 8003138:	2002      	movs	r0, #2
 800313a:	f001 fded 	bl	8004d18 <getNextSub>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	70da      	strb	r2, [r3, #3]
                readyUserInterface(&displayUpdateStatus);
 8003146:	f107 0309 	add.w	r3, r7, #9
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff99 	bl	8003082 <readyUserInterface>
            break;
 8003150:	e13c      	b.n	80033cc <exportStateMachine+0x30c>

            case EXPORTAR_UNITARIO:
                updateUserMsg(0,USERMSG1,exportunitUserMsg,&displayUpdateStatus);
 8003152:	4ba4      	ldr	r3, [pc, #656]	; (80033e4 <exportStateMachine+0x324>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f107 0309 	add.w	r3, r7, #9
 800315a:	2100      	movs	r1, #0
 800315c:	2000      	movs	r0, #0
 800315e:	f7ff ff75 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003162:	4ba1      	ldr	r3, [pc, #644]	; (80033e8 <exportStateMachine+0x328>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	2102      	movs	r1, #2
 800316a:	2000      	movs	r0, #0
 800316c:	f000 fed2 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003170:	4b9d      	ldr	r3, [pc, #628]	; (80033e8 <exportStateMachine+0x328>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fac3 	bl	8002700 <stringLenght>
 800317a:	4603      	mov	r3, r0
 800317c:	4618      	mov	r0, r3
 800317e:	4b9b      	ldr	r3, [pc, #620]	; (80033ec <exportStateMachine+0x32c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	2102      	movs	r1, #2
 8003186:	f000 fec5 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 800318a:	4b99      	ldr	r3, [pc, #612]	; (80033f0 <exportStateMachine+0x330>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	2103      	movs	r1, #3
 8003192:	2000      	movs	r0, #0
 8003194:	f000 febe 	bl	8003f14 <HW_PRINT_DATA>

                key = getKeyPressed();
 8003198:	f002 fba2 	bl	80058e0 <getKeyPressed>
 800319c:	4603      	mov	r3, r0
 800319e:	77fb      	strb	r3, [r7, #31]

                if(key == AVANCAR)
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	2b41      	cmp	r3, #65	; 0x41
 80031a4:	d10e      	bne.n	80031c4 <exportStateMachine+0x104>
                {
                	resetKeyPressed();
 80031a6:	f002 fba7 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80031aa:	f107 0309 	add.w	r3, r7, #9
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff67 	bl	8003082 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_TODOS);
 80031b4:	2005      	movs	r0, #5
 80031b6:	f001 fdaf 	bl	8004d18 <getNextSub>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	70da      	strb	r2, [r3, #3]
 80031c2:	e103      	b.n	80033cc <exportStateMachine+0x30c>
                }

                else if(key == CONFIRMAR)
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	2b43      	cmp	r3, #67	; 0x43
 80031c8:	f040 8100 	bne.w	80033cc <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 80031cc:	f002 fb94 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80031d0:	f107 0309 	add.w	r3, r7, #9
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff54 	bl	8003082 <readyUserInterface>
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 80031da:	2003      	movs	r0, #3
 80031dc:	f001 fd9c 	bl	8004d18 <getNextSub>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	70da      	strb	r2, [r3, #3]
                }
                break;
 80031e8:	e0f0      	b.n	80033cc <exportStateMachine+0x30c>

            case EXPORTAR_TODOS:
                updateUserMsg(0,0,exportallUserMsg,&displayUpdateStatus);
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <exportStateMachine+0x334>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f107 0309 	add.w	r3, r7, #9
 80031f2:	2100      	movs	r1, #0
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7ff ff29 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80031fa:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <exportStateMachine+0x328>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	2102      	movs	r1, #2
 8003202:	2000      	movs	r0, #0
 8003204:	f000 fe86 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <exportStateMachine+0x328>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fa77 	bl	8002700 <stringLenght>
 8003212:	4603      	mov	r3, r0
 8003214:	4618      	mov	r0, r3
 8003216:	4b75      	ldr	r3, [pc, #468]	; (80033ec <exportStateMachine+0x32c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	2102      	movs	r1, #2
 800321e:	f000 fe79 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <exportStateMachine+0x330>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	2103      	movs	r1, #3
 800322a:	2000      	movs	r0, #0
 800322c:	f000 fe72 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003230:	f002 fb56 	bl	80058e0 <getKeyPressed>
 8003234:	4603      	mov	r3, r0
 8003236:	77fb      	strb	r3, [r7, #31]

                if(key == AVANCAR)
 8003238:	7ffb      	ldrb	r3, [r7, #31]
 800323a:	2b41      	cmp	r3, #65	; 0x41
 800323c:	d10e      	bne.n	800325c <exportStateMachine+0x19c>
                {
                	resetKeyPressed();
 800323e:	f002 fb5b 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003242:	f107 0309 	add.w	r3, r7, #9
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff1b 	bl	8003082 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(EXPORTAR_UNITARIO);
 800324c:	2002      	movs	r0, #2
 800324e:	f001 fd63 	bl	8004d18 <getNextSub>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	70da      	strb	r2, [r3, #3]
 800325a:	e0b7      	b.n	80033cc <exportStateMachine+0x30c>
                }

                else if(key == CONFIRMAR)
 800325c:	7ffb      	ldrb	r3, [r7, #31]
 800325e:	2b43      	cmp	r3, #67	; 0x43
 8003260:	f040 80b4 	bne.w	80033cc <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 8003264:	f002 fb48 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003268:	f107 0309 	add.w	r3, r7, #9
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff08 	bl	8003082 <readyUserInterface>
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                    subMenuExport->menuState = getNextSub(PROCESS_TODOS);
 8003272:	2006      	movs	r0, #6
 8003274:	f001 fd50 	bl	8004d18 <getNextSub>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003280:	e0a4      	b.n	80033cc <exportStateMachine+0x30c>


            case NUM_TESTE_EXPORT:
                updateUserMsg(0,USERMSG1,consultTestUserMsg,&displayUpdateStatus);
 8003282:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <exportStateMachine+0x338>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f107 0309 	add.w	r3, r7, #9
 800328a:	2100      	movs	r1, #0
 800328c:	2000      	movs	r0, #0
 800328e:	f7ff fedd 	bl	800304c <updateUserMsg>
                ptr_exportTestString = getNumTestString();
 8003292:	f7ff fb97 	bl	80029c4 <getNumTestString>
 8003296:	61b8      	str	r0, [r7, #24]
                HW_PRINT_DATA(0,USERMSG2,ptr_exportTestString);
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	2101      	movs	r1, #1
 800329c:	2000      	movs	r0, #0
 800329e:	f000 fe39 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(index,USERMSG2);
 80032a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fe57 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80032ae:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <exportStateMachine+0x328>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	2102      	movs	r1, #2
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 fe2c 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80032bc:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <exportStateMachine+0x328>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fa1d 	bl	8002700 <stringLenght>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4618      	mov	r0, r3
 80032ca:	4b48      	ldr	r3, [pc, #288]	; (80033ec <exportStateMachine+0x32c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	2102      	movs	r1, #2
 80032d2:	f000 fe1f 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80032d6:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <exportStateMachine+0x330>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	2103      	movs	r1, #3
 80032de:	2000      	movs	r0, #0
 80032e0:	f000 fe18 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <exportStateMachine+0x330>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fa09 	bl	8002700 <stringLenght>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4618      	mov	r0, r3
 80032f2:	4b42      	ldr	r3, [pc, #264]	; (80033fc <exportStateMachine+0x33c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	2103      	movs	r1, #3
 80032fa:	f000 fe0b 	bl	8003f14 <HW_PRINT_DATA>
				key = getKeyPressed();
 80032fe:	f002 faef 	bl	80058e0 <getKeyPressed>
 8003302:	4603      	mov	r3, r0
 8003304:	77fb      	strb	r3, [r7, #31]

                if(key == INSERIR)
 8003306:	7ffb      	ldrb	r3, [r7, #31]
 8003308:	2b49      	cmp	r3, #73	; 0x49
 800330a:	d10e      	bne.n	800332a <exportStateMachine+0x26a>
                {
                	resetKeyPressed();
 800330c:	f002 faf4 	bl	80058f8 <resetKeyPressed>
                    setUserNumTest(&index);
 8003310:	f107 030a 	add.w	r3, r7, #10
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fcfa 	bl	8002d0e <setUserNumTest>
                    subMenuExport->menuState = getNextSub(NUM_TESTE_EXPORT);
 800331a:	2003      	movs	r0, #3
 800331c:	f001 fcfc 	bl	8004d18 <getNextSub>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	70da      	strb	r2, [r3, #3]
 8003328:	e050      	b.n	80033cc <exportStateMachine+0x30c>
                }
                else if(key == AVANCAR)
 800332a:	7ffb      	ldrb	r3, [r7, #31]
 800332c:	2b41      	cmp	r3, #65	; 0x41
 800332e:	d108      	bne.n	8003342 <exportStateMachine+0x282>
                {
                	resetKeyPressed();
 8003330:	f002 fae2 	bl	80058f8 <resetKeyPressed>
                    indexChange(&index,2);
 8003334:	f107 030a 	add.w	r3, r7, #10
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fa26 	bl	800278c <indexChange>
 8003340:	e044      	b.n	80033cc <exportStateMachine+0x30c>
                }
                else if(key == CONFIRMAR)
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	2b43      	cmp	r3, #67	; 0x43
 8003346:	d141      	bne.n	80033cc <exportStateMachine+0x30c>
                {
                	resetKeyPressed();
 8003348:	f002 fad6 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 800334c:	f107 0309 	add.w	r3, r7, #9
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fe96 	bl	8003082 <readyUserInterface>
                    subMenuExport->menuState = getNextSub(PROCESS_UNITARIO);
 8003356:	2004      	movs	r0, #4
 8003358:	f001 fcde 	bl	8004d18 <getNextSub>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	70da      	strb	r2, [r3, #3]
                    //subMenuExport->menuSelect = setSelectSub(&subMenuExport->menuState);
                }

                break;
 8003364:	e032      	b.n	80033cc <exportStateMachine+0x30c>

                case PROCESS_UNITARIO:
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <exportStateMachine+0x340>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	f107 0309 	add.w	r3, r7, #9
 800336e:	2100      	movs	r1, #0
 8003370:	2000      	movs	r0, #0
 8003372:	f7ff fe6b 	bl	800304c <updateUserMsg>
                    selectedUserTest = stringToInt(ptr_exportTestString);
 8003376:	69b8      	ldr	r0, [r7, #24]
 8003378:	f7ff f9b0 	bl	80026dc <stringToInt>
 800337c:	4603      	mov	r3, r0
 800337e:	747b      	strb	r3, [r7, #17]
                    ptr_structExportResult = getUserResultData(selectedUserTest);
 8003380:	7c7b      	ldrb	r3, [r7, #17]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe ffa4 	bl	80022d0 <getUserResultData>
 8003388:	60f8      	str	r0, [r7, #12]
                     *
                     */
                   //ESSE FOR � S� PARA TESTE NO CONSOLE, AO INVES DESSE MONTE DE "PRINT", COLOCAREI FU��O PARA ENVIAR BT
//                    transmissionCOMM();
                    //Acessa os dados referente ao Teste e envia apenas o selecionado por BT
                subMenuExport->menuState = getNextSub(IDDLE);
 800338a:	2000      	movs	r0, #0
 800338c:	f001 fcc4 	bl	8004d18 <getNextSub>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	70da      	strb	r2, [r3, #3]
                key = MENU;
 8003398:	234d      	movs	r3, #77	; 0x4d
 800339a:	77fb      	strb	r3, [r7, #31]
                break;
 800339c:	e016      	b.n	80033cc <exportStateMachine+0x30c>

                case PROCESS_TODOS: //
                    updateUserMsg(0,0,exportedUserMsg,&displayUpdateStatus);
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <exportStateMachine+0x340>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	f107 0309 	add.w	r3, r7, #9
 80033a6:	2100      	movs	r1, #0
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7ff fe4f 	bl	800304c <updateUserMsg>

                    subMenuExport->menuState = getNextSub(IDDLE);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f001 fcb2 	bl	8004d18 <getNextSub>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	70da      	strb	r2, [r3, #3]
  				    readyUserInterface(&displayUpdateStatus);
 80033bc:	f107 0309 	add.w	r3, r7, #9
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fe5e 	bl	8003082 <readyUserInterface>
                    key = MENU;
 80033c6:	234d      	movs	r3, #77	; 0x4d
 80033c8:	77fb      	strb	r3, [r7, #31]
                    break;
 80033ca:	bf00      	nop
    while(key != MENU)
 80033cc:	7ffb      	ldrb	r3, [r7, #31]
 80033ce:	2b4d      	cmp	r3, #77	; 0x4d
 80033d0:	f47f ae8a 	bne.w	80030e8 <exportStateMachine+0x28>
        }
    }

}
 80033d4:	bf00      	nop
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000024 	.word	0x20000024
 80033e4:	200000ac 	.word	0x200000ac
 80033e8:	200000c4 	.word	0x200000c4
 80033ec:	200000cc 	.word	0x200000cc
 80033f0:	200000d0 	.word	0x200000d0
 80033f4:	200000b0 	.word	0x200000b0
 80033f8:	20000068 	.word	0x20000068
 80033fc:	200000c8 	.word	0x200000c8
 8003400:	20000070 	.word	0x20000070

08003404 <initStateMachine>:
    };

//toda maquina de estado deve ter um loop - > LEMBRAR LABVIEW

unsigned char initStateMachine(struct Menu* subMenu)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b09f      	sub	sp, #124	; 0x7c
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
    struct Menu* subMenuIniciar = subMenu;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	66fb      	str	r3, [r7, #108]	; 0x6c
    struct dataInsert* ptr_userConfiguration;
    struct results* ptr_result;
    struct tm myTime;
	struct tm* userTimeStruct = &myTime;
 8003410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003414:	66bb      	str	r3, [r7, #104]	; 0x68
    unsigned char key = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    short insertColumn = 7;
 800341c:	2307      	movs	r3, #7
 800341e:	84fb      	strh	r3, [r7, #38]	; 0x26
    unsigned int* ptr_soloTimeString;
    unsigned int* ptr_alturaString;
    unsigned int* ptr_potString;


    unsigned char displayUpdateStatus = IDDLE;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]

    unsigned char indexTest;
    unsigned char readingStatus = IDDLE;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    unsigned char selectedUserTest = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    unsigned char testSamples = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

    //
//    rflashConfigData();
    ptr_userConfiguration = getUserConfigStruct();
 8003436:	f7fe fed5 	bl	80021e4 <getUserConfigStruct>
 800343a:	6638      	str	r0, [r7, #96]	; 0x60

    unsigned char startTapete,readingState;


    while(key != MENU)
 800343c:	f000 bce8 	b.w	8003e10 <initStateMachine+0xa0c>
    {
        switch(subMenuIniciar->menuState)
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	78db      	ldrb	r3, [r3, #3]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	f200 84e3 	bhi.w	8003e10 <initStateMachine+0xa0c>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <initStateMachine+0x4c>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003485 	.word	0x08003485
 8003454:	08003497 	.word	0x08003497
 8003458:	08003541 	.word	0x08003541
 800345c:	08003605 	.word	0x08003605
 8003460:	0800370f 	.word	0x0800370f
 8003464:	0800382f 	.word	0x0800382f
 8003468:	08003927 	.word	0x08003927
 800346c:	080039a3 	.word	0x080039a3
 8003470:	08003a11 	.word	0x08003a11
 8003474:	08003a6d 	.word	0x08003a6d
 8003478:	08003b1d 	.word	0x08003b1d
 800347c:	08003cc5 	.word	0x08003cc5
 8003480:	08003d79 	.word	0x08003d79
        {
            case IDDLE:
                subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003484:	2001      	movs	r0, #1
 8003486:	f001 fc47 	bl	8004d18 <getNextSub>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	70da      	strb	r2, [r3, #3]
                //RESET
            break;
 8003492:	f000 bcbd 	b.w	8003e10 <initStateMachine+0xa0c>

            case COMM_OFF:
                updateUserMsg(0,USERMSG1,noTransmissionMsg,&displayUpdateStatus);
 8003496:	4bcd      	ldr	r3, [pc, #820]	; (80037cc <initStateMachine+0x3c8>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f107 030f 	add.w	r3, r7, #15
 800349e:	2100      	movs	r1, #0
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7ff fdd3 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 80034a6:	4bca      	ldr	r3, [pc, #808]	; (80037d0 <initStateMachine+0x3cc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	2102      	movs	r1, #2
 80034ae:	2000      	movs	r0, #0
 80034b0:	f000 fd30 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 80034b4:	4bc6      	ldr	r3, [pc, #792]	; (80037d0 <initStateMachine+0x3cc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff f921 	bl	8002700 <stringLenght>
 80034be:	4bc5      	ldr	r3, [pc, #788]	; (80037d4 <initStateMachine+0x3d0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	2102      	movs	r1, #2
 80034c6:	f000 fd25 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 80034ca:	4bc3      	ldr	r3, [pc, #780]	; (80037d8 <initStateMachine+0x3d4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	2103      	movs	r1, #3
 80034d2:	2000      	movs	r0, #0
 80034d4:	f000 fd1e 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 80034d8:	f002 fa02 	bl	80058e0 <getKeyPressed>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                if(key == AVANCAR)
 80034e2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80034e6:	2b41      	cmp	r3, #65	; 0x41
 80034e8:	d10f      	bne.n	800350a <initStateMachine+0x106>
                {
                	resetKeyPressed();
 80034ea:	f002 fa05 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80034ee:	f107 030f 	add.w	r3, r7, #15
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fdc5 	bl	8003082 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(COMM_ON);
 80034f8:	2002      	movs	r0, #2
 80034fa:	f001 fc0d 	bl	8004d18 <getNextSub>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	70da      	strb	r2, [r3, #3]
 8003506:	f000 bc83 	b.w	8003e10 <initStateMachine+0xa0c>
                }
                else if(key == CONFIRMAR)
 800350a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800350e:	2b43      	cmp	r3, #67	; 0x43
 8003510:	f040 847e 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 8003514:	f002 f9f0 	bl	80058f8 <resetKeyPressed>
                    stopCOMM();
 8003518:	f000 fcee 	bl	8003ef8 <stopCOMM>
                    readyUserInterface(&displayUpdateStatus);
 800351c:	f107 030f 	add.w	r3, r7, #15
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fdae 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userCommConfig = COMM_OFF;
 8003526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 800352e:	2003      	movs	r0, #3
 8003530:	f001 fbf2 	bl	8004d18 <getNextSub>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	70da      	strb	r2, [r3, #3]
                }
            break;
 800353c:	f000 bc68 	b.w	8003e10 <initStateMachine+0xa0c>

            case COMM_ON:
				updateUserMsg(0,0,yesTransmissionMsg,&displayUpdateStatus);
 8003540:	4ba6      	ldr	r3, [pc, #664]	; (80037dc <initStateMachine+0x3d8>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	f107 030f 	add.w	r3, r7, #15
 8003548:	2100      	movs	r1, #0
 800354a:	2000      	movs	r0, #0
 800354c:	f7ff fd7e 	bl	800304c <updateUserMsg>
				HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003550:	4b9f      	ldr	r3, [pc, #636]	; (80037d0 <initStateMachine+0x3cc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	2102      	movs	r1, #2
 8003558:	2000      	movs	r0, #0
 800355a:	f000 fcdb 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800355e:	4b9c      	ldr	r3, [pc, #624]	; (80037d0 <initStateMachine+0x3cc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff f8cc 	bl	8002700 <stringLenght>
 8003568:	4b9a      	ldr	r3, [pc, #616]	; (80037d4 <initStateMachine+0x3d0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	2102      	movs	r1, #2
 8003570:	f000 fcd0 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003574:	4b98      	ldr	r3, [pc, #608]	; (80037d8 <initStateMachine+0x3d4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	2103      	movs	r1, #3
 800357c:	2000      	movs	r0, #0
 800357e:	f000 fcc9 	bl	8003f14 <HW_PRINT_DATA>
				key = getKeyPressed();
 8003582:	f002 f9ad 	bl	80058e0 <getKeyPressed>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                if(key == AVANCAR)
 800358c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003590:	2b41      	cmp	r3, #65	; 0x41
 8003592:	d10f      	bne.n	80035b4 <initStateMachine+0x1b0>
				{
                	resetKeyPressed();
 8003594:	f002 f9b0 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003598:	f107 030f 	add.w	r3, r7, #15
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fd70 	bl	8003082 <readyUserInterface>
					subMenuIniciar->menuState = getNextSub(COMM_OFF);
 80035a2:	2001      	movs	r0, #1
 80035a4:	f001 fbb8 	bl	8004d18 <getNextSub>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461a      	mov	r2, r3
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	70da      	strb	r2, [r3, #3]
 80035b0:	f000 bc2e 	b.w	8003e10 <initStateMachine+0xa0c>
				}
                else if(key == CONFIRMAR)
 80035b4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80035b8:	2b43      	cmp	r3, #67	; 0x43
 80035ba:	f040 8429 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 80035be:	f002 f99b 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 80035c2:	f107 030f 	add.w	r3, r7, #15
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fd5b 	bl	8003082 <readyUserInterface>
                    startCOMM();
 80035cc:	f000 fc86 	bl	8003edc <startCOMM>
                	updateUserMsg(0,0,waitTransmissionMsg,&displayUpdateStatus);
 80035d0:	4b83      	ldr	r3, [pc, #524]	; (80037e0 <initStateMachine+0x3dc>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	f107 030f 	add.w	r3, r7, #15
 80035d8:	2100      	movs	r1, #0
 80035da:	2000      	movs	r0, #0
 80035dc:	f7ff fd36 	bl	800304c <updateUserMsg>
                    readyUserInterface(&displayUpdateStatus);
 80035e0:	f107 030f 	add.w	r3, r7, #15
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fd4c 	bl	8003082 <readyUserInterface>
                     ptr_userConfiguration->userCommConfig = COMM_ON;
 80035ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80035f2:	2003      	movs	r0, #3
 80035f4:	f001 fb90 	bl	8004d18 <getNextSub>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003600:	f000 bc06 	b.w	8003e10 <initStateMachine+0xa0c>

            case TEMPO_READ:
                updateUserMsg(0,USERMSG1,timeUserMsg,&displayUpdateStatus);
 8003604:	4b77      	ldr	r3, [pc, #476]	; (80037e4 <initStateMachine+0x3e0>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	f107 030f 	add.w	r3, r7, #15
 800360c:	2100      	movs	r1, #0
 800360e:	2000      	movs	r0, #0
 8003610:	f7ff fd1c 	bl	800304c <updateUserMsg>

                userTimeStruct = getTimeStruct();
 8003614:	f7fe fd5e 	bl	80020d4 <getTimeStruct>
 8003618:	66b8      	str	r0, [r7, #104]	; 0x68
                strftime(userTimeString, sizeof(userTimeString), "%H:%M:%S", userTimeStruct);
 800361a:	f107 001c 	add.w	r0, r7, #28
 800361e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003620:	4a71      	ldr	r2, [pc, #452]	; (80037e8 <initStateMachine+0x3e4>)
 8003622:	2109      	movs	r1, #9
 8003624:	f00b f92c 	bl	800e880 <strftime>
                HW_PRINT_DATA(0,USERMSG2,userTimeString);
 8003628:	f107 031c 	add.w	r3, r7, #28
 800362c:	461a      	mov	r2, r3
 800362e:	2101      	movs	r1, #1
 8003630:	2000      	movs	r0, #0
 8003632:	f000 fc6f 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(insertColumn,USERMSG2);
 8003636:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800363a:	2101      	movs	r1, #1
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fc8d 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <initStateMachine+0x3cc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	2102      	movs	r1, #2
 800364a:	2000      	movs	r0, #0
 800364c:	f000 fc62 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 8003650:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <initStateMachine+0x3cc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff f853 	bl	8002700 <stringLenght>
 800365a:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <initStateMachine+0x3d0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	2102      	movs	r1, #2
 8003662:	f000 fc57 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003666:	4b5c      	ldr	r3, [pc, #368]	; (80037d8 <initStateMachine+0x3d4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	2103      	movs	r1, #3
 800366e:	2000      	movs	r0, #0
 8003670:	f000 fc50 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <initStateMachine+0x3d4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff f841 	bl	8002700 <stringLenght>
 800367e:	4b5b      	ldr	r3, [pc, #364]	; (80037ec <initStateMachine+0x3e8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	2103      	movs	r1, #3
 8003686:	f000 fc45 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 800368a:	f002 f929 	bl	80058e0 <getKeyPressed>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == INSERIR)
 8003694:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003698:	2b49      	cmp	r3, #73	; 0x49
 800369a:	d10e      	bne.n	80036ba <initStateMachine+0x2b6>
                {
                	resetKeyPressed();
 800369c:	f002 f92c 	bl	80058f8 <resetKeyPressed>
                    setUserTime(&insertColumn);
 80036a0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fc13 	bl	8002ed0 <setUserTime>
                    subMenuIniciar->menuState = getNextSub(TEMPO_READ);
 80036aa:	2003      	movs	r0, #3
 80036ac:	f001 fb34 	bl	8004d18 <getNextSub>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	70da      	strb	r2, [r3, #3]
 80036b8:	e3aa      	b.n	8003e10 <initStateMachine+0xa0c>
                }
                else if (key == AVANCAR)
 80036ba:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80036be:	2b41      	cmp	r3, #65	; 0x41
 80036c0:	d108      	bne.n	80036d4 <initStateMachine+0x2d0>
                {
                	resetKeyPressed();
 80036c2:	f002 f919 	bl	80058f8 <resetKeyPressed>
                    indexColumn(&insertColumn,7);
 80036c6:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80036ca:	2107      	movs	r1, #7
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe ff9d 	bl	800260c <indexColumn>
 80036d2:	e39d      	b.n	8003e10 <initStateMachine+0xa0c>
                }
                else if(key == CONFIRMAR)
 80036d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80036d8:	2b43      	cmp	r3, #67	; 0x43
 80036da:	f040 8399 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 80036de:	f002 f90b 	bl	80058f8 <resetKeyPressed>
                	insertColumn = 4; //colocar um define talvez -> definicao de caracteres no display massa e overmass
 80036e2:	2304      	movs	r3, #4
 80036e4:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 80036e6:	f107 030f 	add.w	r3, r7, #15
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fcc9 	bl	8003082 <readyUserInterface>
					ptr_userConfiguration->userTime = milisecondsTime(userTimeStruct);
 80036f0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80036f2:	f7fe ffc7 	bl	8002684 <milisecondsTime>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036fc:	605a      	str	r2, [r3, #4]
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 80036fe:	2004      	movs	r0, #4
 8003700:	f001 fb0a 	bl	8004d18 <getNextSub>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	70da      	strb	r2, [r3, #3]
                }
                break;
 800370c:	e380      	b.n	8003e10 <initStateMachine+0xa0c>

            case MASSA_READ:
                 updateUserMsg(0,USERMSG1,massUserMsg,&displayUpdateStatus);
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <initStateMachine+0x3ec>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	f107 030f 	add.w	r3, r7, #15
 8003716:	2100      	movs	r1, #0
 8003718:	2000      	movs	r0, #0
 800371a:	f7ff fc97 	bl	800304c <updateUserMsg>
                 ptr_massString = getMassString();
 800371e:	f7ff f905 	bl	800292c <getMassString>
 8003722:	4603      	mov	r3, r0
 8003724:	64fb      	str	r3, [r7, #76]	; 0x4c
                 HW_PRINT_DATA(0,USERMSG2,ptr_massString);
 8003726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003728:	2101      	movs	r1, #1
 800372a:	2000      	movs	r0, #0
 800372c:	f000 fbf2 	bl	8003f14 <HW_PRINT_DATA>
                 HW_UPDATE_DATA(insertColumn,1);
 8003730:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003734:	2101      	movs	r1, #1
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fc10 	bl	8003f5c <HW_UPDATE_DATA>
                 HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <initStateMachine+0x3cc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	2102      	movs	r1, #2
 8003744:	2000      	movs	r0, #0
 8003746:	f000 fbe5 	bl	8003f14 <HW_PRINT_DATA>
				 HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <initStateMachine+0x3cc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe ffd6 	bl	8002700 <stringLenght>
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <initStateMachine+0x3d0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	2102      	movs	r1, #2
 800375c:	f000 fbda 	bl	8003f14 <HW_PRINT_DATA>
				 HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <initStateMachine+0x3d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	2103      	movs	r1, #3
 8003768:	2000      	movs	r0, #0
 800376a:	f000 fbd3 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800376e:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <initStateMachine+0x3d4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe ffc4 	bl	8002700 <stringLenght>
 8003778:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <initStateMachine+0x3e8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	2103      	movs	r1, #3
 8003780:	f000 fbc8 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003784:	f002 f8ac 	bl	80058e0 <getKeyPressed>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                if(key == INSERIR)
 800378e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003792:	2b49      	cmp	r3, #73	; 0x49
 8003794:	d10e      	bne.n	80037b4 <initStateMachine+0x3b0>
                {
                	resetKeyPressed();
 8003796:	f002 f8af 	bl	80058f8 <resetKeyPressed>
                    setUserMass(&insertColumn); //criar variavel adicional para separar insertcolumn
 800379a:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fa6d 	bl	8002c7e <setUserMass>
                    subMenuIniciar->menuState = getNextSub(MASSA_READ);
 80037a4:	2004      	movs	r0, #4
 80037a6:	f001 fab7 	bl	8004d18 <getNextSub>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	70da      	strb	r2, [r3, #3]
 80037b2:	e32d      	b.n	8003e10 <initStateMachine+0xa0c>
                }
                else if(key == AVANCAR)
 80037b4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80037b8:	2b41      	cmp	r3, #65	; 0x41
 80037ba:	d11b      	bne.n	80037f4 <initStateMachine+0x3f0>
                {
                	resetKeyPressed();
 80037bc:	f002 f89c 	bl	80058f8 <resetKeyPressed>
                    indexMass(&insertColumn);
 80037c0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe ffb7 	bl	8002738 <indexMass>
 80037ca:	e321      	b.n	8003e10 <initStateMachine+0xa0c>
 80037cc:	2000001c 	.word	0x2000001c
 80037d0:	200000c4 	.word	0x200000c4
 80037d4:	200000cc 	.word	0x200000cc
 80037d8:	200000d0 	.word	0x200000d0
 80037dc:	20000020 	.word	0x20000020
 80037e0:	20000024 	.word	0x20000024
 80037e4:	20000028 	.word	0x20000028
 80037e8:	08010388 	.word	0x08010388
 80037ec:	200000c8 	.word	0x200000c8
 80037f0:	2000002c 	.word	0x2000002c
                }
                else if(key == CONFIRMAR)
 80037f4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80037f8:	2b43      	cmp	r3, #67	; 0x43
 80037fa:	f040 8309 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 80037fe:	f002 f87b 	bl	80058f8 <resetKeyPressed>
                	insertColumn = 4;
 8003802:	2304      	movs	r3, #4
 8003804:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 8003806:	f107 030f 	add.w	r3, r7, #15
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fc39 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userMass= stringToInt(ptr_massString);
 8003810:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003812:	f7fe ff63 	bl	80026dc <stringToInt>
 8003816:	4603      	mov	r3, r0
 8003818:	b2da      	uxtb	r2, r3
 800381a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381c:	721a      	strb	r2, [r3, #8]
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 800381e:	2005      	movs	r0, #5
 8003820:	f001 fa7a 	bl	8004d18 <getNextSub>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382a:	70da      	strb	r2, [r3, #3]
                }
                break;
 800382c:	e2f0      	b.n	8003e10 <initStateMachine+0xa0c>

            case SOBREC_READ:
                updateUserMsg(0,USERMSG1,overmassUserMsg,&displayUpdateStatus);
 800382e:	4bb0      	ldr	r3, [pc, #704]	; (8003af0 <initStateMachine+0x6ec>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f107 030f 	add.w	r3, r7, #15
 8003836:	2100      	movs	r1, #0
 8003838:	2000      	movs	r0, #0
 800383a:	f7ff fc07 	bl	800304c <updateUserMsg>
                ptr_overMassString = getOverMassString();
 800383e:	f7ff f89b 	bl	8002978 <getOverMassString>
 8003842:	4603      	mov	r3, r0
 8003844:	653b      	str	r3, [r7, #80]	; 0x50
                HW_PRINT_DATA(0,USERMSG2,ptr_overMassString);
 8003846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003848:	2101      	movs	r1, #1
 800384a:	2000      	movs	r0, #0
 800384c:	f000 fb62 	bl	8003f14 <HW_PRINT_DATA>
                HW_UPDATE_DATA(insertColumn,1);
 8003850:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fb80 	bl	8003f5c <HW_UPDATE_DATA>

                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 800385c:	4ba5      	ldr	r3, [pc, #660]	; (8003af4 <initStateMachine+0x6f0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	2102      	movs	r1, #2
 8003864:	2000      	movs	r0, #0
 8003866:	f000 fb55 	bl	8003f14 <HW_PRINT_DATA>
				 HW_PRINT_DATA(stringLenght(avancarUserMsg),INSERTMSG,menuUserMsg);
 800386a:	4ba2      	ldr	r3, [pc, #648]	; (8003af4 <initStateMachine+0x6f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe ff46 	bl	8002700 <stringLenght>
 8003874:	4ba0      	ldr	r3, [pc, #640]	; (8003af8 <initStateMachine+0x6f4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	2102      	movs	r1, #2
 800387c:	f000 fb4a 	bl	8003f14 <HW_PRINT_DATA>
				 HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003880:	4b9e      	ldr	r3, [pc, #632]	; (8003afc <initStateMachine+0x6f8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	2103      	movs	r1, #3
 8003888:	2000      	movs	r0, #0
 800388a:	f000 fb43 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(stringLenght(selecionarUserMsg),OPTIONMSG,inserirUserMsg);
 800388e:	4b9b      	ldr	r3, [pc, #620]	; (8003afc <initStateMachine+0x6f8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe ff34 	bl	8002700 <stringLenght>
 8003898:	4b99      	ldr	r3, [pc, #612]	; (8003b00 <initStateMachine+0x6fc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	2103      	movs	r1, #3
 80038a0:	f000 fb38 	bl	8003f14 <HW_PRINT_DATA>

                key = getKeyPressed();
 80038a4:	f002 f81c 	bl	80058e0 <getKeyPressed>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == INSERIR)
 80038ae:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80038b2:	2b49      	cmp	r3, #73	; 0x49
 80038b4:	d10e      	bne.n	80038d4 <initStateMachine+0x4d0>
                {
                	resetKeyPressed();
 80038b6:	f002 f81f 	bl	80058f8 <resetKeyPressed>
                    setUserOverMass(&insertColumn);
 80038ba:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fa01 	bl	8002cc6 <setUserOverMass>
                    subMenuIniciar->menuState = getNextSub(SOBREC_READ);
 80038c4:	2005      	movs	r0, #5
 80038c6:	f001 fa27 	bl	8004d18 <getNextSub>
 80038ca:	4603      	mov	r3, r0
 80038cc:	461a      	mov	r2, r3
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	70da      	strb	r2, [r3, #3]
 80038d2:	e29d      	b.n	8003e10 <initStateMachine+0xa0c>
                }
                else if(key == AVANCAR)
 80038d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80038d8:	2b41      	cmp	r3, #65	; 0x41
 80038da:	d107      	bne.n	80038ec <initStateMachine+0x4e8>
                {
                	resetKeyPressed();
 80038dc:	f002 f80c 	bl	80058f8 <resetKeyPressed>
                    indexMass(&insertColumn);
 80038e0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe ff27 	bl	8002738 <indexMass>
 80038ea:	e291      	b.n	8003e10 <initStateMachine+0xa0c>
                }
                else if(key == CONFIRMAR)
 80038ec:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80038f0:	2b43      	cmp	r3, #67	; 0x43
 80038f2:	f040 828d 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 80038f6:	f001 ffff 	bl	80058f8 <resetKeyPressed>
                	insertColumn = 7; //definicao de caracteres para TIME
 80038fa:	2307      	movs	r3, #7
 80038fc:	84fb      	strh	r3, [r7, #38]	; 0x26
                    readyUserInterface(&displayUpdateStatus);
 80038fe:	f107 030f 	add.w	r3, r7, #15
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fbbd 	bl	8003082 <readyUserInterface>
                    ptr_userConfiguration->userOverMass= stringToInt(ptr_overMassString);
 8003908:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800390a:	f7fe fee7 	bl	80026dc <stringToInt>
 800390e:	4603      	mov	r3, r0
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003914:	725a      	strb	r2, [r3, #9]
                    subMenuIniciar->menuState = getNextSub(START);
 8003916:	2006      	movs	r0, #6
 8003918:	f001 f9fe 	bl	8004d18 <getNextSub>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003922:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003924:	e274      	b.n	8003e10 <initStateMachine+0xa0c>

            case START:
                setInsertData(ptr_userConfiguration);
 8003926:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003928:	f001 fa08 	bl	8004d3c <setInsertData>
                updateUserMsg(0,USERMSG1,startreadUserMsg,&displayUpdateStatus);
 800392c:	4b75      	ldr	r3, [pc, #468]	; (8003b04 <initStateMachine+0x700>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	f107 030f 	add.w	r3, r7, #15
 8003934:	2100      	movs	r1, #0
 8003936:	2000      	movs	r0, #0
 8003938:	f7ff fb88 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,USERMSG2,userTimeString);
 800393c:	f107 031c 	add.w	r3, r7, #28
 8003940:	461a      	mov	r2, r3
 8003942:	2101      	movs	r1, #1
 8003944:	2000      	movs	r0, #0
 8003946:	f000 fae5 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,INSERTMSG,menuUserMsg);
 800394a:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <initStateMachine+0x6f4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	2102      	movs	r1, #2
 8003952:	2000      	movs	r0, #0
 8003954:	f000 fade 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003958:	4b68      	ldr	r3, [pc, #416]	; (8003afc <initStateMachine+0x6f8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	2103      	movs	r1, #3
 8003960:	2000      	movs	r0, #0
 8003962:	f000 fad7 	bl	8003f14 <HW_PRINT_DATA>


                key = getKeyPressed();
 8003966:	f001 ffbb 	bl	80058e0 <getKeyPressed>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == CONFIRMAR)
 8003970:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003974:	2b43      	cmp	r3, #67	; 0x43
 8003976:	f040 824b 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 800397a:	f001 ffbd 	bl	80058f8 <resetKeyPressed>
                    indexTest = getResultTestNumber();
 800397e:	f7fe fcbd 	bl	80022fc <getResultTestNumber>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    readyUserInterface(&displayUpdateStatus);
 8003988:	f107 030f 	add.w	r3, r7, #15
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fb78 	bl	8003082 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(READING);
 8003992:	2007      	movs	r0, #7
 8003994:	f001 f9c0 	bl	8004d18 <getNextSub>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	70da      	strb	r2, [r3, #3]
                }
            break;
 80039a0:	e236      	b.n	8003e10 <initStateMachine+0xa0c>

            case READING:
            	 updateUserMsg(0,USERMSG1,medindoUserMsg,&displayUpdateStatus);
 80039a2:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <initStateMachine+0x704>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f107 030f 	add.w	r3, r7, #15
 80039aa:	2100      	movs	r1, #0
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7ff fb4d 	bl	800304c <updateUserMsg>
            	 resetTimer3Variable();
 80039b2:	f001 ff89 	bl	80058c8 <resetTimer3Variable>
				 HW_PRINT_DATA(0,OPTIONMSG,pararUserMsg);
 80039b6:	4b55      	ldr	r3, [pc, #340]	; (8003b0c <initStateMachine+0x708>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	2103      	movs	r1, #3
 80039be:	2000      	movs	r0, #0
 80039c0:	f000 faa8 	bl	8003f14 <HW_PRINT_DATA>
            	 startTM2();
 80039c4:	f000 fa46 	bl	8003e54 <startTM2>
				 startTM3();
 80039c8:	f000 fa50 	bl	8003e6c <startTM3>
				 readingStatus = readingSensor();
 80039cc:	f000 feac 	bl	8004728 <readingSensor>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				 key = getKeyPressed();
 80039d6:	f001 ff83 	bl	80058e0 <getKeyPressed>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
				 if(key == PARAR || readingStatus != IDDLE)
 80039e0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d004      	beq.n	80039f2 <initStateMachine+0x5ee>
 80039e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 820f 	beq.w	8003e10 <initStateMachine+0xa0c>
				 {
					 resetKeyPressed();
 80039f2:	f001 ff81 	bl	80058f8 <resetKeyPressed>
					 readyUserInterface(&displayUpdateStatus);
 80039f6:	f107 030f 	add.w	r3, r7, #15
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fb41 	bl	8003082 <readyUserInterface>
					 subMenuIniciar->menuState = getNextSub(STOP);
 8003a00:	2008      	movs	r0, #8
 8003a02:	f001 f989 	bl	8004d18 <getNextSub>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0c:	70da      	strb	r2, [r3, #3]
				 }

            break;
 8003a0e:	e1ff      	b.n	8003e10 <initStateMachine+0xa0c>

            case STOP:
            	key = getKeyPressed();
 8003a10:	f001 ff66 	bl	80058e0 <getKeyPressed>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                updateUserMsg(0,0,stopreadUserMsg,&displayUpdateStatus);
 8003a1a:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <initStateMachine+0x70c>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f107 030f 	add.w	r3, r7, #15
 8003a22:	2100      	movs	r1, #0
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7ff fb11 	bl	800304c <updateUserMsg>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003a2a:	4b34      	ldr	r3, [pc, #208]	; (8003afc <initStateMachine+0x6f8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2103      	movs	r1, #3
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 fa6e 	bl	8003f14 <HW_PRINT_DATA>

                if(key == CONFIRMAR)
 8003a38:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003a3c:	2b43      	cmp	r3, #67	; 0x43
 8003a3e:	f040 81e7 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 8003a42:	f001 ff59 	bl	80058f8 <resetKeyPressed>
                    stopTM2();
 8003a46:	f000 fa0b 	bl	8003e60 <stopTM2>
                    stopTM3();
 8003a4a:	f000 fa15 	bl	8003e78 <stopTM3>
                    readyUserInterface(&displayUpdateStatus);
 8003a4e:	f107 030f 	add.w	r3, r7, #15
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fb15 	bl	8003082 <readyUserInterface>
                    setResultTestNumber();
 8003a58:	f7fe fc5c 	bl	8002314 <setResultTestNumber>
//                    transmissionCOMM();
                    subMenuIniciar->menuState = getNextSub(DISP_RESULTS);
 8003a5c:	2009      	movs	r0, #9
 8003a5e:	f001 f95b 	bl	8004d18 <getNextSub>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	70da      	strb	r2, [r3, #3]
                }
                break;
 8003a6a:	e1d1      	b.n	8003e10 <initStateMachine+0xa0c>

            case DISP_RESULTS:
                updateUserMsg(0,0,resultsUserMsg,&displayUpdateStatus);
 8003a6c:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <initStateMachine+0x710>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f107 030f 	add.w	r3, r7, #15
 8003a74:	2100      	movs	r1, #0
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7ff fae8 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,selecionarUserMsg);
 8003a7c:	4b1f      	ldr	r3, [pc, #124]	; (8003afc <initStateMachine+0x6f8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	2102      	movs	r1, #2
 8003a84:	2000      	movs	r0, #0
 8003a86:	f000 fa45 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,pularUserMsg);
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <initStateMachine+0x714>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2103      	movs	r1, #3
 8003a92:	2000      	movs	r0, #0
 8003a94:	f000 fa3e 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003a98:	f001 ff22 	bl	80058e0 <getKeyPressed>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == PARAR)
 8003aa2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003aa6:	2b50      	cmp	r3, #80	; 0x50
 8003aa8:	d10e      	bne.n	8003ac8 <initStateMachine+0x6c4>
                {
                	resetKeyPressed();
 8003aaa:	f001 ff25 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003aae:	f107 030f 	add.w	r3, r7, #15
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fae5 	bl	8003082 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003ab8:	200b      	movs	r0, #11
 8003aba:	f001 f92d 	bl	8004d18 <getNextSub>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac4:	70da      	strb	r2, [r3, #3]
 8003ac6:	e1a3      	b.n	8003e10 <initStateMachine+0xa0c>
                }
                else if(key == CONFIRMAR)
 8003ac8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003acc:	2b43      	cmp	r3, #67	; 0x43
 8003ace:	f040 819f 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 8003ad2:	f001 ff11 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003ad6:	f107 030f 	add.w	r3, r7, #15
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fad1 	bl	8003082 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(RESULTS);
 8003ae0:	200a      	movs	r0, #10
 8003ae2:	f001 f919 	bl	8004d18 <getNextSub>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aec:	70da      	strb	r2, [r3, #3]
                }
            break;
 8003aee:	e18f      	b.n	8003e10 <initStateMachine+0xa0c>
 8003af0:	20000030 	.word	0x20000030
 8003af4:	200000c4 	.word	0x200000c4
 8003af8:	200000cc 	.word	0x200000cc
 8003afc:	200000d0 	.word	0x200000d0
 8003b00:	200000c8 	.word	0x200000c8
 8003b04:	20000034 	.word	0x20000034
 8003b08:	20000038 	.word	0x20000038
 8003b0c:	200000d4 	.word	0x200000d4
 8003b10:	2000003c 	.word	0x2000003c
 8003b14:	20000054 	.word	0x20000054
 8003b18:	200000d8 	.word	0x200000d8

            case RESULTS:
            	selectedUserTest = getResultTestNumber();
 8003b1c:	f7fe fbee 	bl	80022fc <getResultTestNumber>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            	ptr_result = getUserResultData(selectedUserTest);
 8003b26:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fbd0 	bl	80022d0 <getUserResultData>
 8003b30:	6778      	str	r0, [r7, #116]	; 0x74
				if(testSamples<(ptr_result->resultTestAcquiredSamples))
 8003b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d27c      	bcs.n	8003c38 <initStateMachine+0x834>
				{
//					updateUserMsg(0,USERMSG1,amostraUserMsg,&displayUpdateStatus);
					HW_PRINT_DATA(0,USERMSG1,amostraUserMsg);
 8003b3e:	4bb9      	ldr	r3, [pc, #740]	; (8003e24 <initStateMachine+0xa20>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	2100      	movs	r1, #0
 8003b46:	2000      	movs	r0, #0
 8003b48:	f000 f9e4 	bl	8003f14 <HW_PRINT_DATA>
					ptr_sampleString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].sampleNum);
 8003b4c:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe ff68 	bl	8002a34 <param_1_toString>
 8003b64:	4603      	mov	r3, r0
 8003b66:	65fb      	str	r3, [r7, #92]	; 0x5c
					HW_PRINT_DATA(stringLenght(amostraUserMsg),USERMSG1,ptr_sampleString);
 8003b68:	4bae      	ldr	r3, [pc, #696]	; (8003e24 <initStateMachine+0xa20>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fdc7 	bl	8002700 <stringLenght>
 8003b72:	4603      	mov	r3, r0
 8003b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f9cb 	bl	8003f14 <HW_PRINT_DATA>

//					HW_PRINT_DATA(0,USERMSG2,alturaSaltoUserMsg,&displayUpdateStatus);
					HW_PRINT_DATA(0,USERMSG2,alturaSaltoUserMsg);
 8003b7e:	4baa      	ldr	r3, [pc, #680]	; (8003e28 <initStateMachine+0xa24>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	2101      	movs	r1, #1
 8003b86:	2000      	movs	r0, #0
 8003b88:	f000 f9c4 	bl	8003f14 <HW_PRINT_DATA>
					ptr_alturaString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].alturaSalto);
 8003b8c:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3310      	adds	r3, #16
 8003b9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe ff47 	bl	8002a34 <param_1_toString>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	65bb      	str	r3, [r7, #88]	; 0x58
					HW_PRINT_DATA(stringLenght(alturaSaltoUserMsg),USERMSG2,strcat(ptr_alturaString,"cm"));
 8003baa:	4b9f      	ldr	r3, [pc, #636]	; (8003e28 <initStateMachine+0xa24>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fda6 	bl	8002700 <stringLenght>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003bb8:	f7fc fb12 	bl	80001e0 <strlen>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4a99      	ldr	r2, [pc, #612]	; (8003e2c <initStateMachine+0xa28>)
 8003bc6:	8811      	ldrh	r1, [r2, #0]
 8003bc8:	7892      	ldrb	r2, [r2, #2]
 8003bca:	8019      	strh	r1, [r3, #0]
 8003bcc:	709a      	strb	r2, [r3, #2]
 8003bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 f99d 	bl	8003f14 <HW_PRINT_DATA>
//					HW_PRINT_DATA(strlen(alturaSaltoUserMsg)+strlen(ptr_alturaString)+1,USERMSG2,tempoVooUserMsg);
//					ptr_vooTimeString = param_2_toString(&ptr_result->sampleMeasurement[testSamples].uiVooTime);
//					HW_PRINT_DATA(strlen(alturaSaltoUserMsg)+strlen(ptr_alturaString)+strlen(tempoVooUserMsg)+1,USERMSG2 ,ptr_vooTimeString);

//					updateUserMsg(0,INSERTMSG,potenciaUserMsg,&displayUpdateStatus);
					HW_PRINT_DATA(0,INSERTMSG,potenciaUserMsg);
 8003bda:	4b95      	ldr	r3, [pc, #596]	; (8003e30 <initStateMachine+0xa2c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	2102      	movs	r1, #2
 8003be2:	2000      	movs	r0, #0
 8003be4:	f000 f996 	bl	8003f14 <HW_PRINT_DATA>
					ptr_potString = param_1_toString(&ptr_result->sampleMeasurement[testSamples].potenciaSalto);
 8003be8:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	3310      	adds	r3, #16
 8003bf6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe ff19 	bl	8002a34 <param_1_toString>
 8003c02:	4603      	mov	r3, r0
 8003c04:	657b      	str	r3, [r7, #84]	; 0x54
					HW_PRINT_DATA(strlen(potenciaUserMsg),INSERTMSG,strcat(ptr_potString,"W"));
 8003c06:	4b8a      	ldr	r3, [pc, #552]	; (8003e30 <initStateMachine+0xa2c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fc fae8 	bl	80001e0 <strlen>
 8003c10:	4604      	mov	r4, r0
 8003c12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c14:	f7fc fae4 	bl	80001e0 <strlen>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1e:	4413      	add	r3, r2
 8003c20:	4984      	ldr	r1, [pc, #528]	; (8003e34 <initStateMachine+0xa30>)
 8003c22:	461a      	mov	r2, r3
 8003c24:	460b      	mov	r3, r1
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	8013      	strh	r3, [r2, #0]
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4620      	mov	r0, r4
 8003c32:	f000 f96f 	bl	8003f14 <HW_PRINT_DATA>
 8003c36:	e00b      	b.n	8003c50 <initStateMachine+0x84c>
//					HW_PRINT_DATA(strlen(potenciaUserMsg)+strlen(ptr_potString)+strlen(tempoSoloUserMsg)+1,INSERTMSG , ptr_soloTimeString);

				}
				else
				{
					HW_PRINT_DATA(0, USERMSG1, "NAO HA DADOS");
 8003c38:	4a7f      	ldr	r2, [pc, #508]	; (8003e38 <initStateMachine+0xa34>)
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f000 f969 	bl	8003f14 <HW_PRINT_DATA>
					HW_PRINT_DATA(0, OPTIONMSG, pularUserMsg);
 8003c42:	4b7e      	ldr	r3, [pc, #504]	; (8003e3c <initStateMachine+0xa38>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	2103      	movs	r1, #3
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f000 f962 	bl	8003f14 <HW_PRINT_DATA>
				}

				key = getKeyPressed();
 8003c50:	f001 fe46 	bl	80058e0 <getKeyPressed>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

				if(key == AVANCAR)
 8003c5a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003c5e:	2b41      	cmp	r3, #65	; 0x41
 8003c60:	d11c      	bne.n	8003c9c <initStateMachine+0x898>
				{
					resetKeyPressed();
 8003c62:	f001 fe49 	bl	80058f8 <resetKeyPressed>
					readyUserInterface(&displayUpdateStatus);
 8003c66:	f107 030f 	add.w	r3, r7, #15
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fa09 	bl	8003082 <readyUserInterface>
					testSamples++;
 8003c70:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8003c74:	3301      	adds	r3, #1
 8003c76:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					if(testSamples == ptr_result->resultTestAcquiredSamples) testSamples = 0;
 8003c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d102      	bne.n	8003c8c <initStateMachine+0x888>
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					subMenuIniciar->menuState = getNextSub(RESULTS);
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f001 f843 	bl	8004d18 <getNextSub>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	70da      	strb	r2, [r3, #3]
 8003c9a:	e0b9      	b.n	8003e10 <initStateMachine+0xa0c>
				}

				else if(key == PARAR)
 8003c9c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003ca0:	2b50      	cmp	r3, #80	; 0x50
 8003ca2:	f040 80b5 	bne.w	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 8003ca6:	f001 fe27 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003caa:	f107 030f 	add.w	r3, r7, #15
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff f9e7 	bl	8003082 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003cb4:	200b      	movs	r0, #11
 8003cb6:	f001 f82f 	bl	8004d18 <getNextSub>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	70da      	strb	r2, [r3, #3]
                }

            break;
 8003cc2:	e0a5      	b.n	8003e10 <initStateMachine+0xa0c>

            case SAVE_DATA:
                updateUserMsg(0,0,saveUserMsg,&displayUpdateStatus);
 8003cc4:	4b5e      	ldr	r3, [pc, #376]	; (8003e40 <initStateMachine+0xa3c>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f107 030f 	add.w	r3, r7, #15
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7ff f9bc 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003cd4:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <initStateMachine+0xa40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2102      	movs	r1, #2
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f000 f919 	bl	8003f14 <HW_PRINT_DATA>
                HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003ce2:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <initStateMachine+0xa44>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2103      	movs	r1, #3
 8003cea:	2000      	movs	r0, #0
 8003cec:	f000 f912 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003cf0:	f001 fdf6 	bl	80058e0 <getKeyPressed>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == AVANCAR)
 8003cfa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003cfe:	2b41      	cmp	r3, #65	; 0x41
 8003d00:	d10e      	bne.n	8003d20 <initStateMachine+0x91c>
                {
                	resetKeyPressed();
 8003d02:	f001 fdf9 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003d06:	f107 030f 	add.w	r3, r7, #15
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff f9b9 	bl	8003082 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(CANCEL_SAVE);
 8003d10:	200c      	movs	r0, #12
 8003d12:	f001 f801 	bl	8004d18 <getNextSub>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	70da      	strb	r2, [r3, #3]
 8003d1e:	e077      	b.n	8003e10 <initStateMachine+0xa0c>
                }
                else if(key == CONFIRMAR)
 8003d20:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003d24:	2b43      	cmp	r3, #67	; 0x43
 8003d26:	d173      	bne.n	8003e10 <initStateMachine+0xa0c>
                {
                	resetKeyPressed();
 8003d28:	f001 fde6 	bl	80058f8 <resetKeyPressed>
                	save_SD_card(ptr_result,indexTest);
 8003d2c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003d30:	4619      	mov	r1, r3
 8003d32:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003d34:	f000 f8bb 	bl	8003eae <save_SD_card>
//                    save_data(indexTest);
//                	HW_EXT_MEMORY_WRITE("adelson","SAVE_DATA.txt");
                    readyUserInterface(&displayUpdateStatus);
 8003d38:	f107 030f 	add.w	r3, r7, #15
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f9a0 	bl	8003082 <readyUserInterface>
                    updateUserMsg(0,0,savedUserMsg,&displayUpdateStatus);
 8003d42:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <initStateMachine+0xa48>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	f107 030f 	add.w	r3, r7, #15
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7ff f97d 	bl	800304c <updateUserMsg>
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003d52:	2001      	movs	r0, #1
 8003d54:	f000 ffe0 	bl	8004d18 <getNextSub>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5e:	70da      	strb	r2, [r3, #3]
                    testSamples = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  				                      readyUserInterface(&displayUpdateStatus);
 8003d66:	f107 030f 	add.w	r3, r7, #15
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f989 	bl	8003082 <readyUserInterface>
                    key = MENU;
 8003d70:	234d      	movs	r3, #77	; 0x4d
 8003d72:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            break;
 8003d76:	e04b      	b.n	8003e10 <initStateMachine+0xa0c>

            case CANCEL_SAVE:
                updateUserMsg(0,0,cancelUserMsg,&displayUpdateStatus);
 8003d78:	4b35      	ldr	r3, [pc, #212]	; (8003e50 <initStateMachine+0xa4c>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f107 030f 	add.w	r3, r7, #15
 8003d80:	2100      	movs	r1, #0
 8003d82:	2000      	movs	r0, #0
 8003d84:	f7ff f962 	bl	800304c <updateUserMsg>
                HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <initStateMachine+0xa40>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2102      	movs	r1, #2
 8003d90:	2000      	movs	r0, #0
 8003d92:	f000 f8bf 	bl	8003f14 <HW_PRINT_DATA>
				HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <initStateMachine+0xa44>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2103      	movs	r1, #3
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f000 f8b8 	bl	8003f14 <HW_PRINT_DATA>
                key = getKeyPressed();
 8003da4:	f001 fd9c 	bl	80058e0 <getKeyPressed>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

                if(key == AVANCAR)
 8003dae:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003db2:	2b41      	cmp	r3, #65	; 0x41
 8003db4:	d10e      	bne.n	8003dd4 <initStateMachine+0x9d0>
                {
                	resetKeyPressed();
 8003db6:	f001 fd9f 	bl	80058f8 <resetKeyPressed>
                    readyUserInterface(&displayUpdateStatus);
 8003dba:	f107 030f 	add.w	r3, r7, #15
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f95f 	bl	8003082 <readyUserInterface>
                    subMenuIniciar->menuState = getNextSub(SAVE_DATA);
 8003dc4:	200b      	movs	r0, #11
 8003dc6:	f000 ffa7 	bl	8004d18 <getNextSub>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd0:	70da      	strb	r2, [r3, #3]
 8003dd2:	e01c      	b.n	8003e0e <initStateMachine+0xa0a>
                }
                else if(key == CONFIRMAR)
 8003dd4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003dd8:	2b43      	cmp	r3, #67	; 0x43
 8003dda:	d118      	bne.n	8003e0e <initStateMachine+0xa0a>
                {
                	resetKeyPressed();
 8003ddc:	f001 fd8c 	bl	80058f8 <resetKeyPressed>
                    //subMenuIniciar->menuSelect = setSelectSub(&subMenuIniciar->menuState);
                    testSamples = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                    indexTest++;
 8003de6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003dea:	3301      	adds	r3, #1
 8003dec:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    //
                    subMenuIniciar->menuState = getNextSub(COMM_OFF);
 8003df0:	2001      	movs	r0, #1
 8003df2:	f000 ff91 	bl	8004d18 <getNextSub>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	70da      	strb	r2, [r3, #3]
                    readyUserInterface(&displayUpdateStatus);
 8003dfe:	f107 030f 	add.w	r3, r7, #15
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff f93d 	bl	8003082 <readyUserInterface>
                    key = MENU;
 8003e08:	234d      	movs	r3, #77	; 0x4d
 8003e0a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            break;
 8003e0e:	bf00      	nop
    while(key != MENU)
 8003e10:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003e14:	2b4d      	cmp	r3, #77	; 0x4d
 8003e16:	f47f ab13 	bne.w	8003440 <initStateMachine+0x3c>
        }
    }
}
 8003e1a:	bf00      	nop
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	377c      	adds	r7, #124	; 0x7c
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	20000040 	.word	0x20000040
 8003e28:	20000044 	.word	0x20000044
 8003e2c:	08010394 	.word	0x08010394
 8003e30:	20000050 	.word	0x20000050
 8003e34:	08010398 	.word	0x08010398
 8003e38:	0801039c 	.word	0x0801039c
 8003e3c:	200000d8 	.word	0x200000d8
 8003e40:	20000058 	.word	0x20000058
 8003e44:	200000c4 	.word	0x200000c4
 8003e48:	200000d0 	.word	0x200000d0
 8003e4c:	2000005c 	.word	0x2000005c
 8003e50:	20000060 	.word	0x20000060

08003e54 <startTM2>:
    unsigned char timeout;
    struct samples Measurement[MEASUREMENT_SIZE];
};

void startTM2(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
        SET_HW_TIMER2();
 8003e58:	f000 ff7e 	bl	8004d58 <SET_HW_TIMER2>
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <stopTM2>:

void stopTM2(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    RESET_HW_TIMER2();
 8003e64:	f000 ff9a 	bl	8004d9c <RESET_HW_TIMER2>
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <startTM3>:

void startTM3(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
        SET_HW_TIMER3();
 8003e70:	f000 ffb2 	bl	8004dd8 <SET_HW_TIMER3>
//        resetTimer3Variable();
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <stopTM3>:

void stopTM3(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
    RESET_HW_TIMER3();
 8003e7c:	f000 ffce 	bl	8004e1c <RESET_HW_TIMER3>
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <eraseDataDisplay>:


void eraseDataDisplay()
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
    HW_ERASE_DATA();
 8003e88:	f000 f85e 	bl	8003f48 <HW_ERASE_DATA>
}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <homeDataDisplay>:

void homeDataDisplay(unsigned char* appName,unsigned char* companyName,unsigned char* appVersion)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
//    printf("%s\n",appName);
//    printf("%s\n",companyName);
//    printf("%s\n",appVersion);
    HW_HOME_DISP(appName,companyName,appVersion);
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f879 	bl	8003f98 <HW_HOME_DISP>

}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <save_SD_card>:
//    fclose(ptr_file);
    return ptr_loadStringResult;
}

void save_SD_card(unsigned char* dataToSave, unsigned char numTeste)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
	numTeste++;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	70fb      	strb	r3, [r7, #3]
    unsigned char* ptr_saveName = getArqName(numTeste);
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fc1c 	bl	8004700 <getArqName>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]
//    struct results* saveStruct = dataToSave;
//    unsigned char sampleToSave = 0;
    HW_EXT_MEMORY_WRITE(dataToSave,ptr_saveName);
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fb5e 	bl	8004590 <HW_EXT_MEMORY_WRITE>
//    }
//    fclose(ptr_file);



}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <startCOMM>:

void startCOMM()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
//    printf("SET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003ee2:	f001 fd15 	bl	8005910 <getUARTInstance>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	607b      	str	r3, [r7, #4]
	SET_HW_UART(uartInstance);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 ffb2 	bl	8004e54 <SET_HW_UART>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <stopCOMM>:

void stopCOMM()
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
//    printf("RESET_HW_UART2()\n");
	unsigned char* uartInstance = getUARTInstance();
 8003efe:	f001 fd07 	bl	8005910 <getUARTInstance>
 8003f02:	4603      	mov	r3, r0
 8003f04:	607b      	str	r3, [r7, #4]
	RESET_HW_UART(uartInstance);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 ffb9 	bl	8004e7e <RESET_HW_UART>
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HW_PRINT_DATA>:

static LiquidCrystal lcdDisplay;


unsigned char HW_PRINT_DATA(unsigned char col, unsigned char linha,unsigned char* userData)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	603a      	str	r2, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
 8003f20:	460b      	mov	r3, r1
 8003f22:	71bb      	strb	r3, [r7, #6]
    setCursor(&lcdDisplay, col, linha);
 8003f24:	79ba      	ldrb	r2, [r7, #6]
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4806      	ldr	r0, [pc, #24]	; (8003f44 <HW_PRINT_DATA+0x30>)
 8003f2c:	f000 fb01 	bl	8004532 <setCursor>
//    HAL_Delay(10);
    print(&lcdDisplay,userData);
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	4804      	ldr	r0, [pc, #16]	; (8003f44 <HW_PRINT_DATA+0x30>)
 8003f34:	f000 f95a 	bl	80041ec <print>
}
 8003f38:	bf00      	nop
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200005b4 	.word	0x200005b4

08003f48 <HW_ERASE_DATA>:

unsigned char HW_ERASE_DATA()
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
	clear(&lcdDisplay);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <HW_ERASE_DATA+0x10>)
 8003f4e:	f000 f96e 	bl	800422e <clear>
}
 8003f52:	bf00      	nop
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	200005b4 	.word	0x200005b4

08003f5c <HW_UPDATE_DATA>:

unsigned char HW_UPDATE_DATA(unsigned char position, unsigned char linha)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	460a      	mov	r2, r1
 8003f66:	71fb      	strb	r3, [r7, #7]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71bb      	strb	r3, [r7, #6]
	setCursor(&lcdDisplay, position, linha); /***/
 8003f6c:	79ba      	ldrb	r2, [r7, #6]
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	4619      	mov	r1, r3
 8003f72:	4808      	ldr	r0, [pc, #32]	; (8003f94 <HW_UPDATE_DATA+0x38>)
 8003f74:	f000 fadd 	bl	8004532 <setCursor>
	cursor(&lcdDisplay);
 8003f78:	4806      	ldr	r0, [pc, #24]	; (8003f94 <HW_UPDATE_DATA+0x38>)
 8003f7a:	f000 f997 	bl	80042ac <cursor>
	HAL_Delay(175);
 8003f7e:	20af      	movs	r0, #175	; 0xaf
 8003f80:	f002 fd02 	bl	8006988 <HAL_Delay>
	noCursor(&lcdDisplay);
 8003f84:	4803      	ldr	r0, [pc, #12]	; (8003f94 <HW_UPDATE_DATA+0x38>)
 8003f86:	f000 f979 	bl	800427c <noCursor>
}
 8003f8a:	bf00      	nop
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	200005b4 	.word	0x200005b4

08003f98 <HW_HOME_DISP>:

unsigned char HW_HOME_DISP(unsigned char* appName, unsigned char* companyName, unsigned char* appVersion)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
	begin(&lcdDisplay,16,4,LCD_5x10DOTS);
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	2110      	movs	r1, #16
 8003faa:	4812      	ldr	r0, [pc, #72]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fac:	f000 f824 	bl	8003ff8 <begin>
	setCursor(&lcdDisplay, 0, 0);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	480f      	ldr	r0, [pc, #60]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fb6:	f000 fabc 	bl	8004532 <setCursor>
	print(&lcdDisplay,appName);
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	480d      	ldr	r0, [pc, #52]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fbe:	f000 f915 	bl	80041ec <print>
	setCursor(&lcdDisplay, 0, 1);
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	480b      	ldr	r0, [pc, #44]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fc8:	f000 fab3 	bl	8004532 <setCursor>
	print(&lcdDisplay,companyName);
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4809      	ldr	r0, [pc, #36]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fd0:	f000 f90c 	bl	80041ec <print>
	setCursor(&lcdDisplay, 0, 3);
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4806      	ldr	r0, [pc, #24]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fda:	f000 faaa 	bl	8004532 <setCursor>
	print(&lcdDisplay,appVersion);
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fe2:	f000 f903 	bl	80041ec <print>
	return &(lcdDisplay);
 8003fe6:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HW_HOME_DISP+0x5c>)
 8003fe8:	b2db      	uxtb	r3, r3
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200005b4 	.word	0x200005b4

08003ff8 <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4603      	mov	r3, r0
 8004008:	70fb      	strb	r3, [r7, #3]
 800400a:	460b      	mov	r3, r1
 800400c:	70bb      	strb	r3, [r7, #2]
 800400e:	4613      	mov	r3, r2
 8004010:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8004012:	f107 0308 	add.w	r3, r7, #8
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	461a      	mov	r2, r3
 8004020:	f107 0308 	add.w	r3, r7, #8
 8004024:	cb03      	ldmia	r3!, {r0, r1}
 8004026:	6010      	str	r0, [r2, #0]
 8004028:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800402a:	2200      	movs	r2, #0
 800402c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004030:	486c      	ldr	r0, [pc, #432]	; (80041e4 <begin+0x1ec>)
 8004032:	f003 fb65 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8004036:	2200      	movs	r2, #0
 8004038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800403c:	4869      	ldr	r0, [pc, #420]	; (80041e4 <begin+0x1ec>)
 800403e:	f003 fb5f 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8004042:	2200      	movs	r2, #0
 8004044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004048:	4866      	ldr	r0, [pc, #408]	; (80041e4 <begin+0x1ec>)
 800404a:	f003 fb59 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800404e:	2200      	movs	r2, #0
 8004050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004054:	4863      	ldr	r0, [pc, #396]	; (80041e4 <begin+0x1ec>)
 8004056:	f003 fb53 	bl	8007700 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800405a:	2200      	movs	r2, #0
 800405c:	2108      	movs	r1, #8
 800405e:	4861      	ldr	r0, [pc, #388]	; (80041e4 <begin+0x1ec>)
 8004060:	f003 fb4e 	bl	8007700 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8004064:	2200      	movs	r2, #0
 8004066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800406a:	485f      	ldr	r0, [pc, #380]	; (80041e8 <begin+0x1f0>)
 800406c:	f003 fb48 	bl	8007700 <HAL_GPIO_WritePin>

	#if defined(LCD_8BITMODE)
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,GPIO_PIN_RESET);
 8004070:	2200      	movs	r2, #0
 8004072:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004076:	485c      	ldr	r0, [pc, #368]	; (80041e8 <begin+0x1f0>)
 8004078:	f003 fb42 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,GPIO_PIN_RESET);
 800407c:	2200      	movs	r2, #0
 800407e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004082:	4859      	ldr	r0, [pc, #356]	; (80041e8 <begin+0x1f0>)
 8004084:	f003 fb3c 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
 8004088:	2200      	movs	r2, #0
 800408a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800408e:	4856      	ldr	r0, [pc, #344]	; (80041e8 <begin+0x1f0>)
 8004090:	f003 fb36 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800409a:	4853      	ldr	r0, [pc, #332]	; (80041e8 <begin+0x1f0>)
 800409c:	f003 fb30 	bl	8007700 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 80040a0:	2200      	movs	r2, #0
 80040a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040a6:	4850      	ldr	r0, [pc, #320]	; (80041e8 <begin+0x1f0>)
 80040a8:	f003 fb2a 	bl	8007700 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 80040ac:	78bb      	ldrb	r3, [r7, #2]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d906      	bls.n	80040c0 <begin+0xc8>
		lcd->_displayfunction |= LCD_2LINE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	f043 0308 	orr.w	r3, r3, #8
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	78ba      	ldrb	r2, [r7, #2]
 80040c4:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	3340      	adds	r3, #64	; 0x40
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	2240      	movs	r2, #64	; 0x40
 80040d2:	2100      	movs	r1, #0
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fa0f 	bl	80044f8 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80040da:	787b      	ldrb	r3, [r7, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <begin+0xfc>
 80040e0:	78bb      	ldrb	r3, [r7, #2]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d106      	bne.n	80040f4 <begin+0xfc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	f043 0304 	orr.w	r3, r3, #4
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 80040f4:	2032      	movs	r0, #50	; 0x32
 80040f6:	f002 fc47 	bl	8006988 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80040fa:	2200      	movs	r2, #0
 80040fc:	2108      	movs	r1, #8
 80040fe:	4839      	ldr	r0, [pc, #228]	; (80041e4 <begin+0x1ec>)
 8004100:	f003 fafe 	bl	8007700 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800410a:	4837      	ldr	r0, [pc, #220]	; (80041e8 <begin+0x1f0>)
 800410c:	f003 faf8 	bl	8007700 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004116:	4834      	ldr	r0, [pc, #208]	; (80041e8 <begin+0x1f0>)
 8004118:	f003 faf2 	bl	8007700 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <begin+0x158>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8004124:	2003      	movs	r0, #3
 8004126:	f000 f931 	bl	800438c <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 800412a:	2005      	movs	r0, #5
 800412c:	f002 fc2c 	bl	8006988 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 8004130:	2003      	movs	r0, #3
 8004132:	f000 f92b 	bl	800438c <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8004136:	2005      	movs	r0, #5
 8004138:	f002 fc26 	bl	8006988 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 800413c:	2003      	movs	r0, #3
 800413e:	f000 f925 	bl	800438c <write4bits>
		HAL_Delay(5);
 8004142:	2005      	movs	r0, #5
 8004144:	f002 fc20 	bl	8006988 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8004148:	2002      	movs	r0, #2
 800414a:	f000 f91f 	bl	800438c <write4bits>
 800414e:	e023      	b.n	8004198 <begin+0x1a0>

		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 23, pg 45 

		// Envia sequência de comando
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	f043 0320 	orr.w	r3, r3, #32
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9bb 	bl	80044d8 <command>
		HAL_Delay(6);  // wait more than 4.1 ms
 8004162:	2006      	movs	r0, #6
 8004164:	f002 fc10 	bl	8006988 <HAL_Delay>

		// Segundo envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f043 0320 	orr.w	r3, r3, #32
 8004170:	b2db      	uxtb	r3, r3
 8004172:	4619      	mov	r1, r3
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f9af 	bl	80044d8 <command>
		HAL_Delay(1);
 800417a:	2001      	movs	r0, #1
 800417c:	f002 fc04 	bl	8006988 <HAL_Delay>

		// Terceiro envio
		command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	b2db      	uxtb	r3, r3
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f9a3 	bl	80044d8 <command>
		HAL_Delay(1);
 8004192:	2001      	movs	r0, #1
 8004194:	f002 fbf8 	bl	8006988 <HAL_Delay>
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f043 0320 	orr.w	r3, r3, #32
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f997 	bl	80044d8 <command>
    HAL_Delay(1);
 80041aa:	2001      	movs	r0, #1
 80041ac:	f002 fbec 	bl	8006988 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2204      	movs	r2, #4
 80041b4:	705a      	strb	r2, [r3, #1]
    display(lcd);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f848 	bl	800424c <display>

    // Limpa display
    clear(lcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f836 	bl	800422e <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	789b      	ldrb	r3, [r3, #2]
 80041cc:	f043 0304 	orr.w	r3, r3, #4
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f97f 	bl	80044d8 <command>
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020000 	.word	0x40020000

080041ec <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 80041f6:	6838      	ldr	r0, [r7, #0]
 80041f8:	f7fb fff2 	bl	80001e0 <strlen>
 80041fc:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
 8004202:	e00b      	b.n	800421c <print+0x30>
		write(lcd ,*(value+i));
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4413      	add	r3, r2
 800420a:	f993 3000 	ldrsb.w	r3, [r3]
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f863 	bl	80042dc <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3301      	adds	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	d8ef      	bhi.n	8004204 <print+0x18>
	}
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8004236:	2101      	movs	r1, #1
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f94d 	bl	80044d8 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 800423e:	2002      	movs	r0, #2
 8004240:	f002 fba2 	bl	8006988 <HAL_Delay>
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	b2da      	uxtb	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	f043 0308 	orr.w	r3, r3, #8
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f932 	bl	80044d8 <command>
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <noCursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void noCursor(LiquidCrystal *lcd){
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol &= ~LCD_CURSORON;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	f023 0302 	bic.w	r3, r3, #2
 800428c:	b2da      	uxtb	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	f043 0308 	orr.w	r3, r3, #8
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f91a 	bl	80044d8 <command>
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <cursor>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void cursor(LiquidCrystal *lcd){
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	lcd->_displaycontrol |= LCD_CURSORON;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	705a      	strb	r2, [r3, #1]
	command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	f043 0308 	orr.w	r3, r3, #8
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f902 	bl	80044d8 <command>
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2201      	movs	r2, #1
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f804 	bl	80042fc <send>
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
 8004308:	4613      	mov	r3, r2
 800430a:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 800430c:	78bb      	ldrb	r3, [r7, #2]
 800430e:	461a      	mov	r2, r3
 8004310:	2108      	movs	r1, #8
 8004312:	4811      	ldr	r0, [pc, #68]	; (8004358 <send+0x5c>)
 8004314:	f003 f9f4 	bl	8007700 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800431e:	480f      	ldr	r0, [pc, #60]	; (800435c <send+0x60>)
 8004320:	f003 f9ee 	bl	8007700 <HAL_GPIO_WritePin>
	#endif

	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <send+0x3e>
	    write8bits(value);
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f866 	bl	8004404 <write8bits>
	    write4bits(value);
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 8004338:	e009      	b.n	800434e <send+0x52>
	    write4bits(value>>4);
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	b2db      	uxtb	r3, r3
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f823 	bl	800438c <write4bits>
	    write4bits(value);
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f81f 	bl	800438c <write4bits>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40020400 	.word	0x40020400
 800435c:	40020000 	.word	0x40020000

08004360 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8004364:	2201      	movs	r2, #1
 8004366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800436a:	4807      	ldr	r0, [pc, #28]	; (8004388 <pulseEnable+0x28>)
 800436c:	f003 f9c8 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004370:	2001      	movs	r0, #1
 8004372:	f002 fb09 	bl	8006988 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8004376:	2200      	movs	r2, #0
 8004378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800437c:	4802      	ldr	r0, [pc, #8]	; (8004388 <pulseEnable+0x28>)
 800437e:	f003 f9bf 	bl	8007700 <HAL_GPIO_WritePin>
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40020000 	.word	0x40020000

0800438c <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043a4:	4816      	ldr	r0, [pc, #88]	; (8004400 <write4bits+0x74>)
 80043a6:	f003 f9ab 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043bc:	4810      	ldr	r0, [pc, #64]	; (8004400 <write4bits+0x74>)
 80043be:	f003 f99f 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043d4:	480a      	ldr	r0, [pc, #40]	; (8004400 <write4bits+0x74>)
 80043d6:	f003 f993 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	08db      	lsrs	r3, r3, #3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043ec:	4804      	ldr	r0, [pc, #16]	; (8004400 <write4bits+0x74>)
 80043ee:	f003 f987 	bl	8007700 <HAL_GPIO_WritePin>

	pulseEnable();
 80043f2:	f7ff ffb5 	bl	8004360 <pulseEnable>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40020400 	.word	0x40020400

08004404 <write8bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write8bits(uint8_t value){
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,(value >> 0) & 0x01);
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800441c:	482c      	ldr	r0, [pc, #176]	; (80044d0 <write8bits+0xcc>)
 800441e:	f003 f96f 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,(value >> 1) & 0x01);
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004434:	4826      	ldr	r0, [pc, #152]	; (80044d0 <write8bits+0xcc>)
 8004436:	f003 f963 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,(value >> 2) & 0x01);
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800444c:	4820      	ldr	r0, [pc, #128]	; (80044d0 <write8bits+0xcc>)
 800444e:	f003 f957 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,(value >> 3) & 0x01);
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004464:	481a      	ldr	r0, [pc, #104]	; (80044d0 <write8bits+0xcc>)
 8004466:	f003 f94b 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 4) & 0x01);
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800447c:	4815      	ldr	r0, [pc, #84]	; (80044d4 <write8bits+0xd0>)
 800447e:	f003 f93f 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 5) & 0x01);
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004494:	480f      	ldr	r0, [pc, #60]	; (80044d4 <write8bits+0xd0>)
 8004496:	f003 f933 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 6) & 0x01);
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044ac:	4809      	ldr	r0, [pc, #36]	; (80044d4 <write8bits+0xd0>)
 80044ae:	f003 f927 	bl	8007700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 7) & 0x01);
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	09db      	lsrs	r3, r3, #7
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044be:	4805      	ldr	r0, [pc, #20]	; (80044d4 <write8bits+0xd0>)
 80044c0:	f003 f91e 	bl	8007700 <HAL_GPIO_WritePin>

	pulseEnable();
 80044c4:	f7ff ff4c 	bl	8004360 <pulseEnable>

}
 80044c8:	bf00      	nop
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40020000 	.word	0x40020000
 80044d4:	40020400 	.word	0x40020400

080044d8 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	2200      	movs	r2, #0
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff ff06 	bl	80042fc <send>
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	71da      	strb	r2, [r3, #7]
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	70fb      	strb	r3, [r7, #3]
 800453e:	4613      	mov	r3, r2
 8004540:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 8004542:	2304      	movs	r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8004546:	78bb      	ldrb	r3, [r7, #2]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	429a      	cmp	r2, r3
 800454c:	d803      	bhi.n	8004556 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	78db      	ldrb	r3, [r3, #3]
 800455a:	78ba      	ldrb	r2, [r7, #2]
 800455c:	429a      	cmp	r2, r3
 800455e:	d303      	bcc.n	8004568 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	78db      	ldrb	r3, [r3, #3]
 8004564:	3b01      	subs	r3, #1
 8004566:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8004568:	78bb      	ldrb	r3, [r7, #2]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	791a      	ldrb	r2, [r3, #4]
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	4413      	add	r3, r2
 8004574:	b2db      	uxtb	r3, r3
 8004576:	b25b      	sxtb	r3, r3
 8004578:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800457c:	b25b      	sxtb	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ffa8 	bl	80044d8 <command>
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HW_EXT_MEMORY_WRITE>:
    f_close(&fil);
    return loadDataHW;
}

unsigned char HW_EXT_MEMORY_WRITE(unsigned char* saveString, unsigned char* nameString)
{
 8004590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004592:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8004596:	af04      	add	r7, sp, #16
 8004598:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800459c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80045a0:	6018      	str	r0, [r3, #0]
 80045a2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80045a6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80045aa:	6019      	str	r1, [r3, #0]
	unsigned char sampleToSave = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	struct results* saveStruct = saveString;
 80045b2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80045b6:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	FRESULT result;
	FIL fil;
	FATFS fs;
	result = f_mount(&fs," ", 0);
 80045c0:	f107 0308 	add.w	r3, r7, #8
 80045c4:	2200      	movs	r2, #0
 80045c6:	4949      	ldr	r1, [pc, #292]	; (80046ec <HW_EXT_MEMORY_WRITE+0x15c>)
 80045c8:	4618      	mov	r0, r3
 80045ca:	f008 facf 	bl	800cb6c <f_mount>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
//	unsigned char* a = HW_EXT_MEMORY_MAIN();
//	HW_EXT_MEMORY_INIT(a);
    HAL_Delay(500);
 80045d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045d8:	f002 f9d6 	bl	8006988 <HAL_Delay>
    result = f_open(&fil, nameString, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80045dc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80045e0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80045e4:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 80045e8:	2213      	movs	r2, #19
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	f008 fb04 	bl	800cbf8 <f_open>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	{

//		printf( "error ao abrir\n");
	}
	else{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80045f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045fa:	483d      	ldr	r0, [pc, #244]	; (80046f0 <HW_EXT_MEMORY_WRITE+0x160>)
 80045fc:	f003 f899 	bl	8007732 <HAL_GPIO_TogglePin>
//		printf( "abriu save_SD_card\n");
		f_puts("Amostra \tAltura(cm) \tPotência(W) \tTvoo(ms) \tTsolo(ms)\n", &fil);
 8004600:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8004604:	4619      	mov	r1, r3
 8004606:	483b      	ldr	r0, [pc, #236]	; (80046f4 <HW_EXT_MEMORY_WRITE+0x164>)
 8004608:	f008 ff48 	bl	800d49c <f_puts>
		HAL_Delay(10);
 800460c:	200a      	movs	r0, #10
 800460e:	f002 f9bb 	bl	8006988 <HAL_Delay>
		for(sampleToSave = 0;sampleToSave<saveStruct->resultTestAcquiredSamples;sampleToSave++)
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 8004618:	e053      	b.n	80046c2 <HW_EXT_MEMORY_WRITE+0x132>
		{
//			result = f_printf(&fil,"%d",10);
			f_printf(&fil,"%d \t %d \t %d \t %d \t %d",
				   saveStruct->Measurement[sampleToSave].sampleNum,
 800461a:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 800461e:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	440b      	add	r3, r1
 800462c:	3304      	adds	r3, #4
 800462e:	781b      	ldrb	r3, [r3, #0]
			f_printf(&fil,"%d \t %d \t %d \t %d \t %d",
 8004630:	461e      	mov	r6, r3
 8004632:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 8004636:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	440b      	add	r3, r1
 8004644:	3314      	adds	r3, #20
 8004646:	681d      	ldr	r5, [r3, #0]
 8004648:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 800464c:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	440b      	add	r3, r1
 800465a:	3318      	adds	r3, #24
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 8004662:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4403      	add	r3, r0
 8004670:	3308      	adds	r3, #8
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 8004678:	f8d7 4470 	ldr.w	r4, [r7, #1136]	; 0x470
 800467c:	4613      	mov	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4413      	add	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4423      	add	r3, r4
 8004686:	330c      	adds	r3, #12
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f507 740f 	add.w	r4, r7, #572	; 0x23c
 800468e:	9302      	str	r3, [sp, #8]
 8004690:	9001      	str	r0, [sp, #4]
 8004692:	9100      	str	r1, [sp, #0]
 8004694:	462b      	mov	r3, r5
 8004696:	4632      	mov	r2, r6
 8004698:	4917      	ldr	r1, [pc, #92]	; (80046f8 <HW_EXT_MEMORY_WRITE+0x168>)
 800469a:	4620      	mov	r0, r4
 800469c:	f008 ff22 	bl	800d4e4 <f_printf>
				   saveStruct->Measurement[sampleToSave].alturaSalto,
				   saveStruct->Measurement[sampleToSave].potenciaSalto,
				   saveStruct->Measurement[sampleToSave].uiVooTime,
				   saveStruct->Measurement[sampleToSave].uiSoloTime);
			HAL_Delay(100);
 80046a0:	2064      	movs	r0, #100	; 0x64
 80046a2:	f002 f971 	bl	8006988 <HAL_Delay>
			result = f_puts("\n", &fil);
 80046a6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80046aa:	4619      	mov	r1, r3
 80046ac:	4813      	ldr	r0, [pc, #76]	; (80046fc <HW_EXT_MEMORY_WRITE+0x16c>)
 80046ae:	f008 fef5 	bl	800d49c <f_puts>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
		for(sampleToSave = 0;sampleToSave<saveStruct->resultTestAcquiredSamples;sampleToSave++)
 80046b8:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80046bc:	3301      	adds	r3, #1
 80046be:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 80046c2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3a4      	bcc.n	800461a <HW_EXT_MEMORY_WRITE+0x8a>
		}
	}
	result = f_close(&fil);
 80046d0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80046d4:	4618      	mov	r0, r3
 80046d6:	f008 fe40 	bl	800d35a <f_close>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
    return 1;
 80046e0:	2301      	movs	r3, #1
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ec:	080103b0 	.word	0x080103b0
 80046f0:	40020800 	.word	0x40020800
 80046f4:	080103b4 	.word	0x080103b4
 80046f8:	080103ec 	.word	0x080103ec
 80046fc:	08010404 	.word	0x08010404

08004700 <getArqName>:
    return ptr_loadedResults;

}

unsigned char* getArqName(unsigned char numTeste)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
    static unsigned char arqName[15]; //VERIFICAR SE VOU FAZER UM GET NISSO
    sprintf(arqName,"Teste%d.txt",numTeste);
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	461a      	mov	r2, r3
 800470e:	4904      	ldr	r1, [pc, #16]	; (8004720 <getArqName+0x20>)
 8004710:	4804      	ldr	r0, [pc, #16]	; (8004724 <getArqName+0x24>)
 8004712:	f009 fb5b 	bl	800ddcc <siprintf>
    return arqName;
 8004716:	4b03      	ldr	r3, [pc, #12]	; (8004724 <getArqName+0x24>)
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	0801041c 	.word	0x0801041c
 8004724:	200005bc 	.word	0x200005bc

08004728 <readingSensor>:
	userState = state;
	return userState;
}

unsigned char readingSensor()
{
 8004728:	b580      	push	{r7, lr}
 800472a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800472e:	af00      	add	r7, sp, #0
	struct dataInsert* configStruct = getUserConfigStruct();
 8004730:	f7fd fd58 	bl	80021e4 <getUserConfigStruct>
 8004734:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
	unsigned int* ptr_measurementContatoTime;
	unsigned int* ptr_measurementVooTime;
	unsigned int* ptr_totalTime;
	unsigned char* ptr_samples;
	unsigned char* ptr_sensorFlag;
	unsigned char count = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	unsigned char userSelectTapete = FALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
	unsigned int transitionStateTime = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	unsigned char key = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	unsigned long int intervalSaltos = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	unsigned long int intervalSeries = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	unsigned char numSaltos = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
	unsigned char numSeries = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
	unsigned char readStatus = OK;
 8004768:	2300      	movs	r3, #0
 800476a:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204



	ptr_samples = getSamplesCount();
 800476e:	f001 f8a1 	bl	80058b4 <getSamplesCount>
 8004772:	4603      	mov	r3, r0
 8004774:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	ptr_sensorFlag = getSensorFlag();
 8004778:	f001 f8e8 	bl	800594c <getSensorFlag>
 800477c:	4603      	mov	r3, r0
 800477e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	ptr_measurementTotalTime = getTotalTime();
 8004782:	f001 f86b 	bl	800585c <getTotalTime>
 8004786:	4603      	mov	r3, r0
 8004788:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	ptr_measurementContatoTime = getTimeSolo();
 800478c:	f001 f87a 	bl	8005884 <getTimeSolo>
 8004790:	4603      	mov	r3, r0
 8004792:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	ptr_measurementVooTime = getTimeVoo();
 8004796:	f001 f86b 	bl	8005870 <getTimeVoo>
 800479a:	4603      	mov	r3, r0
 800479c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	ptr_totalTime = getTimer3Variable();
 80047a0:	f001 f8de 	bl	8005960 <getTimer3Variable>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	unsigned char indexTest = getResultTestNumber();
 80047aa:	f7fd fda7 	bl	80022fc <getResultTestNumber>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
	unsigned long int userTime = getUserTime();
 80047b4:	f7fd fc46 	bl	8002044 <getUserTime>
 80047b8:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
	unsigned long int userIntervalSeries = getUserIntervalSeries();
 80047bc:	f7fd fc72 	bl	80020a4 <getUserIntervalSeries>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	unsigned char userNumSeries = getUserNumSeries();
 80047c6:	f7fd fc61 	bl	800208c <getUserNumSeries>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
	unsigned char userTapete = getUserSelectTapete();
 80047d0:	f7fd fc74 	bl	80020bc <getUserSelectTapete>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
	unsigned long int userIntervalSaltos = getUserIntervalSaltos();
 80047da:	f7fd fc4b 	bl	8002074 <getUserIntervalSaltos>
 80047de:	4603      	mov	r3, r0
 80047e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	unsigned char userNumSaltos = getUserNumSaltos();
 80047e4:	f7fd fc3a 	bl	800205c <getUserNumSaltos>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
	unsigned int timeMin = getTimeAltMin();
 80047ee:	f7fd fd03 	bl	80021f8 <getTimeAltMin>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	unsigned int timeMax = getTimeAltMax();
 80047f8:	f7fd fd0a 	bl	8002210 <getTimeAltMax>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
//	configStruct->userIntervalSaltos = userIntervalSaltos;
//	configStruct->userMass = massaCorp;


	//
	key = getKeyPressed();
 8004802:	f001 f86d 	bl	80058e0 <getKeyPressed>
 8004806:	4603      	mov	r3, r0
 8004808:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

//	while(key != PARAR && totalTime != configStruct->userTime && numSaltos != configStruct->userNumSaltos) //WHILE COMPLETO
//	while(key != PARAR && numSeries != configStruct->userNumSeries && *ptr_totalTime != configStruct->userTime)
	while(key != PARAR && numSeries != configStruct->userNumSeries)
 800480c:	bf00      	nop
 800480e:	e133      	b.n	8004a78 <readingSensor+0x350>
	{
		key = getKeyPressed();
 8004810:	f001 f866 	bl	80058e0 <getKeyPressed>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		switch(userState)
 800481a:	4ba1      	ldr	r3, [pc, #644]	; (8004aa0 <readingSensor+0x378>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	3b32      	subs	r3, #50	; 0x32
 8004820:	2b05      	cmp	r3, #5
 8004822:	f200 8129 	bhi.w	8004a78 <readingSensor+0x350>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <readingSensor+0x104>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004845 	.word	0x08004845
 8004830:	08004895 	.word	0x08004895
 8004834:	08004927 	.word	0x08004927
 8004838:	08004a79 	.word	0x08004a79
 800483c:	08004a79 	.word	0x08004a79
 8004840:	08004a45 	.word	0x08004a45
		{
			case REPOUSO:
				if(*ptr_sensorFlag == 0 && configStruct->userSelectTapete == FALSE) //INICIO FORA DO TAPETE
 8004844:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10e      	bne.n	800486c <readingSensor+0x144>
 800484e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004852:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004856:	2b00      	cmp	r3, #0
 8004858:	d108      	bne.n	800486c <readingSensor+0x144>
				{
					userState = CONTATO;
 800485a:	4b91      	ldr	r3, [pc, #580]	; (8004aa0 <readingSensor+0x378>)
 800485c:	2233      	movs	r2, #51	; 0x33
 800485e:	701a      	strb	r2, [r3, #0]
					transitionStateTime = *ptr_totalTime;
 8004860:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800486a:	e012      	b.n	8004892 <readingSensor+0x16a>
				}
				else if(*ptr_sensorFlag == 0 && configStruct->userSelectTapete == TRUE) // INICIO DENTRO DO TAPETE
 800486c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 8100 	bne.w	8004a78 <readingSensor+0x350>
 8004878:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800487c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004880:	2b01      	cmp	r3, #1
 8004882:	f040 80f9 	bne.w	8004a78 <readingSensor+0x350>
				{
					userState = CONTATO;
 8004886:	4b86      	ldr	r3, [pc, #536]	; (8004aa0 <readingSensor+0x378>)
 8004888:	2233      	movs	r2, #51	; 0x33
 800488a:	701a      	strb	r2, [r3, #0]
					transitionStateTime=0;
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				}
			break;
 8004892:	e0f1      	b.n	8004a78 <readingSensor+0x350>

			case CONTATO:
				if(*ptr_sensorFlag == 1)
 8004894:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d108      	bne.n	80048b0 <readingSensor+0x188>
				{
					userState = VOO;
 800489e:	4b80      	ldr	r3, [pc, #512]	; (8004aa0 <readingSensor+0x378>)
 80048a0:	2234      	movs	r2, #52	; 0x34
 80048a2:	701a      	strb	r2, [r3, #0]
					transitionStateTime = *ptr_totalTime;
 80048a4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80048ae:	e0e3      	b.n	8004a78 <readingSensor+0x350>
				}
				else
				{
					resetSamplesCount();
 80048b0:	f000 fff2 	bl	8005898 <resetSamplesCount>
					while(*ptr_samples < SAMPLES)
 80048b4:	e01c      	b.n	80048f0 <readingSensor+0x1c8>
					{
						totalTimeArray[*ptr_samples] = *ptr_totalTime;
 80048b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	4619      	mov	r1, r3
 80048be:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	008b      	lsls	r3, r1, #2
 80048c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048ca:	443b      	add	r3, r7
 80048cc:	f843 2ca8 	str.w	r2, [r3, #-168]
						contatoTime[*ptr_samples] = *ptr_totalTime - transitionStateTime;
 80048d0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	008b      	lsls	r3, r1, #2
 80048e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048ea:	443b      	add	r3, r7
 80048ec:	f843 2c80 	str.w	r2, [r3, #-128]
					while(*ptr_samples < SAMPLES)
 80048f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	d9dd      	bls.n	80048b6 <readingSensor+0x18e>
					}

					if(*ptr_samples == SAMPLES)
 80048fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b0a      	cmp	r3, #10
 8004902:	d10c      	bne.n	800491e <readingSensor+0x1f6>
					{
						contatoTimeLocal[count] = contatoTime[SAMPLES-1];
 8004904:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8004908:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 800490c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004910:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						readStatus = OK;
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
					}
					userState = CONTATO;
 800491e:	4b60      	ldr	r3, [pc, #384]	; (8004aa0 <readingSensor+0x378>)
 8004920:	2233      	movs	r2, #51	; 0x33
 8004922:	701a      	strb	r2, [r3, #0]
				}

			break;
 8004924:	e0a8      	b.n	8004a78 <readingSensor+0x350>

			case VOO:
				if(*ptr_sensorFlag  == 0)
 8004926:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d135      	bne.n	800499c <readingSensor+0x274>
				{
					if(readStatus == OK)
 8004930:	f897 3204 	ldrb.w	r3, [r7, #516]	; 0x204
 8004934:	2b00      	cmp	r3, #0
 8004936:	d12d      	bne.n	8004994 <readingSensor+0x26c>
					{
						numSaltos++;
 8004938:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
 800493c:	3301      	adds	r3, #1
 800493e:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
						count++;
 8004942:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8004946:	3301      	adds	r3, #1
 8004948:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
						transitionStateTime = *ptr_totalTime;
 800494c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
						if(numSaltos == configStruct->userNumSaltos)
 8004956:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800495a:	7d1b      	ldrb	r3, [r3, #20]
 800495c:	f897 2206 	ldrb.w	r2, [r7, #518]	; 0x206
 8004960:	429a      	cmp	r2, r3
 8004962:	d113      	bne.n	800498c <readingSensor+0x264>
						{
							numSeries++;
 8004964:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8004968:	3301      	adds	r3, #1
 800496a:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
							if(numSeries ==  configStruct->userNumSeries) userState = REPOUSO;
 800496e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004972:	7f9b      	ldrb	r3, [r3, #30]
 8004974:	f897 2205 	ldrb.w	r2, [r7, #517]	; 0x205
 8004978:	429a      	cmp	r2, r3
 800497a:	d103      	bne.n	8004984 <readingSensor+0x25c>
 800497c:	4b48      	ldr	r3, [pc, #288]	; (8004aa0 <readingSensor+0x378>)
 800497e:	2232      	movs	r2, #50	; 0x32
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e079      	b.n	8004a78 <readingSensor+0x350>
							else userState = INTERVALO;
 8004984:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <readingSensor+0x378>)
 8004986:	2237      	movs	r2, #55	; 0x37
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e075      	b.n	8004a78 <readingSensor+0x350>
						}
						else userState = CONTATO;
 800498c:	4b44      	ldr	r3, [pc, #272]	; (8004aa0 <readingSensor+0x378>)
 800498e:	2233      	movs	r2, #51	; 0x33
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e071      	b.n	8004a78 <readingSensor+0x350>
					}
					else userState = CONTATO;
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <readingSensor+0x378>)
 8004996:	2233      	movs	r2, #51	; 0x33
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e06d      	b.n	8004a78 <readingSensor+0x350>
				}

				else
				{
					resetSamplesCount();
 800499c:	f000 ff7c 	bl	8005898 <resetSamplesCount>
					while(*ptr_samples < SAMPLES)
 80049a0:	e01c      	b.n	80049dc <readingSensor+0x2b4>
					{
						totalTimeArray[*ptr_samples] = *ptr_totalTime;
 80049a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	008b      	lsls	r3, r1, #2
 80049b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049b6:	443b      	add	r3, r7
 80049b8:	f843 2ca8 	str.w	r2, [r3, #-168]
						vooTime[*ptr_samples] = *ptr_totalTime - transitionStateTime;
 80049bc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	4619      	mov	r1, r3
 80049ca:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	008b      	lsls	r3, r1, #2
 80049d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049d6:	443b      	add	r3, r7
 80049d8:	f843 2cd0 	str.w	r2, [r3, #-208]
					while(*ptr_samples < SAMPLES)
 80049dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d9dd      	bls.n	80049a2 <readingSensor+0x27a>
					}
					if(*ptr_samples == SAMPLES)
 80049e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b0a      	cmp	r3, #10
 80049ee:	d143      	bne.n	8004a78 <readingSensor+0x350>
					{
						vooTimeLocal[count] = vooTime[SAMPLES-1];
 80049f0:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80049f4:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80049f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80049fc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

						if(vooTimeLocal[count]>timeMin && vooTimeLocal[count]<timeMax)
 8004a04:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8004a08:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004a0c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a14:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d20f      	bcs.n	8004a3c <readingSensor+0x314>
 8004a1c:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8004a20:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004a24:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d903      	bls.n	8004a3c <readingSensor+0x314>
						{
							readStatus = OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8004a3a:	e002      	b.n	8004a42 <readingSensor+0x31a>
						}
						else readStatus = ERROSALTO;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
					}
				}
			break;
 8004a42:	e019      	b.n	8004a78 <readingSensor+0x350>

			case INTERVALO:
				intervalSeries = *ptr_totalTime - transitionStateTime;
 8004a44:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				if(intervalSeries == configStruct->userIntervalSeries)
 8004a54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d106      	bne.n	8004a70 <readingSensor+0x348>
				{
					userState = CONTATO;
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <readingSensor+0x378>)
 8004a64:	2233      	movs	r2, #51	; 0x33
 8004a66:	701a      	strb	r2, [r3, #0]
					numSaltos = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
 8004a6e:	e002      	b.n	8004a76 <readingSensor+0x34e>
				}
				else userState = INTERVALO;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <readingSensor+0x378>)
 8004a72:	2237      	movs	r2, #55	; 0x37
 8004a74:	701a      	strb	r2, [r3, #0]
				break;
 8004a76:	bf00      	nop
	while(key != PARAR && numSeries != configStruct->userNumSeries)
 8004a78:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004a7c:	2b50      	cmp	r3, #80	; 0x50
 8004a7e:	d007      	beq.n	8004a90 <readingSensor+0x368>
 8004a80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a84:	7f9b      	ldrb	r3, [r3, #30]
 8004a86:	f897 2205 	ldrb.w	r2, [r7, #517]	; 0x205
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f47f aec0 	bne.w	8004810 <readingSensor+0xe8>
		}
	}

	measuredData.resultTestAcquiredSamples = count;
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <readingSensor+0x37c>)
 8004a92:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8004a96:	7053      	strb	r3, [r2, #1]
	for(unsigned i=0;i<count;i++)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8004a9e:	e09c      	b.n	8004bda <readingSensor+0x4b2>
 8004aa0:	200000dc 	.word	0x200000dc
 8004aa4:	200005cc 	.word	0x200005cc
	{
		alturaSaltoLocal[i] = calcAltura(vooTimeLocal[i]);
 8004aa8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004aac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ab0:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac4:	f000 f8bc 	bl	8004c40 <calcAltura>
 8004ac8:	4601      	mov	r1, r0
 8004aca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004ace:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ad2:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		potenciaSaltoLocal[i] = calcPotencia(alturaSaltoLocal[i],configStruct->userMass);
 8004ada:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004ade:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ae2:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004ae6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004aea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004aee:	7a1b      	ldrb	r3, [r3, #8]
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f000 f8d0 	bl	8004c98 <calcPotencia>
 8004af8:	eef0 7a40 	vmov.f32	s15, s0
 8004afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b00:	ee17 1a90 	vmov	r1, s15
 8004b04:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004b08:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004b0c:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		measuredData.Measurement[i].sampleNum = i+1;
 8004b14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	b2d8      	uxtb	r0, r3
 8004b1e:	4946      	ldr	r1, [pc, #280]	; (8004c38 <readingSensor+0x510>)
 8004b20:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4602      	mov	r2, r0
 8004b32:	701a      	strb	r2, [r3, #0]
		measuredData.Measurement[i].alturaSalto = alturaSaltoLocal[i];
 8004b34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004b38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004b3c:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b44:	483c      	ldr	r0, [pc, #240]	; (8004c38 <readingSensor+0x510>)
 8004b46:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4403      	add	r3, r0
 8004b54:	3314      	adds	r3, #20
 8004b56:	6019      	str	r1, [r3, #0]
		measuredData.Measurement[i].potenciaSalto = potenciaSaltoLocal[i];
 8004b58:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004b5c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004b60:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b68:	4833      	ldr	r0, [pc, #204]	; (8004c38 <readingSensor+0x510>)
 8004b6a:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4403      	add	r3, r0
 8004b78:	3318      	adds	r3, #24
 8004b7a:	6019      	str	r1, [r3, #0]
		measuredData.Measurement[i].uiSoloTime = contatoTimeLocal[i];
 8004b7c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004b80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b84:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b8c:	482a      	ldr	r0, [pc, #168]	; (8004c38 <readingSensor+0x510>)
 8004b8e:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4403      	add	r3, r0
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	6019      	str	r1, [r3, #0]
		measuredData.Measurement[i].uiVooTime = vooTimeLocal[i];
 8004ba0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004ba4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ba8:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bb0:	4821      	ldr	r0, [pc, #132]	; (8004c38 <readingSensor+0x510>)
 8004bb2:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4403      	add	r3, r0
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	6019      	str	r1, [r3, #0]
		setUserResultData(&measuredData,indexTest);
 8004bc4:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004bc8:	4619      	mov	r1, r3
 8004bca:	481b      	ldr	r0, [pc, #108]	; (8004c38 <readingSensor+0x510>)
 8004bcc:	f7fd fbb2 	bl	8002334 <setUserResultData>
	for(unsigned i=0;i<count;i++)
 8004bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8004bda:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8004bde:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004be2:	429a      	cmp	r2, r3
 8004be4:	f4ff af60 	bcc.w	8004aa8 <readingSensor+0x380>
	}

	if(*ptr_totalTime == configStruct->userTime)
 8004be8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d109      	bne.n	8004c0c <readingSensor+0x4e4>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bfc:	480f      	ldr	r0, [pc, #60]	; (8004c3c <readingSensor+0x514>)
 8004bfe:	f002 fd98 	bl	8007732 <HAL_GPIO_TogglePin>
		measuredData.timeout = TRUE;
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <readingSensor+0x510>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	70da      	strb	r2, [r3, #3]
		return TIMEOUT;
 8004c08:	2335      	movs	r3, #53	; 0x35
 8004c0a:	e00f      	b.n	8004c2c <readingSensor+0x504>
	}

	else if(numSeries == configStruct->userNumSeries)
 8004c0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c10:	7f9b      	ldrb	r3, [r3, #30]
 8004c12:	f897 2205 	ldrb.w	r2, [r7, #517]	; 0x205
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d104      	bne.n	8004c24 <readingSensor+0x4fc>
	{
		measuredData.timeout = FALSE;
 8004c1a:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <readingSensor+0x510>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	70da      	strb	r2, [r3, #3]
		return MAX_SERIE;
 8004c20:	2336      	movs	r3, #54	; 0x36
 8004c22:	e003      	b.n	8004c2c <readingSensor+0x504>
	}

	else
	{
		measuredData.timeout = FALSE;
 8004c24:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <readingSensor+0x510>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	70da      	strb	r2, [r3, #3]
		return PARAR;
 8004c2a:	2350      	movs	r3, #80	; 0x50
	}
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	200005cc 	.word	0x200005cc
 8004c3c:	40020800 	.word	0x40020800

08004c40 <calcAltura>:


unsigned int calcAltura(float vooTimeLocal)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	ed87 0a01 	vstr	s0, [r7, #4]
	/*
	 * Altura do Salto em Centímetros = ((Tempo Voo^2) *  (981/8))
	 */
	float aux1;
	unsigned const int aux2 = 981>>3;
 8004c4a:	237a      	movs	r3, #122	; 0x7a
 8004c4c:	617b      	str	r3, [r7, #20]
	unsigned int alturaSalto;
	vooTimeLocal = vooTimeLocal/1000;
 8004c4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c52:	eddf 6a10 	vldr	s13, [pc, #64]	; 8004c94 <calcAltura+0x54>
 8004c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c5a:	edc7 7a01 	vstr	s15, [r7, #4]
	aux1 = vooTimeLocal*vooTimeLocal;
 8004c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c66:	edc7 7a04 	vstr	s15, [r7, #16]
//	aux1 = aux1/10000;
	alturaSalto = aux1*aux2;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c74:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c80:	ee17 3a90 	vmov	r3, s15
 8004c84:	60fb      	str	r3, [r7, #12]

	return alturaSalto;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	447a0000 	.word	0x447a0000

08004c98 <calcPotencia>:

float calcPotencia(unsigned int alturaSalto,unsigned int massaCorpo)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	float aux1,aux2,potSalto;
	float const constant1 = 60.7;
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <calcPotencia+0x78>)
 8004ca4:	61fb      	str	r3, [r7, #28]
	float const constant2 = 45.3;
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <calcPotencia+0x7c>)
 8004ca8:	61bb      	str	r3, [r7, #24]
	unsigned const int constant3 = 2055;
 8004caa:	f640 0307 	movw	r3, #2055	; 0x807
 8004cae:	617b      	str	r3, [r7, #20]
	aux1 = constant1*alturaSalto;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	ed97 7a07 	vldr	s14, [r7, #28]
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a04 	vstr	s15, [r7, #16]
	aux2 = constant2*massaCorpo;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	ed97 7a06 	vldr	s14, [r7, #24]
 8004cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd8:	edc7 7a03 	vstr	s15, [r7, #12]
	potSalto = aux1+aux2-constant3;
 8004cdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf6:	edc7 7a02 	vstr	s15, [r7, #8]

	return potSalto;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	ee07 3a90 	vmov	s15, r3
//	Potência em Watts =  60,7 x (h [cm]) + 45,3 x (MC [Kg]) – 2055
}
 8004d00:	eeb0 0a67 	vmov.f32	s0, s15
 8004d04:	3724      	adds	r7, #36	; 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	4272cccd 	.word	0x4272cccd
 8004d14:	42353333 	.word	0x42353333

08004d18 <getNextSub>:

struct Menu menuSub ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextSub(unsigned char nextState)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
    menuSub.menuNext = nextState;
 8004d22:	4a05      	ldr	r2, [pc, #20]	; (8004d38 <getNextSub+0x20>)
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	7013      	strb	r3, [r2, #0]
    return menuSub.menuNext;
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <getNextSub+0x20>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	20000648 	.word	0x20000648

08004d3c <setInsertData>:
//    menuSub.menuSelect = state;
//    return menuSub.menuSelect;
//}

unsigned char setInsertData(struct dataInsert* dataToInsert)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
    struct dataInsert* userDataInput = dataToInsert;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60fb      	str	r3, [r7, #12]
    setUserInputConfigData(userDataInput);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7fd fa6d 	bl	8002228 <setUserInputConfigData>
}
 8004d4e:	bf00      	nop
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <SET_HW_TIMER2>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char SET_HW_TIMER2(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
	encoderStatus = 0;
 8004d5e:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <SET_HW_TIMER2+0x40>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
//	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
	TIM_HandleTypeDef* htim2 =  getTimer2Instance();
 8004d64:	f000 fdde 	bl	8005924 <getTimer2Instance>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Start_IT(htim2, TIM_CHANNEL_ALL);
 8004d6c:	213c      	movs	r1, #60	; 0x3c
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f003 ff28 	bl	8008bc4 <HAL_TIM_Encoder_Start_IT>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <SET_HW_TIMER2+0x40>)
 8004d7a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004d7c:	2064      	movs	r0, #100	; 0x64
 8004d7e:	f001 fe03 	bl	8006988 <HAL_Delay>
	return !encoderStatus;
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <SET_HW_TIMER2+0x40>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000674 	.word	0x20000674

08004d9c <RESET_HW_TIMER2>:

unsigned char RESET_HW_TIMER2(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
    encoderStatus = 1;
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <RESET_HW_TIMER2+0x38>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
//    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
    TIM_HandleTypeDef* htim2 =  getTimer2Instance();
 8004da8:	f000 fdbc 	bl	8005924 <getTimer2Instance>
 8004dac:	4603      	mov	r3, r0
 8004dae:	607b      	str	r3, [r7, #4]
	encoderStatus = HAL_TIM_Encoder_Stop_IT(htim2, TIM_CHANNEL_ALL);
 8004db0:	213c      	movs	r1, #60	; 0x3c
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f003 ffb4 	bl	8008d20 <HAL_TIM_Encoder_Stop_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <RESET_HW_TIMER2+0x38>)
 8004dbe:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004dc0:	2064      	movs	r0, #100	; 0x64
 8004dc2:	f001 fde1 	bl	8006988 <HAL_Delay>
	return encoderStatus;
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <RESET_HW_TIMER2+0x38>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000674 	.word	0x20000674

08004dd8 <SET_HW_TIMER3>:

unsigned char SET_HW_TIMER3(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
    timerStatus = 0;
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <SET_HW_TIMER3+0x40>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004de4:	f000 fda8 	bl	8005938 <getTimer3Instance>
 8004de8:	4603      	mov	r3, r0
 8004dea:	607b      	str	r3, [r7, #4]
     timerStatus =HAL_TIM_Base_Start_IT(htim3);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f003 fde1 	bl	80089b4 <HAL_TIM_Base_Start_IT>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <SET_HW_TIMER3+0x40>)
 8004df8:	701a      	strb	r2, [r3, #0]
     HAL_Delay(100);
 8004dfa:	2064      	movs	r0, #100	; 0x64
 8004dfc:	f001 fdc4 	bl	8006988 <HAL_Delay>
    return !timerStatus;
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <SET_HW_TIMER3+0x40>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000675 	.word	0x20000675

08004e1c <RESET_HW_TIMER3>:

unsigned char RESET_HW_TIMER3(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
    timerStatus = 1;
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <RESET_HW_TIMER3+0x34>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
    TIM_HandleTypeDef* htim3 =  getTimer3Instance();
 8004e28:	f000 fd86 	bl	8005938 <getTimer3Instance>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	607b      	str	r3, [r7, #4]
    timerStatus = HAL_TIM_Base_Stop(htim3);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f003 fd98 	bl	8008966 <HAL_TIM_Base_Stop>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <RESET_HW_TIMER3+0x34>)
 8004e3c:	701a      	strb	r2, [r3, #0]
//     timerStatus =HAL_TIM_Base_Stop_IT(htim3);
     HAL_Delay(100);
 8004e3e:	2064      	movs	r0, #100	; 0x64
 8004e40:	f001 fda2 	bl	8006988 <HAL_Delay>
    return timerStatus;
 8004e44:	4b02      	ldr	r3, [pc, #8]	; (8004e50 <RESET_HW_TIMER3+0x34>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000675 	.word	0x20000675

08004e54 <SET_HW_UART>:
#include "UARTHW.h"
#include "main.h"


unsigned char SET_HW_UART(unsigned char* addr)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]
    __HAL_UART_ENABLE(instance);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e6e:	60da      	str	r2, [r3, #12]
}
 8004e70:	bf00      	nop
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <RESET_HW_UART>:

unsigned char RESET_HW_UART(unsigned char* addr)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* instance = addr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
    __HAL_UART_DISABLE(instance);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e98:	60da      	str	r2, [r3, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8004eac:	2200      	movs	r2, #0
 8004eae:	2110      	movs	r1, #16
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <SELECT+0x14>)
 8004eb2:	f002 fc25 	bl	8007700 <HAL_GPIO_WritePin>
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40020000 	.word	0x40020000

08004ec0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	4802      	ldr	r0, [pc, #8]	; (8004ed4 <DESELECT+0x14>)
 8004eca:	f002 fc19 	bl	8007700 <HAL_GPIO_WritePin>
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40020000 	.word	0x40020000

08004ed8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004ee2:	bf00      	nop
 8004ee4:	4808      	ldr	r0, [pc, #32]	; (8004f08 <SPI_TxByte+0x30>)
 8004ee6:	f003 fc16 	bl	8008716 <HAL_SPI_GetState>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d1f9      	bne.n	8004ee4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8004ef0:	1df9      	adds	r1, r7, #7
 8004ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4803      	ldr	r0, [pc, #12]	; (8004f08 <SPI_TxByte+0x30>)
 8004efa:	f003 f92e 	bl	800815a <HAL_SPI_Transmit>
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000678 	.word	0x20000678

08004f0c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8004f12:	23ff      	movs	r3, #255	; 0xff
 8004f14:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8004f1a:	bf00      	nop
 8004f1c:	4809      	ldr	r0, [pc, #36]	; (8004f44 <SPI_RxByte+0x38>)
 8004f1e:	f003 fbfa 	bl	8008716 <HAL_SPI_GetState>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d1f9      	bne.n	8004f1c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8004f28:	1dba      	adds	r2, r7, #6
 8004f2a:	1df9      	adds	r1, r7, #7
 8004f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2301      	movs	r3, #1
 8004f34:	4803      	ldr	r0, [pc, #12]	; (8004f44 <SPI_RxByte+0x38>)
 8004f36:	f003 fa4c 	bl	80083d2 <HAL_SPI_TransmitReceive>

  return data;
 8004f3a:	79bb      	ldrb	r3, [r7, #6]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000678 	.word	0x20000678

08004f48 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8004f50:	f7ff ffdc 	bl	8004f0c <SPI_RxByte>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	701a      	strb	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <SD_ReadyWait+0x34>)
 8004f6c:	2232      	movs	r2, #50	; 0x32
 8004f6e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8004f70:	f7ff ffcc 	bl	8004f0c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8004f74:	f7ff ffca 	bl	8004f0c <SPI_RxByte>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	2bff      	cmp	r3, #255	; 0xff
 8004f80:	d004      	beq.n	8004f8c <SD_ReadyWait+0x28>
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <SD_ReadyWait+0x34>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f3      	bne.n	8004f74 <SD_ReadyWait+0x10>

  return res;
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000896 	.word	0x20000896

08004f9c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8004fa2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8004fa8:	f7ff ff8a 	bl	8004ec0 <DESELECT>

  for(int i = 0; i < 10; i++)
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	e005      	b.n	8004fbe <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8004fb2:	20ff      	movs	r0, #255	; 0xff
 8004fb4:	f7ff ff90 	bl	8004ed8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b09      	cmp	r3, #9
 8004fc2:	ddf6      	ble.n	8004fb2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8004fc4:	f7ff ff70 	bl	8004ea8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8004fc8:	2340      	movs	r3, #64	; 0x40
 8004fca:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8004fdc:	2395      	movs	r3, #149	; 0x95
 8004fde:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e009      	b.n	8004ffa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8004fe6:	1d3a      	adds	r2, r7, #4
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff72 	bl	8004ed8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b05      	cmp	r3, #5
 8004ffe:	ddf2      	ble.n	8004fe6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8005000:	e002      	b.n	8005008 <SD_PowerOn+0x6c>
  {
    Count--;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3b01      	subs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8005008:	f7ff ff80 	bl	8004f0c <SPI_RxByte>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d002      	beq.n	8005018 <SD_PowerOn+0x7c>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f4      	bne.n	8005002 <SD_PowerOn+0x66>
  }

  DESELECT();
 8005018:	f7ff ff52 	bl	8004ec0 <DESELECT>
  SPI_TxByte(0XFF);
 800501c:	20ff      	movs	r0, #255	; 0xff
 800501e:	f7ff ff5b 	bl	8004ed8 <SPI_TxByte>

  PowerFlag = 1;
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <SD_PowerOn+0x94>)
 8005024:	2201      	movs	r2, #1
 8005026:	701a      	strb	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000677 	.word	0x20000677

08005034 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <SD_PowerOff+0x14>)
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	20000677 	.word	0x20000677

0800504c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <SD_CheckPower+0x14>)
 8005052:	781b      	ldrb	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000677 	.word	0x20000677

08005064 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800506e:	4b17      	ldr	r3, [pc, #92]	; (80050cc <SD_RxDataBlock+0x68>)
 8005070:	220a      	movs	r2, #10
 8005072:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8005074:	f7ff ff4a 	bl	8004f0c <SPI_RxByte>
 8005078:	4603      	mov	r3, r0
 800507a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2bff      	cmp	r3, #255	; 0xff
 8005080:	d104      	bne.n	800508c <SD_RxDataBlock+0x28>
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <SD_RxDataBlock+0x68>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f3      	bne.n	8005074 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2bfe      	cmp	r3, #254	; 0xfe
 8005090:	d001      	beq.n	8005096 <SD_RxDataBlock+0x32>
    return FALSE;
 8005092:	2300      	movs	r3, #0
 8005094:	e016      	b.n	80050c4 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ff53 	bl	8004f48 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff4d 	bl	8004f48 <SPI_RxBytePtr>
  } while(btr -= 2);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	3b02      	subs	r3, #2
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1ed      	bne.n	8005096 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80050ba:	f7ff ff27 	bl	8004f0c <SPI_RxByte>
  SPI_RxByte();
 80050be:	f7ff ff25 	bl	8004f0c <SPI_RxByte>

  return TRUE;
 80050c2:	2301      	movs	r3, #1
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000895 	.word	0x20000895

080050d0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80050e0:	f7ff ff40 	bl	8004f64 <SD_ReadyWait>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2bff      	cmp	r3, #255	; 0xff
 80050e8:	d001      	beq.n	80050ee <SD_TxDataBlock+0x1e>
    return FALSE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e040      	b.n	8005170 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fef1 	bl	8004ed8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2bfd      	cmp	r3, #253	; 0xfd
 80050fa:	d031      	beq.n	8005160 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fee5 	bl	8004ed8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fede 	bl	8004ed8 <SPI_TxByte>
    } while (--wc);
 800511c:	7bbb      	ldrb	r3, [r7, #14]
 800511e:	3b01      	subs	r3, #1
 8005120:	73bb      	strb	r3, [r7, #14]
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1eb      	bne.n	8005100 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8005128:	f7ff fef0 	bl	8004f0c <SPI_RxByte>
    SPI_RxByte();
 800512c:	f7ff feee 	bl	8004f0c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8005130:	e00b      	b.n	800514a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8005132:	f7ff feeb 	bl	8004f0c <SPI_RxByte>
 8005136:	4603      	mov	r3, r0
 8005138:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2b05      	cmp	r3, #5
 8005142:	d006      	beq.n	8005152 <SD_TxDataBlock+0x82>
        break;

      i++;
 8005144:	7b7b      	ldrb	r3, [r7, #13]
 8005146:	3301      	adds	r3, #1
 8005148:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800514a:	7b7b      	ldrb	r3, [r7, #13]
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d9f0      	bls.n	8005132 <SD_TxDataBlock+0x62>
 8005150:	e000      	b.n	8005154 <SD_TxDataBlock+0x84>
        break;
 8005152:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8005154:	bf00      	nop
 8005156:	f7ff fed9 	bl	8004f0c <SPI_RxByte>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0fa      	beq.n	8005156 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2b05      	cmp	r3, #5
 8005168:	d101      	bne.n	800516e <SD_TxDataBlock+0x9e>
    return TRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8005184:	f7ff feee 	bl	8004f64 <SD_ReadyWait>
 8005188:	4603      	mov	r3, r0
 800518a:	2bff      	cmp	r3, #255	; 0xff
 800518c:	d001      	beq.n	8005192 <SD_SendCmd+0x1a>
    return 0xFF;
 800518e:	23ff      	movs	r3, #255	; 0xff
 8005190:	e040      	b.n	8005214 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff fe9f 	bl	8004ed8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	0e1b      	lsrs	r3, r3, #24
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fe99 	bl	8004ed8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fe93 	bl	8004ed8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fe8d 	bl	8004ed8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fe88 	bl	8004ed8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d101      	bne.n	80051d6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80051d2:	2395      	movs	r3, #149	; 0x95
 80051d4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b48      	cmp	r3, #72	; 0x48
 80051da:	d101      	bne.n	80051e0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80051dc:	2387      	movs	r3, #135	; 0x87
 80051de:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fe78 	bl	8004ed8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	2b4c      	cmp	r3, #76	; 0x4c
 80051ec:	d101      	bne.n	80051f2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80051ee:	f7ff fe8d 	bl	8004f0c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80051f2:	230a      	movs	r3, #10
 80051f4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80051f6:	f7ff fe89 	bl	8004f0c <SPI_RxByte>
 80051fa:	4603      	mov	r3, r0
 80051fc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80051fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da05      	bge.n	8005212 <SD_SendCmd+0x9a>
 8005206:	7bbb      	ldrb	r3, [r7, #14]
 8005208:	3b01      	subs	r3, #1
 800520a:	73bb      	strb	r3, [r7, #14]
 800520c:	7bbb      	ldrb	r3, [r7, #14]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f1      	bne.n	80051f6 <SD_SendCmd+0x7e>

  return res;
 8005212:	7b7b      	ldrb	r3, [r7, #13]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800522c:	2301      	movs	r3, #1
 800522e:	e0d5      	b.n	80053dc <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8005230:	4b6c      	ldr	r3, [pc, #432]	; (80053e4 <SD_disk_initialize+0x1c8>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <SD_disk_initialize+0x2a>
    return Stat;
 800523e:	4b69      	ldr	r3, [pc, #420]	; (80053e4 <SD_disk_initialize+0x1c8>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	e0ca      	b.n	80053dc <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8005246:	f7ff fea9 	bl	8004f9c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800524a:	f7ff fe2d 	bl	8004ea8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8005252:	2100      	movs	r1, #0
 8005254:	2040      	movs	r0, #64	; 0x40
 8005256:	f7ff ff8f 	bl	8005178 <SD_SendCmd>
 800525a:	4603      	mov	r3, r0
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 80a5 	bne.w	80053ac <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8005262:	4b61      	ldr	r3, [pc, #388]	; (80053e8 <SD_disk_initialize+0x1cc>)
 8005264:	2264      	movs	r2, #100	; 0x64
 8005266:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005268:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800526c:	2048      	movs	r0, #72	; 0x48
 800526e:	f7ff ff83 	bl	8005178 <SD_SendCmd>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d158      	bne.n	800532a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	e00c      	b.n	8005298 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800527e:	7bfc      	ldrb	r4, [r7, #15]
 8005280:	f7ff fe44 	bl	8004f0c <SPI_RxByte>
 8005284:	4603      	mov	r3, r0
 8005286:	461a      	mov	r2, r3
 8005288:	f104 0310 	add.w	r3, r4, #16
 800528c:	443b      	add	r3, r7
 800528e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	3301      	adds	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d9ef      	bls.n	800527e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800529e:	7abb      	ldrb	r3, [r7, #10]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	f040 8083 	bne.w	80053ac <SD_disk_initialize+0x190>
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	2baa      	cmp	r3, #170	; 0xaa
 80052aa:	d17f      	bne.n	80053ac <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80052ac:	2100      	movs	r1, #0
 80052ae:	2077      	movs	r0, #119	; 0x77
 80052b0:	f7ff ff62 	bl	8005178 <SD_SendCmd>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d807      	bhi.n	80052ca <SD_disk_initialize+0xae>
 80052ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80052be:	2069      	movs	r0, #105	; 0x69
 80052c0:	f7ff ff5a 	bl	8005178 <SD_SendCmd>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80052ca:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <SD_disk_initialize+0x1cc>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1eb      	bne.n	80052ac <SD_disk_initialize+0x90>
 80052d4:	e000      	b.n	80052d8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80052d6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80052d8:	4b43      	ldr	r3, [pc, #268]	; (80053e8 <SD_disk_initialize+0x1cc>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d064      	beq.n	80053ac <SD_disk_initialize+0x190>
 80052e2:	2100      	movs	r1, #0
 80052e4:	207a      	movs	r0, #122	; 0x7a
 80052e6:	f7ff ff47 	bl	8005178 <SD_SendCmd>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d15d      	bne.n	80053ac <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	e00c      	b.n	8005310 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80052f6:	7bfc      	ldrb	r4, [r7, #15]
 80052f8:	f7ff fe08 	bl	8004f0c <SPI_RxByte>
 80052fc:	4603      	mov	r3, r0
 80052fe:	461a      	mov	r2, r3
 8005300:	f104 0310 	add.w	r3, r4, #16
 8005304:	443b      	add	r3, r7
 8005306:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	3301      	adds	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d9ef      	bls.n	80052f6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8005316:	7a3b      	ldrb	r3, [r7, #8]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <SD_disk_initialize+0x108>
 8005320:	2306      	movs	r3, #6
 8005322:	e000      	b.n	8005326 <SD_disk_initialize+0x10a>
 8005324:	2302      	movs	r3, #2
 8005326:	73bb      	strb	r3, [r7, #14]
 8005328:	e040      	b.n	80053ac <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800532a:	2100      	movs	r1, #0
 800532c:	2077      	movs	r0, #119	; 0x77
 800532e:	f7ff ff23 	bl	8005178 <SD_SendCmd>
 8005332:	4603      	mov	r3, r0
 8005334:	2b01      	cmp	r3, #1
 8005336:	d808      	bhi.n	800534a <SD_disk_initialize+0x12e>
 8005338:	2100      	movs	r1, #0
 800533a:	2069      	movs	r0, #105	; 0x69
 800533c:	f7ff ff1c 	bl	8005178 <SD_SendCmd>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d801      	bhi.n	800534a <SD_disk_initialize+0x12e>
 8005346:	2302      	movs	r3, #2
 8005348:	e000      	b.n	800534c <SD_disk_initialize+0x130>
 800534a:	2301      	movs	r3, #1
 800534c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d10e      	bne.n	8005372 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8005354:	2100      	movs	r1, #0
 8005356:	2077      	movs	r0, #119	; 0x77
 8005358:	f7ff ff0e 	bl	8005178 <SD_SendCmd>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d80e      	bhi.n	8005380 <SD_disk_initialize+0x164>
 8005362:	2100      	movs	r1, #0
 8005364:	2069      	movs	r0, #105	; 0x69
 8005366:	f7ff ff07 	bl	8005178 <SD_SendCmd>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8005370:	e00d      	b.n	800538e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8005372:	2100      	movs	r1, #0
 8005374:	2041      	movs	r0, #65	; 0x41
 8005376:	f7ff feff 	bl	8005178 <SD_SendCmd>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <SD_disk_initialize+0x1cc>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e1      	bne.n	800534e <SD_disk_initialize+0x132>
 800538a:	e000      	b.n	800538e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800538c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <SD_disk_initialize+0x1cc>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <SD_disk_initialize+0x18c>
 8005398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800539c:	2050      	movs	r0, #80	; 0x50
 800539e:	f7ff feeb 	bl	8005178 <SD_SendCmd>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80053ac:	4a0f      	ldr	r2, [pc, #60]	; (80053ec <SD_disk_initialize+0x1d0>)
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80053b2:	f7ff fd85 	bl	8004ec0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80053b6:	f7ff fda9 	bl	8004f0c <SPI_RxByte>

  if (type)
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80053c0:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <SD_disk_initialize+0x1c8>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <SD_disk_initialize+0x1c8>)
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e001      	b.n	80053d6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80053d2:	f7ff fe2f 	bl	8005034 <SD_PowerOff>
  }

  return Stat;
 80053d6:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <SD_disk_initialize+0x1c8>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd90      	pop	{r4, r7, pc}
 80053e4:	200000dd 	.word	0x200000dd
 80053e8:	20000895 	.word	0x20000895
 80053ec:	20000676 	.word	0x20000676

080053f0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <SD_disk_status+0x14>
    return STA_NOINIT;
 8005400:	2301      	movs	r3, #1
 8005402:	e002      	b.n	800540a <SD_disk_status+0x1a>

  return Stat;
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <SD_disk_status+0x28>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	b2db      	uxtb	r3, r3
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	200000dd 	.word	0x200000dd

0800541c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <SD_disk_read+0x1c>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <SD_disk_read+0x20>
    return RES_PARERR;
 8005438:	2304      	movs	r3, #4
 800543a:	e051      	b.n	80054e0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800543c:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <SD_disk_read+0xcc>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800544a:	2303      	movs	r3, #3
 800544c:	e048      	b.n	80054e0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800544e:	4b27      	ldr	r3, [pc, #156]	; (80054ec <SD_disk_read+0xd0>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	025b      	lsls	r3, r3, #9
 800545e:	607b      	str	r3, [r7, #4]

  SELECT();
 8005460:	f7ff fd22 	bl	8004ea8 <SELECT>

  if (count == 1)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d111      	bne.n	800548e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	2051      	movs	r0, #81	; 0x51
 800546e:	f7ff fe83 	bl	8005178 <SD_SendCmd>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d129      	bne.n	80054cc <SD_disk_read+0xb0>
 8005478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800547c:	68b8      	ldr	r0, [r7, #8]
 800547e:	f7ff fdf1 	bl	8005064 <SD_RxDataBlock>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d021      	beq.n	80054cc <SD_disk_read+0xb0>
      count = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	e01e      	b.n	80054cc <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	2052      	movs	r0, #82	; 0x52
 8005492:	f7ff fe71 	bl	8005178 <SD_SendCmd>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d117      	bne.n	80054cc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800549c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054a0:	68b8      	ldr	r0, [r7, #8]
 80054a2:	f7ff fddf 	bl	8005064 <SD_RxDataBlock>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80054b2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ed      	bne.n	800549c <SD_disk_read+0x80>
 80054c0:	e000      	b.n	80054c4 <SD_disk_read+0xa8>
          break;
 80054c2:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80054c4:	2100      	movs	r1, #0
 80054c6:	204c      	movs	r0, #76	; 0x4c
 80054c8:	f7ff fe56 	bl	8005178 <SD_SendCmd>
    }
  }

  DESELECT();
 80054cc:	f7ff fcf8 	bl	8004ec0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80054d0:	f7ff fd1c 	bl	8004f0c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	200000dd 	.word	0x200000dd
 80054ec:	20000676 	.word	0x20000676

080054f0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <SD_disk_write+0x1c>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <SD_disk_write+0x20>
    return RES_PARERR;
 800550c:	2304      	movs	r3, #4
 800550e:	e06b      	b.n	80055e8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8005510:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <SD_disk_write+0x100>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800551e:	2303      	movs	r3, #3
 8005520:	e062      	b.n	80055e8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8005522:	4b33      	ldr	r3, [pc, #204]	; (80055f0 <SD_disk_write+0x100>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <SD_disk_write+0x44>
    return RES_WRPRT;
 8005530:	2302      	movs	r3, #2
 8005532:	e059      	b.n	80055e8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8005534:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <SD_disk_write+0x104>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	025b      	lsls	r3, r3, #9
 8005544:	607b      	str	r3, [r7, #4]

  SELECT();
 8005546:	f7ff fcaf 	bl	8004ea8 <SELECT>

  if (count == 1)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d110      	bne.n	8005572 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	2058      	movs	r0, #88	; 0x58
 8005554:	f7ff fe10 	bl	8005178 <SD_SendCmd>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d13a      	bne.n	80055d4 <SD_disk_write+0xe4>
 800555e:	21fe      	movs	r1, #254	; 0xfe
 8005560:	68b8      	ldr	r0, [r7, #8]
 8005562:	f7ff fdb5 	bl	80050d0 <SD_TxDataBlock>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d033      	beq.n	80055d4 <SD_disk_write+0xe4>
      count = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	e030      	b.n	80055d4 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8005572:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <SD_disk_write+0x104>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800557e:	2100      	movs	r1, #0
 8005580:	2077      	movs	r0, #119	; 0x77
 8005582:	f7ff fdf9 	bl	8005178 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	2057      	movs	r0, #87	; 0x57
 800558a:	f7ff fdf5 	bl	8005178 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	2059      	movs	r0, #89	; 0x59
 8005592:	f7ff fdf1 	bl	8005178 <SD_SendCmd>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d11b      	bne.n	80055d4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800559c:	21fc      	movs	r1, #252	; 0xfc
 800559e:	68b8      	ldr	r0, [r7, #8]
 80055a0:	f7ff fd96 	bl	80050d0 <SD_TxDataBlock>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80055b0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ee      	bne.n	800559c <SD_disk_write+0xac>
 80055be:	e000      	b.n	80055c2 <SD_disk_write+0xd2>
          break;
 80055c0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80055c2:	21fd      	movs	r1, #253	; 0xfd
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7ff fd83 	bl	80050d0 <SD_TxDataBlock>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <SD_disk_write+0xe4>
      {
        count = 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80055d4:	f7ff fc74 	bl	8004ec0 <DESELECT>
  SPI_RxByte();
 80055d8:	f7ff fc98 	bl	8004f0c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	200000dd 	.word	0x200000dd
 80055f4:	20000676 	.word	0x20000676

080055f8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b08b      	sub	sp, #44	; 0x2c
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	603a      	str	r2, [r7, #0]
 8005602:	71fb      	strb	r3, [r7, #7]
 8005604:	460b      	mov	r3, r1
 8005606:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8005612:	2304      	movs	r3, #4
 8005614:	e11b      	b.n	800584e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800561c:	79bb      	ldrb	r3, [r7, #6]
 800561e:	2b05      	cmp	r3, #5
 8005620:	d129      	bne.n	8005676 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d017      	beq.n	800565a <SD_disk_ioctl+0x62>
 800562a:	2b02      	cmp	r3, #2
 800562c:	dc1f      	bgt.n	800566e <SD_disk_ioctl+0x76>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <SD_disk_ioctl+0x40>
 8005632:	2b01      	cmp	r3, #1
 8005634:	d00b      	beq.n	800564e <SD_disk_ioctl+0x56>
 8005636:	e01a      	b.n	800566e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8005638:	f7ff fd08 	bl	800504c <SD_CheckPower>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8005642:	f7ff fcf7 	bl	8005034 <SD_PowerOff>
      res = RES_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800564c:	e0fd      	b.n	800584a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800564e:	f7ff fca5 	bl	8004f9c <SD_PowerOn>
      res = RES_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005658:	e0f7      	b.n	800584a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	1c5c      	adds	r4, r3, #1
 800565e:	f7ff fcf5 	bl	800504c <SD_CheckPower>
 8005662:	4603      	mov	r3, r0
 8005664:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8005666:	2300      	movs	r3, #0
 8005668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800566c:	e0ed      	b.n	800584a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800566e:	2304      	movs	r3, #4
 8005670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005674:	e0e9      	b.n	800584a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8005676:	4b78      	ldr	r3, [pc, #480]	; (8005858 <SD_disk_ioctl+0x260>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8005684:	2303      	movs	r3, #3
 8005686:	e0e2      	b.n	800584e <SD_disk_ioctl+0x256>

    SELECT();
 8005688:	f7ff fc0e 	bl	8004ea8 <SELECT>

    switch (ctrl)
 800568c:	79bb      	ldrb	r3, [r7, #6]
 800568e:	2b0d      	cmp	r3, #13
 8005690:	f200 80cc 	bhi.w	800582c <SD_disk_ioctl+0x234>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <SD_disk_ioctl+0xa4>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	08005797 	.word	0x08005797
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	08005787 	.word	0x08005787
 80056a8:	0800582d 	.word	0x0800582d
 80056ac:	0800582d 	.word	0x0800582d
 80056b0:	0800582d 	.word	0x0800582d
 80056b4:	0800582d 	.word	0x0800582d
 80056b8:	0800582d 	.word	0x0800582d
 80056bc:	0800582d 	.word	0x0800582d
 80056c0:	0800582d 	.word	0x0800582d
 80056c4:	0800582d 	.word	0x0800582d
 80056c8:	080057a9 	.word	0x080057a9
 80056cc:	080057cd 	.word	0x080057cd
 80056d0:	080057f1 	.word	0x080057f1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80056d4:	2100      	movs	r1, #0
 80056d6:	2049      	movs	r0, #73	; 0x49
 80056d8:	f7ff fd4e 	bl	8005178 <SD_SendCmd>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 80a8 	bne.w	8005834 <SD_disk_ioctl+0x23c>
 80056e4:	f107 030c 	add.w	r3, r7, #12
 80056e8:	2110      	movs	r1, #16
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fcba 	bl	8005064 <SD_RxDataBlock>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 809e 	beq.w	8005834 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80056f8:	7b3b      	ldrb	r3, [r7, #12]
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d10e      	bne.n	8005720 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005702:	7d7b      	ldrb	r3, [r7, #21]
 8005704:	b29a      	uxth	r2, r3
 8005706:	7d3b      	ldrb	r3, [r7, #20]
 8005708:	b29b      	uxth	r3, r3
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	b29b      	uxth	r3, r3
 800570e:	4413      	add	r3, r2
 8005710:	b29b      	uxth	r3, r3
 8005712:	3301      	adds	r3, #1
 8005714:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8005716:	8bfb      	ldrh	r3, [r7, #30]
 8005718:	029a      	lsls	r2, r3, #10
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e02e      	b.n	800577e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005720:	7c7b      	ldrb	r3, [r7, #17]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	b2da      	uxtb	r2, r3
 8005728:	7dbb      	ldrb	r3, [r7, #22]
 800572a:	09db      	lsrs	r3, r3, #7
 800572c:	b2db      	uxtb	r3, r3
 800572e:	4413      	add	r3, r2
 8005730:	b2da      	uxtb	r2, r3
 8005732:	7d7b      	ldrb	r3, [r7, #21]
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 0306 	and.w	r3, r3, #6
 800573c:	b2db      	uxtb	r3, r3
 800573e:	4413      	add	r3, r2
 8005740:	b2db      	uxtb	r3, r3
 8005742:	3302      	adds	r3, #2
 8005744:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005748:	7d3b      	ldrb	r3, [r7, #20]
 800574a:	099b      	lsrs	r3, r3, #6
 800574c:	b2db      	uxtb	r3, r3
 800574e:	b29a      	uxth	r2, r3
 8005750:	7cfb      	ldrb	r3, [r7, #19]
 8005752:	b29b      	uxth	r3, r3
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	b29b      	uxth	r3, r3
 8005758:	4413      	add	r3, r2
 800575a:	b29a      	uxth	r2, r3
 800575c:	7cbb      	ldrb	r3, [r7, #18]
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	b29b      	uxth	r3, r3
 8005762:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005766:	b29b      	uxth	r3, r3
 8005768:	4413      	add	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	3301      	adds	r3, #1
 800576e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005770:	8bfa      	ldrh	r2, [r7, #30]
 8005772:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005776:	3b09      	subs	r3, #9
 8005778:	409a      	lsls	r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8005784:	e056      	b.n	8005834 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005794:	e055      	b.n	8005842 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8005796:	f7ff fbe5 	bl	8004f64 <SD_ReadyWait>
 800579a:	4603      	mov	r3, r0
 800579c:	2bff      	cmp	r3, #255	; 0xff
 800579e:	d14b      	bne.n	8005838 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80057a6:	e047      	b.n	8005838 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80057a8:	2100      	movs	r1, #0
 80057aa:	2049      	movs	r0, #73	; 0x49
 80057ac:	f7ff fce4 	bl	8005178 <SD_SendCmd>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d142      	bne.n	800583c <SD_disk_ioctl+0x244>
 80057b6:	2110      	movs	r1, #16
 80057b8:	6a38      	ldr	r0, [r7, #32]
 80057ba:	f7ff fc53 	bl	8005064 <SD_RxDataBlock>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d03b      	beq.n	800583c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80057ca:	e037      	b.n	800583c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80057cc:	2100      	movs	r1, #0
 80057ce:	204a      	movs	r0, #74	; 0x4a
 80057d0:	f7ff fcd2 	bl	8005178 <SD_SendCmd>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d132      	bne.n	8005840 <SD_disk_ioctl+0x248>
 80057da:	2110      	movs	r1, #16
 80057dc:	6a38      	ldr	r0, [r7, #32]
 80057de:	f7ff fc41 	bl	8005064 <SD_RxDataBlock>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d02b      	beq.n	8005840 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80057ee:	e027      	b.n	8005840 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80057f0:	2100      	movs	r1, #0
 80057f2:	207a      	movs	r0, #122	; 0x7a
 80057f4:	f7ff fcc0 	bl	8005178 <SD_SendCmd>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d116      	bne.n	800582c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80057fe:	2300      	movs	r3, #0
 8005800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005804:	e00b      	b.n	800581e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8005806:	6a3c      	ldr	r4, [r7, #32]
 8005808:	1c63      	adds	r3, r4, #1
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	f7ff fb7e 	bl	8004f0c <SPI_RxByte>
 8005810:	4603      	mov	r3, r0
 8005812:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8005814:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005818:	3301      	adds	r3, #1
 800581a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800581e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005822:	2b03      	cmp	r3, #3
 8005824:	d9ef      	bls.n	8005806 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800582c:	2304      	movs	r3, #4
 800582e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005832:	e006      	b.n	8005842 <SD_disk_ioctl+0x24a>
      break;
 8005834:	bf00      	nop
 8005836:	e004      	b.n	8005842 <SD_disk_ioctl+0x24a>
      break;
 8005838:	bf00      	nop
 800583a:	e002      	b.n	8005842 <SD_disk_ioctl+0x24a>
      break;
 800583c:	bf00      	nop
 800583e:	e000      	b.n	8005842 <SD_disk_ioctl+0x24a>
      break;
 8005840:	bf00      	nop
    }

    DESELECT();
 8005842:	f7ff fb3d 	bl	8004ec0 <DESELECT>
    SPI_RxByte();
 8005846:	f7ff fb61 	bl	8004f0c <SPI_RxByte>
  }

  return res;
 800584a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800584e:	4618      	mov	r0, r3
 8005850:	372c      	adds	r7, #44	; 0x2c
 8005852:	46bd      	mov	sp, r7
 8005854:	bd90      	pop	{r4, r7, pc}
 8005856:	bf00      	nop
 8005858:	200000dd 	.word	0x200000dd

0800585c <getTotalTime>:
void resetTimeInterval()
{
	timeInterval = 0;
}
unsigned int* getTotalTime()
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	return &totalTimeArray;
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <getTotalTime+0x10>)
}
 8005862:	4618      	mov	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000818 	.word	0x20000818

08005870 <getTimeVoo>:

unsigned int* getTimeVoo()
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
	return &timeVoo;
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <getTimeVoo+0x10>)
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	20000840 	.word	0x20000840

08005884 <getTimeSolo>:

unsigned int* getTimeSolo()
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
	return &timeSolo;
 8005888:	4b02      	ldr	r3, [pc, #8]	; (8005894 <getTimeSolo+0x10>)
}
 800588a:	4618      	mov	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	20000868 	.word	0x20000868

08005898 <resetSamplesCount>:

unsigned char resetSamplesCount()
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
	return samples = 0;
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <resetSamplesCount+0x18>)
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	2000080f 	.word	0x2000080f

080058b4 <getSamplesCount>:

unsigned char* getSamplesCount()
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
	return &samples;
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <getSamplesCount+0x10>)
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	2000080f 	.word	0x2000080f

080058c8 <resetTimer3Variable>:
	return uartFlagRx;
}


void resetTimer3Variable()
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
	timer3Data = 0;
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <resetTimer3Variable+0x14>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
}
 80058d2:	bf00      	nop
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000810 	.word	0x20000810

080058e0 <getKeyPressed>:

unsigned char getKeyPressed()
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
	return key;
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <getKeyPressed+0x14>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20000804 	.word	0x20000804

080058f8 <resetKeyPressed>:

void resetKeyPressed()
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
	key = IDDLE;
 80058fc:	4b03      	ldr	r3, [pc, #12]	; (800590c <resetKeyPressed+0x14>)
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8005902:	20c8      	movs	r0, #200	; 0xc8
 8005904:	f001 f840 	bl	8006988 <HAL_Delay>
}
 8005908:	bf00      	nop
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000804 	.word	0x20000804

08005910 <getUARTInstance>:

unsigned long int* getUARTInstance()
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
	return &huart2;
 8005914:	4b02      	ldr	r3, [pc, #8]	; (8005920 <getUARTInstance+0x10>)
}
 8005916:	4618      	mov	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	20000760 	.word	0x20000760

08005924 <getTimer2Instance>:

TIM_HandleTypeDef* getTimer2Instance()
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
	return &htim2;
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <getTimer2Instance+0x10>)
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	200006d0 	.word	0x200006d0

08005938 <getTimer3Instance>:

TIM_HandleTypeDef* getTimer3Instance()
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
	return &htim3;
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <getTimer3Instance+0x10>)
}
 800593e:	4618      	mov	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	20000718 	.word	0x20000718

0800594c <getSensorFlag>:
{
	return sensorFlag;
}

unsigned char* getSensorFlag()
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
	return &sensorFlag;
 8005950:	4b02      	ldr	r3, [pc, #8]	; (800595c <getSensorFlag+0x10>)
}
 8005952:	4618      	mov	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	200000de 	.word	0x200000de

08005960 <getTimer3Variable>:

unsigned int* getTimer3Variable()
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
	return &timer3Data;
 8005964:	4b02      	ldr	r3, [pc, #8]	; (8005970 <getTimer3Variable+0x10>)
}
 8005966:	4618      	mov	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000810 	.word	0x20000810

08005974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800597a:	f000 ff93 	bl	80068a4 <HAL_Init>
  	  unsigned char menuSelect;
  	  unsigned char menuDisplay;
  	  unsigned char menuState;
    };

    struct Menu menuTesteMain = {IDDLE,IDDLE,IDDLE,IDDLE};
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
    struct Menu menuTesteSub = {IDDLE,IDDLE,IDDLE,IDDLE};
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
    unsigned char displayUpdateStatus = IDDLE;
 8005986:	2300      	movs	r3, #0
 8005988:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800598a:	f000 f9cb 	bl	8005d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800598e:	f000 fb53 	bl	8006038 <MX_GPIO_Init>
  MX_DMA_Init();
 8005992:	f000 fb31 	bl	8005ff8 <MX_DMA_Init>
  MX_TIM2_Init();
 8005996:	f000 fa63 	bl	8005e60 <MX_TIM2_Init>
  MX_TIM3_Init();
 800599a:	f000 fab5 	bl	8005f08 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800599e:	f000 fb01 	bl	8005fa4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80059a2:	f000 fa27 	bl	8005df4 <MX_SPI1_Init>
  MX_FATFS_Init();
 80059a6:	f004 ff53 	bl	800a850 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80059aa:	2201      	movs	r2, #1
 80059ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059b0:	48c9      	ldr	r0, [pc, #804]	; (8005cd8 <main+0x364>)
 80059b2:	f001 fea5 	bl	8007700 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 80059b6:	2202      	movs	r2, #2
 80059b8:	49c8      	ldr	r1, [pc, #800]	; (8005cdc <main+0x368>)
 80059ba:	48c9      	ldr	r0, [pc, #804]	; (8005ce0 <main+0x36c>)
 80059bc:	f003 fe61 	bl	8009682 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80059c0:	4bc8      	ldr	r3, [pc, #800]	; (8005ce4 <main+0x370>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4bc7      	ldr	r3, [pc, #796]	; (8005ce4 <main+0x370>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0208 	bic.w	r2, r2, #8
 80059ce:	601a      	str	r2, [r3, #0]
  homeDataDisplay(appNameMsg,companyNameMsg,appVersionMsg);
 80059d0:	4bc5      	ldr	r3, [pc, #788]	; (8005ce8 <main+0x374>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4ac5      	ldr	r2, [pc, #788]	; (8005cec <main+0x378>)
 80059d6:	6811      	ldr	r1, [r2, #0]
 80059d8:	4ac5      	ldr	r2, [pc, #788]	; (8005cf0 <main+0x37c>)
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fa57 	bl	8003e90 <homeDataDisplay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  HAL_Delay(1000);
  }
#endif

  HAL_Delay(100);
 80059e2:	2064      	movs	r0, #100	; 0x64
 80059e4:	f000 ffd0 	bl	8006988 <HAL_Delay>
#if _APPLICATION
  while (1)
  {
	  switch(menuTesteMain.menuState)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	d8fc      	bhi.n	80059e8 <main+0x74>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <main+0x80>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a3b 	.word	0x08005a3b
 80059fc:	08005abb 	.word	0x08005abb
 8005a00:	08005b41 	.word	0x08005b41
 8005a04:	08005bc7 	.word	0x08005bc7
 8005a08:	08005c4b 	.word	0x08005c4b
	  	  {
	  		  case IDDLE:
	  			  menuTesteMain.menuState = getNextMain(IDDLE);
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f000 fcb9 	bl	8006384 <getNextMain>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
	  			  if(key == AVANCAR)
 8005a16:	4bb7      	ldr	r3, [pc, #732]	; (8005cf4 <main+0x380>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b41      	cmp	r3, #65	; 0x41
 8005a1e:	f040 8156 	bne.w	8005cce <main+0x35a>
	  			  {
	  				  resetKeyPressed();
 8005a22:	f7ff ff69 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005a26:	1dfb      	adds	r3, r7, #7
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fd fb2a 	bl	8003082 <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 fca8 	bl	8006384 <getNextMain>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
	  			  }
	  		  break;
 8005a38:	e149      	b.n	8005cce <main+0x35a>

	  		  case START_TEST:
	  			  updateUserMsg(0,USERMSG1,startUserMsg,&displayUpdateStatus);
 8005a3a:	4baf      	ldr	r3, [pc, #700]	; (8005cf8 <main+0x384>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	1dfb      	adds	r3, r7, #7
 8005a40:	2100      	movs	r1, #0
 8005a42:	2000      	movs	r0, #0
 8005a44:	f7fd fb02 	bl	800304c <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005a48:	4bac      	ldr	r3, [pc, #688]	; (8005cfc <main+0x388>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2102      	movs	r1, #2
 8005a50:	2000      	movs	r0, #0
 8005a52:	f7fe fa5f 	bl	8003f14 <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005a56:	4baa      	ldr	r3, [pc, #680]	; (8005d00 <main+0x38c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2103      	movs	r1, #3
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fe fa58 	bl	8003f14 <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 8005a64:	4ba3      	ldr	r3, [pc, #652]	; (8005cf4 <main+0x380>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b41      	cmp	r3, #65	; 0x41
 8005a6c:	d10b      	bne.n	8005a86 <main+0x112>
	  			  {
	  				  resetKeyPressed();
 8005a6e:	f7ff ff43 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005a72:	1dfb      	adds	r3, r7, #7
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fd fb04 	bl	8003082 <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(CONSULT_DATA);
 8005a7a:	2002      	movs	r0, #2
 8005a7c:	f000 fc82 	bl	8006384 <getNextMain>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]
	  				  initStateMachine(&menuTesteSub);
	  				  readyUserInterface(&displayUpdateStatus);

	  				  menuTesteSub.menuState = IDDLE;
	  			  }
	  		  break;
 8005a84:	e125      	b.n	8005cd2 <main+0x35e>
	  			  else if(key == CONFIRMAR)
 8005a86:	4b9b      	ldr	r3, [pc, #620]	; (8005cf4 <main+0x380>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b43      	cmp	r3, #67	; 0x43
 8005a8e:	f040 8120 	bne.w	8005cd2 <main+0x35e>
	  				  resetKeyPressed();
 8005a92:	f7ff ff31 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005a96:	1dfb      	adds	r3, r7, #7
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fd faf2 	bl	8003082 <readyUserInterface>
	  				  menuTesteMain.menuSelect = menuTesteMain.menuState;
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	737b      	strb	r3, [r7, #13]
	  				  initStateMachine(&menuTesteSub);
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fcac 	bl	8003404 <initStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005aac:	1dfb      	adds	r3, r7, #7
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fd fae7 	bl	8003082 <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	72fb      	strb	r3, [r7, #11]
	  		  break;
 8005ab8:	e10b      	b.n	8005cd2 <main+0x35e>

	  		  case CONSULT_DATA:
	  			  updateUserMsg(0,0,consultUserMsg,&displayUpdateStatus);
 8005aba:	4b92      	ldr	r3, [pc, #584]	; (8005d04 <main+0x390>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	1dfb      	adds	r3, r7, #7
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f7fd fac2 	bl	800304c <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005ac8:	4b8c      	ldr	r3, [pc, #560]	; (8005cfc <main+0x388>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	2102      	movs	r1, #2
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f7fe fa1f 	bl	8003f14 <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005ad6:	4b8a      	ldr	r3, [pc, #552]	; (8005d00 <main+0x38c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	2103      	movs	r1, #3
 8005ade:	2000      	movs	r0, #0
 8005ae0:	f7fe fa18 	bl	8003f14 <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 8005ae4:	4b83      	ldr	r3, [pc, #524]	; (8005cf4 <main+0x380>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b41      	cmp	r3, #65	; 0x41
 8005aec:	d10b      	bne.n	8005b06 <main+0x192>
	  			  {
	  				  resetKeyPressed();
 8005aee:	f7ff ff03 	bl	80058f8 <resetKeyPressed>
	  				                      readyUserInterface(&displayUpdateStatus);
 8005af2:	1dfb      	adds	r3, r7, #7
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd fac4 	bl	8003082 <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(CONFIG_SENSOR);
 8005afa:	2003      	movs	r0, #3
 8005afc:	f000 fc42 	bl	8006384 <getNextMain>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]
	  				 consultStateMachine(&menuTesteSub);
	  				  readyUserInterface(&displayUpdateStatus);
	  				 menuTesteMain.menuState = getNextMain(START_TEST);
	  				 menuTesteSub.menuState = IDDLE;
	  			  }
	  		  break;
 8005b04:	e106      	b.n	8005d14 <main+0x3a0>
	  			  else if(key == CONFIRMAR)
 8005b06:	4b7b      	ldr	r3, [pc, #492]	; (8005cf4 <main+0x380>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b43      	cmp	r3, #67	; 0x43
 8005b0e:	f040 8101 	bne.w	8005d14 <main+0x3a0>
	  				  resetKeyPressed();
 8005b12:	f7ff fef1 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fd fab2 	bl	8003082 <readyUserInterface>
	  				 consultStateMachine(&menuTesteSub);
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fc f8ba 	bl	8001c9c <consultStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005b28:	1dfb      	adds	r3, r7, #7
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd faa9 	bl	8003082 <readyUserInterface>
	  				 menuTesteMain.menuState = getNextMain(START_TEST);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f000 fc27 	bl	8006384 <getNextMain>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
	  				 menuTesteSub.menuState = IDDLE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	72fb      	strb	r3, [r7, #11]
	  		  break;
 8005b3e:	e0e9      	b.n	8005d14 <main+0x3a0>

	  		  case CONFIG_SENSOR:
	  			  updateUserMsg(0,0,configUserMsg,&displayUpdateStatus);
 8005b40:	4b71      	ldr	r3, [pc, #452]	; (8005d08 <main+0x394>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	1dfb      	adds	r3, r7, #7
 8005b46:	2100      	movs	r1, #0
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f7fd fa7f 	bl	800304c <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005b4e:	4b6b      	ldr	r3, [pc, #428]	; (8005cfc <main+0x388>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	2102      	movs	r1, #2
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7fe f9dc 	bl	8003f14 <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005b5c:	4b68      	ldr	r3, [pc, #416]	; (8005d00 <main+0x38c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	2103      	movs	r1, #3
 8005b64:	2000      	movs	r0, #0
 8005b66:	f7fe f9d5 	bl	8003f14 <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 8005b6a:	4b62      	ldr	r3, [pc, #392]	; (8005cf4 <main+0x380>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b41      	cmp	r3, #65	; 0x41
 8005b72:	d10b      	bne.n	8005b8c <main+0x218>
	  			  {
	  				  resetKeyPressed();
 8005b74:	f7ff fec0 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005b78:	1dfb      	adds	r3, r7, #7
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd fa81 	bl	8003082 <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(EXPORT_DATA);
 8005b80:	2004      	movs	r0, #4
 8005b82:	f000 fbff 	bl	8006384 <getNextMain>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73fb      	strb	r3, [r7, #15]
	  				  configStateMachine(&menuTesteSub);
	  				  readyUserInterface(&displayUpdateStatus);
	  				  menuTesteSub.menuState = IDDLE;
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
	  			  }
	  		  break;
 8005b8a:	e0c5      	b.n	8005d18 <main+0x3a4>
	  			  else if(key == CONFIRMAR)
 8005b8c:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <main+0x380>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b43      	cmp	r3, #67	; 0x43
 8005b94:	f040 80c0 	bne.w	8005d18 <main+0x3a4>
	  				  resetKeyPressed();
 8005b98:	f7ff feae 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005b9c:	1dfb      	adds	r3, r7, #7
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fd fa6f 	bl	8003082 <readyUserInterface>
	  				  configStateMachine(&menuTesteSub);
 8005ba4:	f107 0308 	add.w	r3, r7, #8
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fb fa6d 	bl	8001088 <configStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005bae:	1dfb      	adds	r3, r7, #7
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fd fa66 	bl	8003082 <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	72fb      	strb	r3, [r7, #11]
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005bba:	2001      	movs	r0, #1
 8005bbc:	f000 fbe2 	bl	8006384 <getNextMain>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
	  		  break;
 8005bc4:	e0a8      	b.n	8005d18 <main+0x3a4>

	  		  case EXPORT_DATA:
	  			  updateUserMsg(0,0,exportUserMsg,&displayUpdateStatus);
 8005bc6:	4b51      	ldr	r3, [pc, #324]	; (8005d0c <main+0x398>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	1dfb      	adds	r3, r7, #7
 8005bcc:	2100      	movs	r1, #0
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f7fd fa3c 	bl	800304c <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005bd4:	4b49      	ldr	r3, [pc, #292]	; (8005cfc <main+0x388>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2102      	movs	r1, #2
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f7fe f999 	bl	8003f14 <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <main+0x38c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	2103      	movs	r1, #3
 8005bea:	2000      	movs	r0, #0
 8005bec:	f7fe f992 	bl	8003f14 <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 8005bf0:	4b40      	ldr	r3, [pc, #256]	; (8005cf4 <main+0x380>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b41      	cmp	r3, #65	; 0x41
 8005bf8:	d10b      	bne.n	8005c12 <main+0x29e>
	  			  {
	  				  resetKeyPressed();
 8005bfa:	f7ff fe7d 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005bfe:	1dfb      	adds	r3, r7, #7
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fd fa3e 	bl	8003082 <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(ERASE_DATA);
 8005c06:	2005      	movs	r0, #5
 8005c08:	f000 fbbc 	bl	8006384 <getNextMain>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]
	  				  readyUserInterface(&displayUpdateStatus);

	  				  menuTesteSub.menuState = IDDLE;
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
	  			  }
	  		  break;
 8005c10:	e084      	b.n	8005d1c <main+0x3a8>
	  			  else if(key == CONFIRMAR)
 8005c12:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <main+0x380>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b43      	cmp	r3, #67	; 0x43
 8005c1a:	d17f      	bne.n	8005d1c <main+0x3a8>
	  				  resetKeyPressed();
 8005c1c:	f7ff fe6c 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005c20:	1dfb      	adds	r3, r7, #7
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fd fa2d 	bl	8003082 <readyUserInterface>
	  				  exportStateMachine(&menuTesteSub);
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fd fa47 	bl	80030c0 <exportStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005c32:	1dfb      	adds	r3, r7, #7
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fd fa24 	bl	8003082 <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	72fb      	strb	r3, [r7, #11]
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005c3e:	2001      	movs	r0, #1
 8005c40:	f000 fba0 	bl	8006384 <getNextMain>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
	  		  break;
 8005c48:	e068      	b.n	8005d1c <main+0x3a8>

	  		  case ERASE_DATA:
	  			  updateUserMsg(0,0,eraseUserMsg,&displayUpdateStatus);
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <main+0x39c>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	1dfb      	adds	r3, r7, #7
 8005c50:	2100      	movs	r1, #0
 8005c52:	2000      	movs	r0, #0
 8005c54:	f7fd f9fa 	bl	800304c <updateUserMsg>
	  			  HW_PRINT_DATA(0,INSERTMSG,avancarUserMsg);
 8005c58:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <main+0x388>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2102      	movs	r1, #2
 8005c60:	2000      	movs	r0, #0
 8005c62:	f7fe f957 	bl	8003f14 <HW_PRINT_DATA>
	  			  HW_PRINT_DATA(0,OPTIONMSG,selecionarUserMsg);
 8005c66:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <main+0x38c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2103      	movs	r1, #3
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f7fe f950 	bl	8003f14 <HW_PRINT_DATA>
	  			  if(key == AVANCAR)
 8005c74:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <main+0x380>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b41      	cmp	r3, #65	; 0x41
 8005c7c:	d10b      	bne.n	8005c96 <main+0x322>
	  			  {
	  				  resetKeyPressed();
 8005c7e:	f7ff fe3b 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005c82:	1dfb      	adds	r3, r7, #7
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fd f9fc 	bl	8003082 <readyUserInterface>
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	f000 fb7a 	bl	8006384 <getNextMain>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
	  				  readyUserInterface(&displayUpdateStatus);

	  				  menuTesteSub.menuState = IDDLE;
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
	  			  }
	  		  break;
 8005c94:	e044      	b.n	8005d20 <main+0x3ac>
	  			  else if(key == CONFIRMAR)
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <main+0x380>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b43      	cmp	r3, #67	; 0x43
 8005c9e:	d13f      	bne.n	8005d20 <main+0x3ac>
	  				  resetKeyPressed();
 8005ca0:	f7ff fe2a 	bl	80058f8 <resetKeyPressed>
	  				  readyUserInterface(&displayUpdateStatus);
 8005ca4:	1dfb      	adds	r3, r7, #7
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fd f9eb 	bl	8003082 <readyUserInterface>
	  				  eraseStateMachine(&menuTesteSub);
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fb f93b 	bl	8000f2c <eraseStateMachine>
	  				  readyUserInterface(&displayUpdateStatus);
 8005cb6:	1dfb      	adds	r3, r7, #7
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fd f9e2 	bl	8003082 <readyUserInterface>
	  				  menuTesteSub.menuState = IDDLE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	72fb      	strb	r3, [r7, #11]
	  				  menuTesteMain.menuState = getNextMain(START_TEST);
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	f000 fb5e 	bl	8006384 <getNextMain>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]
	  		  break;
 8005ccc:	e028      	b.n	8005d20 <main+0x3ac>
	  		  break;
 8005cce:	bf00      	nop
 8005cd0:	e68a      	b.n	80059e8 <main+0x74>
	  		  break;
 8005cd2:	bf00      	nop
 8005cd4:	e688      	b.n	80059e8 <main+0x74>
 8005cd6:	bf00      	nop
 8005cd8:	40020800 	.word	0x40020800
 8005cdc:	20000808 	.word	0x20000808
 8005ce0:	20000760 	.word	0x20000760
 8005ce4:	200007a4 	.word	0x200007a4
 8005ce8:	2000000c 	.word	0x2000000c
 8005cec:	20000010 	.word	0x20000010
 8005cf0:	20000014 	.word	0x20000014
 8005cf4:	20000804 	.word	0x20000804
 8005cf8:	20000018 	.word	0x20000018
 8005cfc:	200000c4 	.word	0x200000c4
 8005d00:	200000d0 	.word	0x200000d0
 8005d04:	20000064 	.word	0x20000064
 8005d08:	20000074 	.word	0x20000074
 8005d0c:	200000a8 	.word	0x200000a8
 8005d10:	200000b4 	.word	0x200000b4
	  		  break;
 8005d14:	bf00      	nop
 8005d16:	e667      	b.n	80059e8 <main+0x74>
	  		  break;
 8005d18:	bf00      	nop
 8005d1a:	e665      	b.n	80059e8 <main+0x74>
	  		  break;
 8005d1c:	bf00      	nop
 8005d1e:	e663      	b.n	80059e8 <main+0x74>
	  		  break;
 8005d20:	bf00      	nop
	  switch(menuTesteMain.menuState)
 8005d22:	e661      	b.n	80059e8 <main+0x74>

08005d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b094      	sub	sp, #80	; 0x50
 8005d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d2a:	f107 0320 	add.w	r3, r7, #32
 8005d2e:	2230      	movs	r2, #48	; 0x30
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f007 ff52 	bl	800dbdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	605a      	str	r2, [r3, #4]
 8005d42:	609a      	str	r2, [r3, #8]
 8005d44:	60da      	str	r2, [r3, #12]
 8005d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	4b27      	ldr	r3, [pc, #156]	; (8005dec <SystemClock_Config+0xc8>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	4a26      	ldr	r2, [pc, #152]	; (8005dec <SystemClock_Config+0xc8>)
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d56:	6413      	str	r3, [r2, #64]	; 0x40
 8005d58:	4b24      	ldr	r3, [pc, #144]	; (8005dec <SystemClock_Config+0xc8>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d64:	2300      	movs	r3, #0
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	4b21      	ldr	r3, [pc, #132]	; (8005df0 <SystemClock_Config+0xcc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a20      	ldr	r2, [pc, #128]	; (8005df0 <SystemClock_Config+0xcc>)
 8005d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <SystemClock_Config+0xcc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d7c:	607b      	str	r3, [r7, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005d94:	230c      	movs	r3, #12
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005d98:	2360      	movs	r3, #96	; 0x60
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005da0:	2304      	movs	r3, #4
 8005da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005da4:	f107 0320 	add.w	r3, r7, #32
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fcf5 	bl	8007798 <HAL_RCC_OscConfig>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005db4:	f000 fae0 	bl	8006378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005db8:	230f      	movs	r3, #15
 8005dba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005dce:	f107 030c 	add.w	r3, r7, #12
 8005dd2:	2103      	movs	r1, #3
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 ff57 	bl	8007c88 <HAL_RCC_ClockConfig>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005de0:	f000 faca 	bl	8006378 <Error_Handler>
  }
}
 8005de4:	bf00      	nop
 8005de6:	3750      	adds	r7, #80	; 0x50
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40023800 	.word	0x40023800
 8005df0:	40007000 	.word	0x40007000

08005df4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005df8:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <MX_SPI1_Init+0x68>)
 8005dfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e0c:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e28:	2230      	movs	r2, #48	; 0x30
 8005e2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e40:	220a      	movs	r2, #10
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e44:	4804      	ldr	r0, [pc, #16]	; (8005e58 <MX_SPI1_Init+0x64>)
 8005e46:	f002 f8ff 	bl	8008048 <HAL_SPI_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005e50:	f000 fa92 	bl	8006378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000678 	.word	0x20000678
 8005e5c:	40013000 	.word	0x40013000

08005e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e66:	f107 030c 	add.w	r3, r7, #12
 8005e6a:	2224      	movs	r2, #36	; 0x24
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f007 feb4 	bl	800dbdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e7c:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005e84:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e8a:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005e90:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e9e:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005eb4:	230f      	movs	r3, #15
 8005eb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005ec4:	230f      	movs	r3, #15
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005ec8:	f107 030c 	add.w	r3, r7, #12
 8005ecc:	4619      	mov	r1, r3
 8005ece:	480d      	ldr	r0, [pc, #52]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005ed0:	f002 fdd2 	bl	8008a78 <HAL_TIM_Encoder_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005eda:	f000 fa4d 	bl	8006378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ee6:	1d3b      	adds	r3, r7, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4806      	ldr	r0, [pc, #24]	; (8005f04 <MX_TIM2_Init+0xa4>)
 8005eec:	f003 fafa 	bl	80094e4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005ef6:	f000 fa3f 	bl	8006378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005efa:	bf00      	nop
 8005efc:	3730      	adds	r7, #48	; 0x30
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	200006d0 	.word	0x200006d0

08005f08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	605a      	str	r2, [r3, #4]
 8005f18:	609a      	str	r2, [r3, #8]
 8005f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <MX_TIM3_Init+0x98>)
 8005f28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f2c:	2263      	movs	r2, #99	; 0x63
 8005f2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f30:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f3e:	4b17      	ldr	r3, [pc, #92]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f44:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005f4a:	4814      	ldr	r0, [pc, #80]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f4c:	f002 fcbc 	bl	80088c8 <HAL_TIM_Base_Init>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005f56:	f000 fa0f 	bl	8006378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005f60:	f107 0308 	add.w	r3, r7, #8
 8005f64:	4619      	mov	r1, r3
 8005f66:	480d      	ldr	r0, [pc, #52]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f68:	f003 f897 	bl	800909a <HAL_TIM_ConfigClockSource>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005f72:	f000 fa01 	bl	8006378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f76:	2300      	movs	r3, #0
 8005f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f7e:	463b      	mov	r3, r7
 8005f80:	4619      	mov	r1, r3
 8005f82:	4806      	ldr	r0, [pc, #24]	; (8005f9c <MX_TIM3_Init+0x94>)
 8005f84:	f003 faae 	bl	80094e4 <HAL_TIMEx_MasterConfigSynchronization>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8005f8e:	f000 f9f3 	bl	8006378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000718 	.word	0x20000718
 8005fa0:	40000400 	.word	0x40000400

08005fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005faa:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <MX_USART2_UART_Init+0x50>)
 8005fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fca:	220c      	movs	r2, #12
 8005fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fda:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <MX_USART2_UART_Init+0x4c>)
 8005fdc:	f003 fb04 	bl	80095e8 <HAL_UART_Init>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005fe6:	f000 f9c7 	bl	8006378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000760 	.word	0x20000760
 8005ff4:	40004400 	.word	0x40004400

08005ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <MX_DMA_Init+0x3c>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	4a0b      	ldr	r2, [pc, #44]	; (8006034 <MX_DMA_Init+0x3c>)
 8006008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800600c:	6313      	str	r3, [r2, #48]	; 0x30
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <MX_DMA_Init+0x3c>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800601a:	2200      	movs	r2, #0
 800601c:	2100      	movs	r1, #0
 800601e:	2010      	movs	r0, #16
 8006020:	f000 fdb1 	bl	8006b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006024:	2010      	movs	r0, #16
 8006026:	f000 fdca 	bl	8006bbe <HAL_NVIC_EnableIRQ>

}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800

08006038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800603e:	f107 0314 	add.w	r3, r7, #20
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	605a      	str	r2, [r3, #4]
 8006048:	609a      	str	r2, [r3, #8]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <MX_GPIO_Init+0x180>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	4a58      	ldr	r2, [pc, #352]	; (80061b8 <MX_GPIO_Init+0x180>)
 8006058:	f043 0304 	orr.w	r3, r3, #4
 800605c:	6313      	str	r3, [r2, #48]	; 0x30
 800605e:	4b56      	ldr	r3, [pc, #344]	; (80061b8 <MX_GPIO_Init+0x180>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	4b52      	ldr	r3, [pc, #328]	; (80061b8 <MX_GPIO_Init+0x180>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	4a51      	ldr	r2, [pc, #324]	; (80061b8 <MX_GPIO_Init+0x180>)
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	6313      	str	r3, [r2, #48]	; 0x30
 800607a:	4b4f      	ldr	r3, [pc, #316]	; (80061b8 <MX_GPIO_Init+0x180>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	4b4b      	ldr	r3, [pc, #300]	; (80061b8 <MX_GPIO_Init+0x180>)
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	4a4a      	ldr	r2, [pc, #296]	; (80061b8 <MX_GPIO_Init+0x180>)
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	6313      	str	r3, [r2, #48]	; 0x30
 8006096:	4b48      	ldr	r3, [pc, #288]	; (80061b8 <MX_GPIO_Init+0x180>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	60bb      	str	r3, [r7, #8]
 80060a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	4b44      	ldr	r3, [pc, #272]	; (80061b8 <MX_GPIO_Init+0x180>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	4a43      	ldr	r2, [pc, #268]	; (80061b8 <MX_GPIO_Init+0x180>)
 80060ac:	f043 0302 	orr.w	r3, r3, #2
 80060b0:	6313      	str	r3, [r2, #48]	; 0x30
 80060b2:	4b41      	ldr	r3, [pc, #260]	; (80061b8 <MX_GPIO_Init+0x180>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80060be:	2200      	movs	r2, #0
 80060c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060c4:	483d      	ldr	r0, [pc, #244]	; (80061bc <MX_GPIO_Init+0x184>)
 80060c6:	f001 fb1b 	bl	8007700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin
 80060ca:	2200      	movs	r2, #0
 80060cc:	f649 7110 	movw	r1, #40720	; 0x9f10
 80060d0:	483b      	ldr	r0, [pc, #236]	; (80061c0 <MX_GPIO_Init+0x188>)
 80060d2:	f001 fb15 	bl	8007700 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80060d6:	2200      	movs	r2, #0
 80060d8:	f24f 0108 	movw	r1, #61448	; 0xf008
 80060dc:	4839      	ldr	r0, [pc, #228]	; (80061c4 <MX_GPIO_Init+0x18c>)
 80060de:	f001 fb0f 	bl	8007700 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80060e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060e8:	2301      	movs	r3, #1
 80060ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f0:	2300      	movs	r3, #0
 80060f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	4619      	mov	r1, r3
 80060fa:	4830      	ldr	r0, [pc, #192]	; (80061bc <MX_GPIO_Init+0x184>)
 80060fc:	f001 f97c 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8006100:	2310      	movs	r3, #16
 8006102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006104:	2301      	movs	r3, #1
 8006106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006108:	2301      	movs	r3, #1
 800610a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800610c:	2300      	movs	r3, #0
 800610e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	4619      	mov	r1, r3
 8006116:	482a      	ldr	r0, [pc, #168]	; (80061c0 <MX_GPIO_Init+0x188>)
 8006118:	f001 f96e 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 800611c:	f24f 0308 	movw	r3, #61448	; 0xf008
 8006120:	617b      	str	r3, [r7, #20]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006122:	2301      	movs	r3, #1
 8006124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800612a:	2300      	movs	r3, #0
 800612c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800612e:	f107 0314 	add.w	r3, r7, #20
 8006132:	4619      	mov	r1, r3
 8006134:	4823      	ldr	r0, [pc, #140]	; (80061c4 <MX_GPIO_Init+0x18c>)
 8006136:	f001 f95f 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin LCD_D0_Pin
                           LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin|LCD_D0_Pin
 800613a:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 800613e:	617b      	str	r3, [r7, #20]
                          |LCD_EN_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006140:	2301      	movs	r3, #1
 8006142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006148:	2300      	movs	r3, #0
 800614a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800614c:	f107 0314 	add.w	r3, r7, #20
 8006150:	4619      	mov	r1, r3
 8006152:	481b      	ldr	r0, [pc, #108]	; (80061c0 <MX_GPIO_Init+0x188>)
 8006154:	f001 f950 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_MENU_Pin */
  GPIO_InitStruct.Pin = BT_MENU_Pin;
 8006158:	2310      	movs	r3, #16
 800615a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800615c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006162:	2301      	movs	r3, #1
 8006164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_MENU_GPIO_Port, &GPIO_InitStruct);
 8006166:	f107 0314 	add.w	r3, r7, #20
 800616a:	4619      	mov	r1, r3
 800616c:	4815      	ldr	r0, [pc, #84]	; (80061c4 <MX_GPIO_Init+0x18c>)
 800616e:	f001 f943 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_AVANCA_Pin BT_SELECT_Pin BT_STOP_Pin BT_INSERT_Pin */
  GPIO_InitStruct.Pin = BT_AVANCA_Pin|BT_SELECT_Pin|BT_STOP_Pin|BT_INSERT_Pin;
 8006172:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006178:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800617c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800617e:	2301      	movs	r3, #1
 8006180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006182:	f107 0314 	add.w	r3, r7, #20
 8006186:	4619      	mov	r1, r3
 8006188:	480e      	ldr	r0, [pc, #56]	; (80061c4 <MX_GPIO_Init+0x18c>)
 800618a:	f001 f935 	bl	80073f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800618e:	2200      	movs	r2, #0
 8006190:	2100      	movs	r1, #0
 8006192:	200a      	movs	r0, #10
 8006194:	f000 fcf7 	bl	8006b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006198:	200a      	movs	r0, #10
 800619a:	f000 fd10 	bl	8006bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800619e:	2200      	movs	r2, #0
 80061a0:	2100      	movs	r1, #0
 80061a2:	2017      	movs	r0, #23
 80061a4:	f000 fcef 	bl	8006b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80061a8:	2017      	movs	r0, #23
 80061aa:	f000 fd08 	bl	8006bbe <HAL_NVIC_EnableIRQ>

}
 80061ae:	bf00      	nop
 80061b0:	3728      	adds	r7, #40	; 0x28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40023800 	.word	0x40023800
 80061bc:	40020800 	.word	0x40020800
 80061c0:	40020000 	.word	0x40020000
 80061c4:	40020400 	.word	0x40020400

080061c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) //VERIFICAR O CLOCK PARA CALCULAR O NOVO TIMER
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a11      	ldr	r2, [pc, #68]	; (8006218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d119      	bne.n	800620c <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		timer3Count+=1;  //1ms
 80061d8:	4b10      	ldr	r3, [pc, #64]	; (800621c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	4a0f      	ldr	r2, [pc, #60]	; (800621c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80061e0:	6013      	str	r3, [r2, #0]
		if(timer3Count == 10)
 80061e2:	4b0e      	ldr	r3, [pc, #56]	; (800621c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b0a      	cmp	r3, #10
 80061e8:	d110      	bne.n	800620c <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			timer3Data += timer3Count;
 80061ea:	4b0c      	ldr	r3, [pc, #48]	; (800621c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4413      	add	r3, r2
 80061f4:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80061f6:	6013      	str	r3, [r2, #0]
			timer3Count = 0;
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
			samples++;
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	3301      	adds	r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800620a:	701a      	strb	r2, [r3, #0]
//			}
//		}

	}

}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000718 	.word	0x20000718
 800621c:	20000814 	.word	0x20000814
 8006220:	20000810 	.word	0x20000810
 8006224:	2000080f 	.word	0x2000080f

08006228 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]

	uartFlagRx = TRUE;
 8006234:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <HAL_UARTEx_RxEventCallback+0x78>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uartBuffer, sizeof(uartBuffer));
 800623a:	2202      	movs	r2, #2
 800623c:	4919      	ldr	r1, [pc, #100]	; (80062a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 800623e:	481a      	ldr	r0, [pc, #104]	; (80062a8 <HAL_UARTEx_RxEventCallback+0x80>)
 8006240:	f003 fa1f 	bl	8009682 <HAL_UARTEx_ReceiveToIdle_DMA>
  for(unsigned char i=0;i<Size;i++)  rxMSG[i] = uartBuffer[i];
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e009      	b.n	800625e <HAL_UARTEx_RxEventCallback+0x36>
 800624a:	7bfa      	ldrb	r2, [r7, #15]
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	4915      	ldr	r1, [pc, #84]	; (80062a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8006250:	5c8a      	ldrb	r2, [r1, r2]
 8006252:	b2d1      	uxtb	r1, r2
 8006254:	4a15      	ldr	r2, [pc, #84]	; (80062ac <HAL_UARTEx_RxEventCallback+0x84>)
 8006256:	54d1      	strb	r1, [r2, r3]
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	3301      	adds	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	b29b      	uxth	r3, r3
 8006262:	887a      	ldrh	r2, [r7, #2]
 8006264:	429a      	cmp	r2, r3
 8006266:	d8f0      	bhi.n	800624a <HAL_UARTEx_RxEventCallback+0x22>
  for(unsigned char i=0;i<Size;i++)  uartBuffer[i] = '0';
 8006268:	2300      	movs	r3, #0
 800626a:	73bb      	strb	r3, [r7, #14]
 800626c:	e006      	b.n	800627c <HAL_UARTEx_RxEventCallback+0x54>
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	4a0c      	ldr	r2, [pc, #48]	; (80062a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8006272:	2130      	movs	r1, #48	; 0x30
 8006274:	54d1      	strb	r1, [r2, r3]
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	3301      	adds	r3, #1
 800627a:	73bb      	strb	r3, [r7, #14]
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	b29b      	uxth	r3, r3
 8006280:	887a      	ldrh	r2, [r7, #2]
 8006282:	429a      	cmp	r2, r3
 8006284:	d8f3      	bhi.n	800626e <HAL_UARTEx_RxEventCallback+0x46>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <HAL_UARTEx_RxEventCallback+0x88>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <HAL_UARTEx_RxEventCallback+0x88>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0208 	bic.w	r2, r2, #8
 8006294:	601a      	str	r2, [r3, #0]

}
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	2000080e 	.word	0x2000080e
 80062a4:	20000808 	.word	0x20000808
 80062a8:	20000760 	.word	0x20000760
 80062ac:	2000080c 	.word	0x2000080c
 80062b0:	200007a4 	.word	0x200007a4

080062b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a11      	ldr	r2, [pc, #68]	; (8006304 <HAL_TIM_IC_CaptureCallback+0x50>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d11a      	bne.n	80062fa <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if(htim->Channel == 2)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7f1b      	ldrb	r3, [r3, #28]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d109      	bne.n	80062e0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80062cc:	2201      	movs	r2, #1
 80062ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062d2:	480d      	ldr	r0, [pc, #52]	; (8006308 <HAL_TIM_IC_CaptureCallback+0x54>)
 80062d4:	f001 fa14 	bl	8007700 <HAL_GPIO_WritePin>
			sensorFlag = 1;
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <HAL_TIM_IC_CaptureCallback+0x58>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
			sensorFlag = 0;
		}
	}

}
 80062de:	e00c      	b.n	80062fa <HAL_TIM_IC_CaptureCallback+0x46>
		else if(htim->Channel == 1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	7f1b      	ldrb	r3, [r3, #28]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d108      	bne.n	80062fa <HAL_TIM_IC_CaptureCallback+0x46>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80062e8:	2200      	movs	r2, #0
 80062ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062ee:	4806      	ldr	r0, [pc, #24]	; (8006308 <HAL_TIM_IC_CaptureCallback+0x54>)
 80062f0:	f001 fa06 	bl	8007700 <HAL_GPIO_WritePin>
			sensorFlag = 0;
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <HAL_TIM_IC_CaptureCallback+0x58>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200006d0 	.word	0x200006d0
 8006308:	40020800 	.word	0x40020800
 800630c:	200000de 	.word	0x200000de

08006310 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006320:	d012      	beq.n	8006348 <HAL_GPIO_EXTI_Callback+0x38>
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	dc1f      	bgt.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d019      	beq.n	8006360 <HAL_GPIO_EXTI_Callback+0x50>
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	dc1b      	bgt.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d011      	beq.n	8006358 <HAL_GPIO_EXTI_Callback+0x48>
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	dc17      	bgt.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
 8006338:	2b10      	cmp	r3, #16
 800633a:	d009      	beq.n	8006350 <HAL_GPIO_EXTI_Callback+0x40>
 800633c:	2b20      	cmp	r3, #32
 800633e:	d113      	bne.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
	{
		case BT_AVANCA_Pin:
			key = AVANCAR;
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <HAL_GPIO_EXTI_Callback+0x64>)
 8006342:	2241      	movs	r2, #65	; 0x41
 8006344:	701a      	strb	r2, [r3, #0]
		break;
 8006346:	e00f      	b.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_INSERT_Pin:
			key = INSERIR;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <HAL_GPIO_EXTI_Callback+0x64>)
 800634a:	2249      	movs	r2, #73	; 0x49
 800634c:	701a      	strb	r2, [r3, #0]
		break;
 800634e:	e00b      	b.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_MENU_Pin:
			key = MENU;
 8006350:	4b08      	ldr	r3, [pc, #32]	; (8006374 <HAL_GPIO_EXTI_Callback+0x64>)
 8006352:	224d      	movs	r2, #77	; 0x4d
 8006354:	701a      	strb	r2, [r3, #0]
		break;
 8006356:	e007      	b.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_SELECT_Pin:
			key = CONFIRMAR;
 8006358:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_GPIO_EXTI_Callback+0x64>)
 800635a:	2243      	movs	r2, #67	; 0x43
 800635c:	701a      	strb	r2, [r3, #0]
		break;
 800635e:	e003      	b.n	8006368 <HAL_GPIO_EXTI_Callback+0x58>
		case BT_STOP_Pin:
			key = PARAR;
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <HAL_GPIO_EXTI_Callback+0x64>)
 8006362:	2250      	movs	r2, #80	; 0x50
 8006364:	701a      	strb	r2, [r3, #0]
		break;
 8006366:	bf00      	nop
	}

}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	20000804 	.word	0x20000804

08006378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800637c:	b672      	cpsid	i
}
 800637e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006380:	e7fe      	b.n	8006380 <Error_Handler+0x8>
	...

08006384 <getNextMain>:

struct Menu menuMain ={IDDLE,IDDLE,IDDLE,IDDLE};


unsigned char getNextMain(unsigned char nextState)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	71fb      	strb	r3, [r7, #7]

    menuMain.menuNext = nextState;
 800638e:	4a05      	ldr	r2, [pc, #20]	; (80063a4 <getNextMain+0x20>)
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	7013      	strb	r3, [r2, #0]
    return menuMain.menuNext;
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <getNextMain+0x20>)
 8006396:	781b      	ldrb	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20000890 	.word	0x20000890

080063a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	607b      	str	r3, [r7, #4]
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <HAL_MspInit+0x4c>)
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	4a0f      	ldr	r2, [pc, #60]	; (80063f4 <HAL_MspInit+0x4c>)
 80063b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063bc:	6453      	str	r3, [r2, #68]	; 0x44
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <HAL_MspInit+0x4c>)
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	603b      	str	r3, [r7, #0]
 80063ce:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_MspInit+0x4c>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <HAL_MspInit+0x4c>)
 80063d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d8:	6413      	str	r3, [r2, #64]	; 0x40
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <HAL_MspInit+0x4c>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40023800 	.word	0x40023800

080063f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	; 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006400:	f107 0314 	add.w	r3, r7, #20
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	605a      	str	r2, [r3, #4]
 800640a:	609a      	str	r2, [r3, #8]
 800640c:	60da      	str	r2, [r3, #12]
 800640e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a19      	ldr	r2, [pc, #100]	; (800647c <HAL_SPI_MspInit+0x84>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d12b      	bne.n	8006472 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	4b18      	ldr	r3, [pc, #96]	; (8006480 <HAL_SPI_MspInit+0x88>)
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	4a17      	ldr	r2, [pc, #92]	; (8006480 <HAL_SPI_MspInit+0x88>)
 8006424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006428:	6453      	str	r3, [r2, #68]	; 0x44
 800642a:	4b15      	ldr	r3, [pc, #84]	; (8006480 <HAL_SPI_MspInit+0x88>)
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <HAL_SPI_MspInit+0x88>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <HAL_SPI_MspInit+0x88>)
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	6313      	str	r3, [r2, #48]	; 0x30
 8006446:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <HAL_SPI_MspInit+0x88>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006452:	23e0      	movs	r3, #224	; 0xe0
 8006454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006456:	2302      	movs	r3, #2
 8006458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800645a:	2301      	movs	r3, #1
 800645c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800645e:	2303      	movs	r3, #3
 8006460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006462:	2305      	movs	r3, #5
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006466:	f107 0314 	add.w	r3, r7, #20
 800646a:	4619      	mov	r1, r3
 800646c:	4805      	ldr	r0, [pc, #20]	; (8006484 <HAL_SPI_MspInit+0x8c>)
 800646e:	f000 ffc3 	bl	80073f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006472:	bf00      	nop
 8006474:	3728      	adds	r7, #40	; 0x28
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40013000 	.word	0x40013000
 8006480:	40023800 	.word	0x40023800
 8006484:	40020000 	.word	0x40020000

08006488 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	605a      	str	r2, [r3, #4]
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	60da      	str	r2, [r3, #12]
 800649e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d133      	bne.n	8006512 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	4b1b      	ldr	r3, [pc, #108]	; (800651c <HAL_TIM_Encoder_MspInit+0x94>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4a1a      	ldr	r2, [pc, #104]	; (800651c <HAL_TIM_Encoder_MspInit+0x94>)
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <HAL_TIM_Encoder_MspInit+0x94>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	4b14      	ldr	r3, [pc, #80]	; (800651c <HAL_TIM_Encoder_MspInit+0x94>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4a13      	ldr	r2, [pc, #76]	; (800651c <HAL_TIM_Encoder_MspInit+0x94>)
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	6313      	str	r3, [r2, #48]	; 0x30
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <HAL_TIM_Encoder_MspInit+0x94>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064e2:	2303      	movs	r3, #3
 80064e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e6:	2302      	movs	r3, #2
 80064e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ee:	2300      	movs	r3, #0
 80064f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80064f2:	2301      	movs	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064f6:	f107 0314 	add.w	r3, r7, #20
 80064fa:	4619      	mov	r1, r3
 80064fc:	4808      	ldr	r0, [pc, #32]	; (8006520 <HAL_TIM_Encoder_MspInit+0x98>)
 80064fe:	f000 ff7b 	bl	80073f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006502:	2200      	movs	r2, #0
 8006504:	2100      	movs	r1, #0
 8006506:	201c      	movs	r0, #28
 8006508:	f000 fb3d 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800650c:	201c      	movs	r0, #28
 800650e:	f000 fb56 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006512:	bf00      	nop
 8006514:	3728      	adds	r7, #40	; 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40023800 	.word	0x40023800
 8006520:	40020000 	.word	0x40020000

08006524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a0e      	ldr	r2, [pc, #56]	; (800656c <HAL_TIM_Base_MspInit+0x48>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d115      	bne.n	8006562 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <HAL_TIM_Base_MspInit+0x4c>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <HAL_TIM_Base_MspInit+0x4c>)
 8006540:	f043 0302 	orr.w	r3, r3, #2
 8006544:	6413      	str	r3, [r2, #64]	; 0x40
 8006546:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <HAL_TIM_Base_MspInit+0x4c>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	201d      	movs	r0, #29
 8006558:	f000 fb15 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800655c:	201d      	movs	r0, #29
 800655e:	f000 fb2e 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40000400 	.word	0x40000400
 8006570:	40023800 	.word	0x40023800

08006574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800657c:	f107 0314 	add.w	r3, r7, #20
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	609a      	str	r2, [r3, #8]
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a34      	ldr	r2, [pc, #208]	; (8006664 <HAL_UART_MspInit+0xf0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d161      	bne.n	800665a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	4b33      	ldr	r3, [pc, #204]	; (8006668 <HAL_UART_MspInit+0xf4>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	4a32      	ldr	r2, [pc, #200]	; (8006668 <HAL_UART_MspInit+0xf4>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	6413      	str	r3, [r2, #64]	; 0x40
 80065a6:	4b30      	ldr	r3, [pc, #192]	; (8006668 <HAL_UART_MspInit+0xf4>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <HAL_UART_MspInit+0xf4>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	4a2b      	ldr	r2, [pc, #172]	; (8006668 <HAL_UART_MspInit+0xf4>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6313      	str	r3, [r2, #48]	; 0x30
 80065c2:	4b29      	ldr	r3, [pc, #164]	; (8006668 <HAL_UART_MspInit+0xf4>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80065ce:	230c      	movs	r3, #12
 80065d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d2:	2302      	movs	r3, #2
 80065d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065da:	2303      	movs	r3, #3
 80065dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065de:	2307      	movs	r3, #7
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e2:	f107 0314 	add.w	r3, r7, #20
 80065e6:	4619      	mov	r1, r3
 80065e8:	4820      	ldr	r0, [pc, #128]	; (800666c <HAL_UART_MspInit+0xf8>)
 80065ea:	f000 ff05 	bl	80073f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80065ee:	4b20      	ldr	r3, [pc, #128]	; (8006670 <HAL_UART_MspInit+0xfc>)
 80065f0:	4a20      	ldr	r2, [pc, #128]	; (8006674 <HAL_UART_MspInit+0x100>)
 80065f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80065f4:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <HAL_UART_MspInit+0xfc>)
 80065f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065fc:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <HAL_UART_MspInit+0xfc>)
 80065fe:	2200      	movs	r2, #0
 8006600:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006602:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <HAL_UART_MspInit+0xfc>)
 8006604:	2200      	movs	r2, #0
 8006606:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006608:	4b19      	ldr	r3, [pc, #100]	; (8006670 <HAL_UART_MspInit+0xfc>)
 800660a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800660e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006610:	4b17      	ldr	r3, [pc, #92]	; (8006670 <HAL_UART_MspInit+0xfc>)
 8006612:	2200      	movs	r2, #0
 8006614:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <HAL_UART_MspInit+0xfc>)
 8006618:	2200      	movs	r2, #0
 800661a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <HAL_UART_MspInit+0xfc>)
 800661e:	2200      	movs	r2, #0
 8006620:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <HAL_UART_MspInit+0xfc>)
 8006624:	2200      	movs	r2, #0
 8006626:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_UART_MspInit+0xfc>)
 800662a:	2200      	movs	r2, #0
 800662c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800662e:	4810      	ldr	r0, [pc, #64]	; (8006670 <HAL_UART_MspInit+0xfc>)
 8006630:	f000 fae0 	bl	8006bf4 <HAL_DMA_Init>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800663a:	f7ff fe9d 	bl	8006378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a0b      	ldr	r2, [pc, #44]	; (8006670 <HAL_UART_MspInit+0xfc>)
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_UART_MspInit+0xfc>)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800664a:	2200      	movs	r2, #0
 800664c:	2100      	movs	r1, #0
 800664e:	2026      	movs	r0, #38	; 0x26
 8006650:	f000 fa99 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006654:	2026      	movs	r0, #38	; 0x26
 8006656:	f000 fab2 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800665a:	bf00      	nop
 800665c:	3728      	adds	r7, #40	; 0x28
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40004400 	.word	0x40004400
 8006668:	40023800 	.word	0x40023800
 800666c:	40020000 	.word	0x40020000
 8006670:	200007a4 	.word	0x200007a4
 8006674:	40026088 	.word	0x40026088

08006678 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimerHandler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
	if(Timer1>0)
 800667c:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <SDTimerHandler+0x40>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d006      	beq.n	8006694 <SDTimerHandler+0x1c>
		Timer1--;
 8006686:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <SDTimerHandler+0x40>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <SDTimerHandler+0x40>)
 8006692:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8006694:	4b09      	ldr	r3, [pc, #36]	; (80066bc <SDTimerHandler+0x44>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d006      	beq.n	80066ac <SDTimerHandler+0x34>
		Timer2--;
 800669e:	4b07      	ldr	r3, [pc, #28]	; (80066bc <SDTimerHandler+0x44>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	4b04      	ldr	r3, [pc, #16]	; (80066bc <SDTimerHandler+0x44>)
 80066aa:	701a      	strb	r2, [r3, #0]
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000895 	.word	0x20000895
 80066bc:	20000896 	.word	0x20000896

080066c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066c4:	e7fe      	b.n	80066c4 <NMI_Handler+0x4>

080066c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066ca:	e7fe      	b.n	80066ca <HardFault_Handler+0x4>

080066cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066d0:	e7fe      	b.n	80066d0 <MemManage_Handler+0x4>

080066d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066d2:	b480      	push	{r7}
 80066d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066d6:	e7fe      	b.n	80066d6 <BusFault_Handler+0x4>

080066d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066dc:	e7fe      	b.n	80066dc <UsageFault_Handler+0x4>

080066de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066de:	b480      	push	{r7}
 80066e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066e2:	bf00      	nop
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <SysTick_Handler+0x30>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	3301      	adds	r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <SysTick_Handler+0x30>)
 8006718:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <SysTick_Handler+0x30>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b09      	cmp	r3, #9
 8006722:	d904      	bls.n	800672e <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <SysTick_Handler+0x30>)
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
		SDTimerHandler();
 800672a:	f7ff ffa5 	bl	8006678 <SDTimerHandler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800672e:	f000 f90b 	bl	8006948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000894 	.word	0x20000894

0800673c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_MENU_Pin);
 8006740:	2010      	movs	r0, #16
 8006742:	f001 f811 	bl	8007768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006750:	4802      	ldr	r0, [pc, #8]	; (800675c <DMA1_Stream5_IRQHandler+0x10>)
 8006752:	f000 fbe7 	bl	8006f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200007a4 	.word	0x200007a4

08006760 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_AVANCA_Pin);
 8006764:	2020      	movs	r0, #32
 8006766:	f000 ffff 	bl	8007768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_SELECT_Pin);
 800676a:	2040      	movs	r0, #64	; 0x40
 800676c:	f000 fffc 	bl	8007768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STOP_Pin);
 8006770:	2080      	movs	r0, #128	; 0x80
 8006772:	f000 fff9 	bl	8007768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_INSERT_Pin);
 8006776:	f44f 7080 	mov.w	r0, #256	; 0x100
 800677a:	f000 fff5 	bl	8007768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006788:	4802      	ldr	r0, [pc, #8]	; (8006794 <TIM2_IRQHandler+0x10>)
 800678a:	f002 fb7e 	bl	8008e8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200006d0 	.word	0x200006d0

08006798 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800679c:	4802      	ldr	r0, [pc, #8]	; (80067a8 <TIM3_IRQHandler+0x10>)
 800679e:	f002 fb74 	bl	8008e8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000718 	.word	0x20000718

080067ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80067b0:	4802      	ldr	r0, [pc, #8]	; (80067bc <USART2_IRQHandler+0x10>)
 80067b2:	f002 ffcb 	bl	800974c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80067b6:	bf00      	nop
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000760 	.word	0x20000760

080067c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067c8:	4a14      	ldr	r2, [pc, #80]	; (800681c <_sbrk+0x5c>)
 80067ca:	4b15      	ldr	r3, [pc, #84]	; (8006820 <_sbrk+0x60>)
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <_sbrk+0x64>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <_sbrk+0x64>)
 80067de:	4a12      	ldr	r2, [pc, #72]	; (8006828 <_sbrk+0x68>)
 80067e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <_sbrk+0x64>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4413      	add	r3, r2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d207      	bcs.n	8006800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067f0:	f007 f9b8 	bl	800db64 <__errno>
 80067f4:	4603      	mov	r3, r0
 80067f6:	220c      	movs	r2, #12
 80067f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067fa:	f04f 33ff 	mov.w	r3, #4294967295
 80067fe:	e009      	b.n	8006814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006800:	4b08      	ldr	r3, [pc, #32]	; (8006824 <_sbrk+0x64>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <_sbrk+0x64>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	4a05      	ldr	r2, [pc, #20]	; (8006824 <_sbrk+0x64>)
 8006810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20020000 	.word	0x20020000
 8006820:	00000400 	.word	0x00000400
 8006824:	2000089c 	.word	0x2000089c
 8006828:	20000b48 	.word	0x20000b48

0800682c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006830:	4b06      	ldr	r3, [pc, #24]	; (800684c <SystemInit+0x20>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	4a05      	ldr	r2, [pc, #20]	; (800684c <SystemInit+0x20>)
 8006838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800683c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006840:	bf00      	nop
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006854:	480d      	ldr	r0, [pc, #52]	; (800688c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006856:	490e      	ldr	r1, [pc, #56]	; (8006890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006858:	4a0e      	ldr	r2, [pc, #56]	; (8006894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800685a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800685c:	e002      	b.n	8006864 <LoopCopyDataInit>

0800685e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800685e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006862:	3304      	adds	r3, #4

08006864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006868:	d3f9      	bcc.n	800685e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800686a:	4a0b      	ldr	r2, [pc, #44]	; (8006898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800686c:	4c0b      	ldr	r4, [pc, #44]	; (800689c <LoopFillZerobss+0x26>)
  movs r3, #0
 800686e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006870:	e001      	b.n	8006876 <LoopFillZerobss>

08006872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006874:	3204      	adds	r2, #4

08006876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006878:	d3fb      	bcc.n	8006872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800687a:	f7ff ffd7 	bl	800682c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800687e:	f007 f977 	bl	800db70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006882:	f7ff f877 	bl	8005974 <main>
  bx  lr    
 8006886:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800688c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006890:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8006894:	08010dcc 	.word	0x08010dcc
  ldr r2, =_sbss
 8006898:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800689c:	20000b44 	.word	0x20000b44

080068a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068a0:	e7fe      	b.n	80068a0 <ADC_IRQHandler>
	...

080068a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068a8:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <HAL_Init+0x40>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a0d      	ldr	r2, [pc, #52]	; (80068e4 <HAL_Init+0x40>)
 80068ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_Init+0x40>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a0a      	ldr	r2, [pc, #40]	; (80068e4 <HAL_Init+0x40>)
 80068ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068c0:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <HAL_Init+0x40>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a07      	ldr	r2, [pc, #28]	; (80068e4 <HAL_Init+0x40>)
 80068c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068cc:	2003      	movs	r0, #3
 80068ce:	f000 f94f 	bl	8006b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068d2:	200f      	movs	r0, #15
 80068d4:	f000 f808 	bl	80068e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068d8:	f7ff fd66 	bl	80063a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023c00 	.word	0x40023c00

080068e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068f0:	4b12      	ldr	r3, [pc, #72]	; (800693c <HAL_InitTick+0x54>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4b12      	ldr	r3, [pc, #72]	; (8006940 <HAL_InitTick+0x58>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006902:	fbb2 f3f3 	udiv	r3, r2, r3
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f967 	bl	8006bda <HAL_SYSTICK_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e00e      	b.n	8006934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b0f      	cmp	r3, #15
 800691a:	d80a      	bhi.n	8006932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800691c:	2200      	movs	r2, #0
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	f000 f92f 	bl	8006b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006928:	4a06      	ldr	r2, [pc, #24]	; (8006944 <HAL_InitTick+0x5c>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	200000e4 	.word	0x200000e4
 8006940:	200000ec 	.word	0x200000ec
 8006944:	200000e8 	.word	0x200000e8

08006948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <HAL_IncTick+0x20>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	4b06      	ldr	r3, [pc, #24]	; (800696c <HAL_IncTick+0x24>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4413      	add	r3, r2
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <HAL_IncTick+0x24>)
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	200000ec 	.word	0x200000ec
 800696c:	200008a0 	.word	0x200008a0

08006970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  return uwTick;
 8006974:	4b03      	ldr	r3, [pc, #12]	; (8006984 <HAL_GetTick+0x14>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	200008a0 	.word	0x200008a0

08006988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006990:	f7ff ffee 	bl	8006970 <HAL_GetTick>
 8006994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d005      	beq.n	80069ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069a2:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <HAL_Delay+0x44>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069ae:	bf00      	nop
 80069b0:	f7ff ffde 	bl	8006970 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d8f7      	bhi.n	80069b0 <HAL_Delay+0x28>
  {
  }
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	200000ec 	.word	0x200000ec

080069d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <__NVIC_SetPriorityGrouping+0x44>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069ec:	4013      	ands	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a02:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <__NVIC_SetPriorityGrouping+0x44>)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	60d3      	str	r3, [r2, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	e000ed00 	.word	0xe000ed00

08006a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <__NVIC_GetPriorityGrouping+0x18>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	0a1b      	lsrs	r3, r3, #8
 8006a22:	f003 0307 	and.w	r3, r3, #7
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	db0b      	blt.n	8006a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	f003 021f 	and.w	r2, r3, #31
 8006a4c:	4907      	ldr	r1, [pc, #28]	; (8006a6c <__NVIC_EnableIRQ+0x38>)
 8006a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2001      	movs	r0, #1
 8006a56:	fa00 f202 	lsl.w	r2, r0, r2
 8006a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	e000e100 	.word	0xe000e100

08006a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	db0a      	blt.n	8006a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	490c      	ldr	r1, [pc, #48]	; (8006abc <__NVIC_SetPriority+0x4c>)
 8006a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8e:	0112      	lsls	r2, r2, #4
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	440b      	add	r3, r1
 8006a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a98:	e00a      	b.n	8006ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	4908      	ldr	r1, [pc, #32]	; (8006ac0 <__NVIC_SetPriority+0x50>)
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	0112      	lsls	r2, r2, #4
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	440b      	add	r3, r1
 8006aae:	761a      	strb	r2, [r3, #24]
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	e000e100 	.word	0xe000e100
 8006ac0:	e000ed00 	.word	0xe000ed00

08006ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b089      	sub	sp, #36	; 0x24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f1c3 0307 	rsb	r3, r3, #7
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	bf28      	it	cs
 8006ae2:	2304      	movcs	r3, #4
 8006ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d902      	bls.n	8006af4 <NVIC_EncodePriority+0x30>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3b03      	subs	r3, #3
 8006af2:	e000      	b.n	8006af6 <NVIC_EncodePriority+0x32>
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af8:	f04f 32ff 	mov.w	r2, #4294967295
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43da      	mvns	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	401a      	ands	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	43d9      	mvns	r1, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b1c:	4313      	orrs	r3, r2
         );
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3724      	adds	r7, #36	; 0x24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b3c:	d301      	bcc.n	8006b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e00f      	b.n	8006b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b42:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <SysTick_Config+0x40>)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b4a:	210f      	movs	r1, #15
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	f7ff ff8e 	bl	8006a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <SysTick_Config+0x40>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b5a:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <SysTick_Config+0x40>)
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	e000e010 	.word	0xe000e010

08006b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff ff29 	bl	80069d0 <__NVIC_SetPriorityGrouping>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b98:	f7ff ff3e 	bl	8006a18 <__NVIC_GetPriorityGrouping>
 8006b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	6978      	ldr	r0, [r7, #20]
 8006ba4:	f7ff ff8e 	bl	8006ac4 <NVIC_EncodePriority>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ff5d 	bl	8006a70 <__NVIC_SetPriority>
}
 8006bb6:	bf00      	nop
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff ff31 	bl	8006a34 <__NVIC_EnableIRQ>
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff ffa2 	bl	8006b2c <SysTick_Config>
 8006be8:	4603      	mov	r3, r0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006c00:	f7ff feb6 	bl	8006970 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e099      	b.n	8006d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c30:	e00f      	b.n	8006c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c32:	f7ff fe9d 	bl	8006970 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d908      	bls.n	8006c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e078      	b.n	8006d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e8      	bne.n	8006c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4b38      	ldr	r3, [pc, #224]	; (8006d4c <HAL_DMA_Init+0x158>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d107      	bne.n	8006cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0307 	bic.w	r3, r3, #7
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d117      	bne.n	8006d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00e      	beq.n	8006d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fb01 	bl	8007300 <DMA_CheckFifoParam>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006d12:	2301      	movs	r3, #1
 8006d14:	e016      	b.n	8006d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fab8 	bl	8007294 <DMA_CalcBaseAndBitshift>
 8006d24:	4603      	mov	r3, r0
 8006d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2c:	223f      	movs	r2, #63	; 0x3f
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	f010803f 	.word	0xf010803f

08006d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_DMA_Start_IT+0x26>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e040      	b.n	8006df8 <HAL_DMA_Start_IT+0xa8>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d12f      	bne.n	8006dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fa4a 	bl	8007238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da8:	223f      	movs	r2, #63	; 0x3f
 8006daa:	409a      	lsls	r2, r3
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0216 	orr.w	r2, r2, #22
 8006dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0208 	orr.w	r2, r2, #8
 8006dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e005      	b.n	8006df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
 8006df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e0e:	f7ff fdaf 	bl	8006970 <HAL_GetTick>
 8006e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d008      	beq.n	8006e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2280      	movs	r2, #128	; 0x80
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e052      	b.n	8006ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0216 	bic.w	r2, r2, #22
 8006e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695a      	ldr	r2, [r3, #20]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <HAL_DMA_Abort+0x62>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0208 	bic.w	r2, r2, #8
 8006e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e82:	e013      	b.n	8006eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e84:	f7ff fd74 	bl	8006970 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	d90c      	bls.n	8006eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e015      	b.n	8006ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e4      	bne.n	8006e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ebe:	223f      	movs	r2, #63	; 0x3f
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d004      	beq.n	8006efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2280      	movs	r2, #128	; 0x80
 8006ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e00c      	b.n	8006f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2205      	movs	r2, #5
 8006f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f30:	4b8e      	ldr	r3, [pc, #568]	; (800716c <HAL_DMA_IRQHandler+0x248>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a8e      	ldr	r2, [pc, #568]	; (8007170 <HAL_DMA_IRQHandler+0x24c>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	0a9b      	lsrs	r3, r3, #10
 8006f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4e:	2208      	movs	r2, #8
 8006f50:	409a      	lsls	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01a      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d013      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0204 	bic.w	r2, r2, #4
 8006f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f88:	f043 0201 	orr.w	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f94:	2201      	movs	r2, #1
 8006f96:	409a      	lsls	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	409a      	lsls	r2, r3
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbe:	f043 0202 	orr.w	r2, r3, #2
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	2204      	movs	r2, #4
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d012      	beq.n	8006ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe8:	2204      	movs	r2, #4
 8006fea:	409a      	lsls	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff4:	f043 0204 	orr.w	r2, r3, #4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007000:	2210      	movs	r2, #16
 8007002:	409a      	lsls	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d043      	beq.n	8007094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	d03c      	beq.n	8007094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701e:	2210      	movs	r2, #16
 8007020:	409a      	lsls	r2, r3
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d018      	beq.n	8007066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d108      	bne.n	8007054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d024      	beq.n	8007094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
 8007052:	e01f      	b.n	8007094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01b      	beq.n	8007094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
 8007064:	e016      	b.n	8007094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d107      	bne.n	8007084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0208 	bic.w	r2, r2, #8
 8007082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007098:	2220      	movs	r2, #32
 800709a:	409a      	lsls	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4013      	ands	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 808f 	beq.w	80071c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8087 	beq.w	80071c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ba:	2220      	movs	r2, #32
 80070bc:	409a      	lsls	r2, r3
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d136      	bne.n	800713c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0216 	bic.w	r2, r2, #22
 80070dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <HAL_DMA_IRQHandler+0x1da>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0208 	bic.w	r2, r2, #8
 800710c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007112:	223f      	movs	r2, #63	; 0x3f
 8007114:	409a      	lsls	r2, r3
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712e:	2b00      	cmp	r3, #0
 8007130:	d07e      	beq.n	8007230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
        }
        return;
 800713a:	e079      	b.n	8007230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01d      	beq.n	8007186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	2b00      	cmp	r3, #0
 800715e:	d031      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4798      	blx	r3
 8007168:	e02c      	b.n	80071c4 <HAL_DMA_IRQHandler+0x2a0>
 800716a:	bf00      	nop
 800716c:	200000e4 	.word	0x200000e4
 8007170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d023      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
 8007184:	e01e      	b.n	80071c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10f      	bne.n	80071b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0210 	bic.w	r2, r2, #16
 80071a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d032      	beq.n	8007232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d022      	beq.n	800721e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2205      	movs	r2, #5
 80071dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0201 	bic.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d307      	bcc.n	800720c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f2      	bne.n	80071f0 <HAL_DMA_IRQHandler+0x2cc>
 800720a:	e000      	b.n	800720e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800720c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
 800722e:	e000      	b.n	8007232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007230:	bf00      	nop
    }
  }
}
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d108      	bne.n	8007278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007276:	e007      	b.n	8007288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	60da      	str	r2, [r3, #12]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	3b10      	subs	r3, #16
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <DMA_CalcBaseAndBitshift+0x64>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	091b      	lsrs	r3, r3, #4
 80072ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80072ae:	4a13      	ldr	r2, [pc, #76]	; (80072fc <DMA_CalcBaseAndBitshift+0x68>)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d909      	bls.n	80072d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072ca:	f023 0303 	bic.w	r3, r3, #3
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	659a      	str	r2, [r3, #88]	; 0x58
 80072d4:	e007      	b.n	80072e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	aaaaaaab 	.word	0xaaaaaaab
 80072fc:	080104a8 	.word	0x080104a8

08007300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d11f      	bne.n	800735a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d856      	bhi.n	80073ce <DMA_CheckFifoParam+0xce>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <DMA_CheckFifoParam+0x28>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	08007339 	.word	0x08007339
 800732c:	0800734b 	.word	0x0800734b
 8007330:	08007339 	.word	0x08007339
 8007334:	080073cf 	.word	0x080073cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d046      	beq.n	80073d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007348:	e043      	b.n	80073d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007352:	d140      	bne.n	80073d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007358:	e03d      	b.n	80073d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007362:	d121      	bne.n	80073a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b03      	cmp	r3, #3
 8007368:	d837      	bhi.n	80073da <DMA_CheckFifoParam+0xda>
 800736a:	a201      	add	r2, pc, #4	; (adr r2, 8007370 <DMA_CheckFifoParam+0x70>)
 800736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007370:	08007381 	.word	0x08007381
 8007374:	08007387 	.word	0x08007387
 8007378:	08007381 	.word	0x08007381
 800737c:	08007399 	.word	0x08007399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
      break;
 8007384:	e030      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d025      	beq.n	80073de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007396:	e022      	b.n	80073de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073a0:	d11f      	bne.n	80073e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073a6:	e01c      	b.n	80073e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d903      	bls.n	80073b6 <DMA_CheckFifoParam+0xb6>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d003      	beq.n	80073bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80073b4:	e018      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
      break;
 80073ba:	e015      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00e      	beq.n	80073e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e00b      	b.n	80073e6 <DMA_CheckFifoParam+0xe6>
      break;
 80073ce:	bf00      	nop
 80073d0:	e00a      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      break;
 80073d2:	bf00      	nop
 80073d4:	e008      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      break;
 80073d6:	bf00      	nop
 80073d8:	e006      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      break;
 80073da:	bf00      	nop
 80073dc:	e004      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      break;
 80073de:	bf00      	nop
 80073e0:	e002      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80073e2:	bf00      	nop
 80073e4:	e000      	b.n	80073e8 <DMA_CheckFifoParam+0xe8>
      break;
 80073e6:	bf00      	nop
    }
  } 
  
  return status; 
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop

080073f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b089      	sub	sp, #36	; 0x24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800740a:	2300      	movs	r3, #0
 800740c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e159      	b.n	80076c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007414:	2201      	movs	r2, #1
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4013      	ands	r3, r2
 8007426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	f040 8148 	bne.w	80076c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b01      	cmp	r3, #1
 800743c:	d005      	beq.n	800744a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007446:	2b02      	cmp	r3, #2
 8007448:	d130      	bne.n	80074ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	2203      	movs	r2, #3
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	43db      	mvns	r3, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4013      	ands	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4313      	orrs	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007480:	2201      	movs	r2, #1
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	43db      	mvns	r3, r3
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	4013      	ands	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	f003 0201 	and.w	r2, r3, #1
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d017      	beq.n	80074e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	2203      	movs	r2, #3
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	43db      	mvns	r3, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4313      	orrs	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d123      	bne.n	800753c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	08da      	lsrs	r2, r3, #3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3208      	adds	r2, #8
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	220f      	movs	r2, #15
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	4013      	ands	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	4313      	orrs	r3, r2
 800752c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	08da      	lsrs	r2, r3, #3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3208      	adds	r2, #8
 8007536:	69b9      	ldr	r1, [r7, #24]
 8007538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	2203      	movs	r2, #3
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	4013      	ands	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f003 0203 	and.w	r2, r3, #3
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80a2 	beq.w	80076c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	4b57      	ldr	r3, [pc, #348]	; (80076e0 <HAL_GPIO_Init+0x2e8>)
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	4a56      	ldr	r2, [pc, #344]	; (80076e0 <HAL_GPIO_Init+0x2e8>)
 8007588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800758c:	6453      	str	r3, [r2, #68]	; 0x44
 800758e:	4b54      	ldr	r3, [pc, #336]	; (80076e0 <HAL_GPIO_Init+0x2e8>)
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800759a:	4a52      	ldr	r2, [pc, #328]	; (80076e4 <HAL_GPIO_Init+0x2ec>)
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	3302      	adds	r3, #2
 80075a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	220f      	movs	r2, #15
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	43db      	mvns	r3, r3
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	4013      	ands	r3, r2
 80075bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a49      	ldr	r2, [pc, #292]	; (80076e8 <HAL_GPIO_Init+0x2f0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d019      	beq.n	80075fa <HAL_GPIO_Init+0x202>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a48      	ldr	r2, [pc, #288]	; (80076ec <HAL_GPIO_Init+0x2f4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_GPIO_Init+0x1fe>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a47      	ldr	r2, [pc, #284]	; (80076f0 <HAL_GPIO_Init+0x2f8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00d      	beq.n	80075f2 <HAL_GPIO_Init+0x1fa>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a46      	ldr	r2, [pc, #280]	; (80076f4 <HAL_GPIO_Init+0x2fc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <HAL_GPIO_Init+0x1f6>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a45      	ldr	r2, [pc, #276]	; (80076f8 <HAL_GPIO_Init+0x300>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <HAL_GPIO_Init+0x1f2>
 80075e6:	2304      	movs	r3, #4
 80075e8:	e008      	b.n	80075fc <HAL_GPIO_Init+0x204>
 80075ea:	2307      	movs	r3, #7
 80075ec:	e006      	b.n	80075fc <HAL_GPIO_Init+0x204>
 80075ee:	2303      	movs	r3, #3
 80075f0:	e004      	b.n	80075fc <HAL_GPIO_Init+0x204>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e002      	b.n	80075fc <HAL_GPIO_Init+0x204>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <HAL_GPIO_Init+0x204>
 80075fa:	2300      	movs	r3, #0
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	f002 0203 	and.w	r2, r2, #3
 8007602:	0092      	lsls	r2, r2, #2
 8007604:	4093      	lsls	r3, r2
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	4313      	orrs	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800760c:	4935      	ldr	r1, [pc, #212]	; (80076e4 <HAL_GPIO_Init+0x2ec>)
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	089b      	lsrs	r3, r3, #2
 8007612:	3302      	adds	r3, #2
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800761a:	4b38      	ldr	r3, [pc, #224]	; (80076fc <HAL_GPIO_Init+0x304>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	43db      	mvns	r3, r3
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	4013      	ands	r3, r2
 8007628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	4313      	orrs	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800763e:	4a2f      	ldr	r2, [pc, #188]	; (80076fc <HAL_GPIO_Init+0x304>)
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007644:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <HAL_GPIO_Init+0x304>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	43db      	mvns	r3, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	4013      	ands	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007668:	4a24      	ldr	r2, [pc, #144]	; (80076fc <HAL_GPIO_Init+0x304>)
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800766e:	4b23      	ldr	r3, [pc, #140]	; (80076fc <HAL_GPIO_Init+0x304>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	43db      	mvns	r3, r3
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	4013      	ands	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007692:	4a1a      	ldr	r2, [pc, #104]	; (80076fc <HAL_GPIO_Init+0x304>)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007698:	4b18      	ldr	r3, [pc, #96]	; (80076fc <HAL_GPIO_Init+0x304>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	43db      	mvns	r3, r3
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	4013      	ands	r3, r2
 80076a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80076bc:	4a0f      	ldr	r2, [pc, #60]	; (80076fc <HAL_GPIO_Init+0x304>)
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	3301      	adds	r3, #1
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	f67f aea2 	bls.w	8007414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	3724      	adds	r7, #36	; 0x24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40023800 	.word	0x40023800
 80076e4:	40013800 	.word	0x40013800
 80076e8:	40020000 	.word	0x40020000
 80076ec:	40020400 	.word	0x40020400
 80076f0:	40020800 	.word	0x40020800
 80076f4:	40020c00 	.word	0x40020c00
 80076f8:	40021000 	.word	0x40021000
 80076fc:	40013c00 	.word	0x40013c00

08007700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	807b      	strh	r3, [r7, #2]
 800770c:	4613      	mov	r3, r2
 800770e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007710:	787b      	ldrb	r3, [r7, #1]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007716:	887a      	ldrh	r2, [r7, #2]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800771c:	e003      	b.n	8007726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800771e:	887b      	ldrh	r3, [r7, #2]
 8007720:	041a      	lsls	r2, r3, #16
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	619a      	str	r2, [r3, #24]
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007744:	887a      	ldrh	r2, [r7, #2]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4013      	ands	r3, r2
 800774a:	041a      	lsls	r2, r3, #16
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	43d9      	mvns	r1, r3
 8007750:	887b      	ldrh	r3, [r7, #2]
 8007752:	400b      	ands	r3, r1
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	619a      	str	r2, [r3, #24]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007772:	4b08      	ldr	r3, [pc, #32]	; (8007794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	4013      	ands	r3, r2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800777e:	4a05      	ldr	r2, [pc, #20]	; (8007794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007780:	88fb      	ldrh	r3, [r7, #6]
 8007782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fdc2 	bl	8006310 <HAL_GPIO_EXTI_Callback>
  }
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40013c00 	.word	0x40013c00

08007798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e267      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d075      	beq.n	80078a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077b6:	4b88      	ldr	r3, [pc, #544]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 030c 	and.w	r3, r3, #12
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d00c      	beq.n	80077dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077c2:	4b85      	ldr	r3, [pc, #532]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d112      	bne.n	80077f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ce:	4b82      	ldr	r3, [pc, #520]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077da:	d10b      	bne.n	80077f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077dc:	4b7e      	ldr	r3, [pc, #504]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d05b      	beq.n	80078a0 <HAL_RCC_OscConfig+0x108>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d157      	bne.n	80078a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e242      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fc:	d106      	bne.n	800780c <HAL_RCC_OscConfig+0x74>
 80077fe:	4b76      	ldr	r3, [pc, #472]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a75      	ldr	r2, [pc, #468]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e01d      	b.n	8007848 <HAL_RCC_OscConfig+0xb0>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007814:	d10c      	bne.n	8007830 <HAL_RCC_OscConfig+0x98>
 8007816:	4b70      	ldr	r3, [pc, #448]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a6f      	ldr	r2, [pc, #444]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 800781c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	4b6d      	ldr	r3, [pc, #436]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a6c      	ldr	r2, [pc, #432]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	e00b      	b.n	8007848 <HAL_RCC_OscConfig+0xb0>
 8007830:	4b69      	ldr	r3, [pc, #420]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a68      	ldr	r2, [pc, #416]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	4b66      	ldr	r3, [pc, #408]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a65      	ldr	r2, [pc, #404]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d013      	beq.n	8007878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007850:	f7ff f88e 	bl	8006970 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007858:	f7ff f88a 	bl	8006970 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b64      	cmp	r3, #100	; 0x64
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e207      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786a:	4b5b      	ldr	r3, [pc, #364]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCC_OscConfig+0xc0>
 8007876:	e014      	b.n	80078a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007878:	f7ff f87a 	bl	8006970 <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007880:	f7ff f876 	bl	8006970 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b64      	cmp	r3, #100	; 0x64
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e1f3      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007892:	4b51      	ldr	r3, [pc, #324]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f0      	bne.n	8007880 <HAL_RCC_OscConfig+0xe8>
 800789e:	e000      	b.n	80078a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d063      	beq.n	8007976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ae:	4b4a      	ldr	r3, [pc, #296]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ba:	4b47      	ldr	r3, [pc, #284]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d11c      	bne.n	8007900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078c6:	4b44      	ldr	r3, [pc, #272]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d116      	bne.n	8007900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078d2:	4b41      	ldr	r3, [pc, #260]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_RCC_OscConfig+0x152>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d001      	beq.n	80078ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e1c7      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ea:	4b3b      	ldr	r3, [pc, #236]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	4937      	ldr	r1, [pc, #220]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078fe:	e03a      	b.n	8007976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d020      	beq.n	800794a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007908:	4b34      	ldr	r3, [pc, #208]	; (80079dc <HAL_RCC_OscConfig+0x244>)
 800790a:	2201      	movs	r2, #1
 800790c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790e:	f7ff f82f 	bl	8006970 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007916:	f7ff f82b 	bl	8006970 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e1a8      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007928:	4b2b      	ldr	r3, [pc, #172]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007934:	4b28      	ldr	r3, [pc, #160]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	4925      	ldr	r1, [pc, #148]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 8007944:	4313      	orrs	r3, r2
 8007946:	600b      	str	r3, [r1, #0]
 8007948:	e015      	b.n	8007976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800794a:	4b24      	ldr	r3, [pc, #144]	; (80079dc <HAL_RCC_OscConfig+0x244>)
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007950:	f7ff f80e 	bl	8006970 <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007958:	f7ff f80a 	bl	8006970 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e187      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f0      	bne.n	8007958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0308 	and.w	r3, r3, #8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d036      	beq.n	80079f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d016      	beq.n	80079b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <HAL_RCC_OscConfig+0x248>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007990:	f7fe ffee 	bl	8006970 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007998:	f7fe ffea 	bl	8006970 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e167      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079aa:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <HAL_RCC_OscConfig+0x240>)
 80079ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0x200>
 80079b6:	e01b      	b.n	80079f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079b8:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <HAL_RCC_OscConfig+0x248>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079be:	f7fe ffd7 	bl	8006970 <HAL_GetTick>
 80079c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079c4:	e00e      	b.n	80079e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079c6:	f7fe ffd3 	bl	8006970 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d907      	bls.n	80079e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e150      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
 80079d8:	40023800 	.word	0x40023800
 80079dc:	42470000 	.word	0x42470000
 80079e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079e4:	4b88      	ldr	r3, [pc, #544]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 80079e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1ea      	bne.n	80079c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8097 	beq.w	8007b2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a02:	4b81      	ldr	r3, [pc, #516]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10f      	bne.n	8007a2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
 8007a12:	4b7d      	ldr	r3, [pc, #500]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	4a7c      	ldr	r2, [pc, #496]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a1e:	4b7a      	ldr	r3, [pc, #488]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a26:	60bb      	str	r3, [r7, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a2e:	4b77      	ldr	r3, [pc, #476]	; (8007c0c <HAL_RCC_OscConfig+0x474>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d118      	bne.n	8007a6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a3a:	4b74      	ldr	r3, [pc, #464]	; (8007c0c <HAL_RCC_OscConfig+0x474>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a73      	ldr	r2, [pc, #460]	; (8007c0c <HAL_RCC_OscConfig+0x474>)
 8007a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a46:	f7fe ff93 	bl	8006970 <HAL_GetTick>
 8007a4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a4c:	e008      	b.n	8007a60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a4e:	f7fe ff8f 	bl	8006970 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e10c      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a60:	4b6a      	ldr	r3, [pc, #424]	; (8007c0c <HAL_RCC_OscConfig+0x474>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0f0      	beq.n	8007a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d106      	bne.n	8007a82 <HAL_RCC_OscConfig+0x2ea>
 8007a74:	4b64      	ldr	r3, [pc, #400]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a78:	4a63      	ldr	r2, [pc, #396]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a7a:	f043 0301 	orr.w	r3, r3, #1
 8007a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a80:	e01c      	b.n	8007abc <HAL_RCC_OscConfig+0x324>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d10c      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x30c>
 8007a8a:	4b5f      	ldr	r3, [pc, #380]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	4a5e      	ldr	r2, [pc, #376]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a90:	f043 0304 	orr.w	r3, r3, #4
 8007a94:	6713      	str	r3, [r2, #112]	; 0x70
 8007a96:	4b5c      	ldr	r3, [pc, #368]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	4a5b      	ldr	r2, [pc, #364]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa2:	e00b      	b.n	8007abc <HAL_RCC_OscConfig+0x324>
 8007aa4:	4b58      	ldr	r3, [pc, #352]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa8:	4a57      	ldr	r2, [pc, #348]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab0:	4b55      	ldr	r3, [pc, #340]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab4:	4a54      	ldr	r2, [pc, #336]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007ab6:	f023 0304 	bic.w	r3, r3, #4
 8007aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d015      	beq.n	8007af0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fe ff54 	bl	8006970 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007acc:	f7fe ff50 	bl	8006970 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e0cb      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae2:	4b49      	ldr	r3, [pc, #292]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0ee      	beq.n	8007acc <HAL_RCC_OscConfig+0x334>
 8007aee:	e014      	b.n	8007b1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007af0:	f7fe ff3e 	bl	8006970 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007af6:	e00a      	b.n	8007b0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af8:	f7fe ff3a 	bl	8006970 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e0b5      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b0e:	4b3e      	ldr	r3, [pc, #248]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1ee      	bne.n	8007af8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d105      	bne.n	8007b2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b20:	4b39      	ldr	r3, [pc, #228]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	4a38      	ldr	r2, [pc, #224]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 80a1 	beq.w	8007c78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b36:	4b34      	ldr	r3, [pc, #208]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 030c 	and.w	r3, r3, #12
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d05c      	beq.n	8007bfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d141      	bne.n	8007bce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b4a:	4b31      	ldr	r3, [pc, #196]	; (8007c10 <HAL_RCC_OscConfig+0x478>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b50:	f7fe ff0e 	bl	8006970 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b58:	f7fe ff0a 	bl	8006970 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e087      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6a:	4b27      	ldr	r3, [pc, #156]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69da      	ldr	r2, [r3, #28]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	019b      	lsls	r3, r3, #6
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8c:	085b      	lsrs	r3, r3, #1
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	041b      	lsls	r3, r3, #16
 8007b92:	431a      	orrs	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	491b      	ldr	r1, [pc, #108]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ba0:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <HAL_RCC_OscConfig+0x478>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba6:	f7fe fee3 	bl	8006970 <HAL_GetTick>
 8007baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bac:	e008      	b.n	8007bc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bae:	f7fe fedf 	bl	8006970 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e05c      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0f0      	beq.n	8007bae <HAL_RCC_OscConfig+0x416>
 8007bcc:	e054      	b.n	8007c78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bce:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <HAL_RCC_OscConfig+0x478>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd4:	f7fe fecc 	bl	8006970 <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bdc:	f7fe fec8 	bl	8006970 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e045      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <HAL_RCC_OscConfig+0x470>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f0      	bne.n	8007bdc <HAL_RCC_OscConfig+0x444>
 8007bfa:	e03d      	b.n	8007c78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d107      	bne.n	8007c14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e038      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	40007000 	.word	0x40007000
 8007c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c14:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <HAL_RCC_OscConfig+0x4ec>)
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d028      	beq.n	8007c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d121      	bne.n	8007c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d11a      	bne.n	8007c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c44:	4013      	ands	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d111      	bne.n	8007c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d107      	bne.n	8007c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d001      	beq.n	8007c78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	40023800 	.word	0x40023800

08007c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e0cc      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c9c:	4b68      	ldr	r3, [pc, #416]	; (8007e40 <HAL_RCC_ClockConfig+0x1b8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d90c      	bls.n	8007cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007caa:	4b65      	ldr	r3, [pc, #404]	; (8007e40 <HAL_RCC_ClockConfig+0x1b8>)
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cb2:	4b63      	ldr	r3, [pc, #396]	; (8007e40 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d001      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0b8      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d020      	beq.n	8007d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cdc:	4b59      	ldr	r3, [pc, #356]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	4a58      	ldr	r2, [pc, #352]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cf4:	4b53      	ldr	r3, [pc, #332]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	4a52      	ldr	r2, [pc, #328]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d00:	4b50      	ldr	r3, [pc, #320]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	494d      	ldr	r1, [pc, #308]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d044      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d107      	bne.n	8007d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d26:	4b47      	ldr	r3, [pc, #284]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d119      	bne.n	8007d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e07f      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d003      	beq.n	8007d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d107      	bne.n	8007d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d46:	4b3f      	ldr	r3, [pc, #252]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d109      	bne.n	8007d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e06f      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d56:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e067      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d66:	4b37      	ldr	r3, [pc, #220]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f023 0203 	bic.w	r2, r3, #3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	4934      	ldr	r1, [pc, #208]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d78:	f7fe fdfa 	bl	8006970 <HAL_GetTick>
 8007d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d7e:	e00a      	b.n	8007d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d80:	f7fe fdf6 	bl	8006970 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e04f      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d96:	4b2b      	ldr	r3, [pc, #172]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 020c 	and.w	r2, r3, #12
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d1eb      	bne.n	8007d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <HAL_RCC_ClockConfig+0x1b8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d20c      	bcs.n	8007dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007db6:	4b22      	ldr	r3, [pc, #136]	; (8007e40 <HAL_RCC_ClockConfig+0x1b8>)
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d001      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e032      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ddc:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4916      	ldr	r1, [pc, #88]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	490e      	ldr	r1, [pc, #56]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e0e:	f000 f821 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	091b      	lsrs	r3, r3, #4
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	490a      	ldr	r1, [pc, #40]	; (8007e48 <HAL_RCC_ClockConfig+0x1c0>)
 8007e20:	5ccb      	ldrb	r3, [r1, r3]
 8007e22:	fa22 f303 	lsr.w	r3, r2, r3
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe fd5a 	bl	80068e8 <HAL_InitTick>

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40023c00 	.word	0x40023c00
 8007e44:	40023800 	.word	0x40023800
 8007e48:	08010490 	.word	0x08010490
 8007e4c:	200000e4 	.word	0x200000e4
 8007e50:	200000e8 	.word	0x200000e8

08007e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e58:	b090      	sub	sp, #64	; 0x40
 8007e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e64:	2300      	movs	r3, #0
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e6c:	4b59      	ldr	r3, [pc, #356]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f003 030c 	and.w	r3, r3, #12
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d00d      	beq.n	8007e94 <HAL_RCC_GetSysClockFreq+0x40>
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	f200 80a1 	bhi.w	8007fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_RCC_GetSysClockFreq+0x34>
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d003      	beq.n	8007e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e86:	e09b      	b.n	8007fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e88:	4b53      	ldr	r3, [pc, #332]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007e8c:	e09b      	b.n	8007fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e8e:	4b53      	ldr	r3, [pc, #332]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8007e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e92:	e098      	b.n	8007fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e94:	4b4f      	ldr	r3, [pc, #316]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e9e:	4b4d      	ldr	r3, [pc, #308]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d028      	beq.n	8007efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eaa:	4b4a      	ldr	r3, [pc, #296]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	099b      	lsrs	r3, r3, #6
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	623b      	str	r3, [r7, #32]
 8007eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4b47      	ldr	r3, [pc, #284]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8007ec0:	fb03 f201 	mul.w	r2, r3, r1
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	fb00 f303 	mul.w	r3, r0, r3
 8007eca:	4413      	add	r3, r2
 8007ecc:	4a43      	ldr	r2, [pc, #268]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8007ece:	fba0 1202 	umull	r1, r2, r0, r2
 8007ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ed4:	460a      	mov	r2, r1
 8007ed6:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eda:	4413      	add	r3, r2
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	61fa      	str	r2, [r7, #28]
 8007ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007eee:	f7f8 fe9b 	bl	8000c28 <__aeabi_uldivmod>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007efa:	e053      	b.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007efc:	4b35      	ldr	r3, [pc, #212]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	099b      	lsrs	r3, r3, #6
 8007f02:	2200      	movs	r2, #0
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	617a      	str	r2, [r7, #20]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f0e:	f04f 0b00 	mov.w	fp, #0
 8007f12:	4652      	mov	r2, sl
 8007f14:	465b      	mov	r3, fp
 8007f16:	f04f 0000 	mov.w	r0, #0
 8007f1a:	f04f 0100 	mov.w	r1, #0
 8007f1e:	0159      	lsls	r1, r3, #5
 8007f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f24:	0150      	lsls	r0, r2, #5
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8007f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f46:	ebb2 0408 	subs.w	r4, r2, r8
 8007f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	00eb      	lsls	r3, r5, #3
 8007f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f5c:	00e2      	lsls	r2, r4, #3
 8007f5e:	4614      	mov	r4, r2
 8007f60:	461d      	mov	r5, r3
 8007f62:	eb14 030a 	adds.w	r3, r4, sl
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	eb45 030b 	adc.w	r3, r5, fp
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	028b      	lsls	r3, r1, #10
 8007f7e:	4621      	mov	r1, r4
 8007f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f84:	4621      	mov	r1, r4
 8007f86:	028a      	lsls	r2, r1, #10
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8e:	2200      	movs	r2, #0
 8007f90:	60bb      	str	r3, [r7, #8]
 8007f92:	60fa      	str	r2, [r7, #12]
 8007f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f98:	f7f8 fe46 	bl	8000c28 <__aeabi_uldivmod>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	0c1b      	lsrs	r3, r3, #16
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	3301      	adds	r3, #1
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fbe:	e002      	b.n	8007fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3740      	adds	r7, #64	; 0x40
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	00f42400 	.word	0x00f42400
 8007fdc:	017d7840 	.word	0x017d7840

08007fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fe4:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	200000e4 	.word	0x200000e4

08007ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ffc:	f7ff fff0 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 8008000:	4602      	mov	r2, r0
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	0a9b      	lsrs	r3, r3, #10
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	4903      	ldr	r1, [pc, #12]	; (800801c <HAL_RCC_GetPCLK1Freq+0x24>)
 800800e:	5ccb      	ldrb	r3, [r1, r3]
 8008010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008014:	4618      	mov	r0, r3
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40023800 	.word	0x40023800
 800801c:	080104a0 	.word	0x080104a0

08008020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008024:	f7ff ffdc 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 8008028:	4602      	mov	r2, r0
 800802a:	4b05      	ldr	r3, [pc, #20]	; (8008040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	0b5b      	lsrs	r3, r3, #13
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	4903      	ldr	r1, [pc, #12]	; (8008044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008036:	5ccb      	ldrb	r3, [r1, r3]
 8008038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800803c:	4618      	mov	r0, r3
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40023800 	.word	0x40023800
 8008044:	080104a0 	.word	0x080104a0

08008048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e07b      	b.n	8008152 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b00      	cmp	r3, #0
 8008060:	d108      	bne.n	8008074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800806a:	d009      	beq.n	8008080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	61da      	str	r2, [r3, #28]
 8008072:	e005      	b.n	8008080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fe f9ac 	bl	80063f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080c8:	431a      	orrs	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008104:	ea42 0103 	orr.w	r1, r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	f003 0104 	and.w	r1, r3, #4
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	f003 0210 	and.w	r2, r3, #16
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008140:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b088      	sub	sp, #32
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	603b      	str	r3, [r7, #0]
 8008166:	4613      	mov	r3, r2
 8008168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_SPI_Transmit+0x22>
 8008178:	2302      	movs	r3, #2
 800817a:	e126      	b.n	80083ca <HAL_SPI_Transmit+0x270>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008184:	f7fe fbf4 	bl	8006970 <HAL_GetTick>
 8008188:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b01      	cmp	r3, #1
 8008198:	d002      	beq.n	80081a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800819a:	2302      	movs	r3, #2
 800819c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800819e:	e10b      	b.n	80083b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <HAL_SPI_Transmit+0x52>
 80081a6:	88fb      	ldrh	r3, [r7, #6]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081b0:	e102      	b.n	80083b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2203      	movs	r2, #3
 80081b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	88fa      	ldrh	r2, [r7, #6]
 80081ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	88fa      	ldrh	r2, [r7, #6]
 80081d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f8:	d10f      	bne.n	800821a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008208:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008218:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	d007      	beq.n	8008238 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008240:	d14b      	bne.n	80082da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <HAL_SPI_Transmit+0xf6>
 800824a:	8afb      	ldrh	r3, [r7, #22]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d13e      	bne.n	80082ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	881a      	ldrh	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	1c9a      	adds	r2, r3, #2
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008274:	e02b      	b.n	80082ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b02      	cmp	r3, #2
 8008282:	d112      	bne.n	80082aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	881a      	ldrh	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008294:	1c9a      	adds	r2, r3, #2
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80082a8:	e011      	b.n	80082ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082aa:	f7fe fb61 	bl	8006970 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d803      	bhi.n	80082c2 <HAL_SPI_Transmit+0x168>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d102      	bne.n	80082c8 <HAL_SPI_Transmit+0x16e>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082cc:	e074      	b.n	80083b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1ce      	bne.n	8008276 <HAL_SPI_Transmit+0x11c>
 80082d8:	e04c      	b.n	8008374 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <HAL_SPI_Transmit+0x18e>
 80082e2:	8afb      	ldrh	r3, [r7, #22]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d140      	bne.n	800836a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	330c      	adds	r3, #12
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008304:	b29b      	uxth	r3, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	b29a      	uxth	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800830e:	e02c      	b.n	800836a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b02      	cmp	r3, #2
 800831c:	d113      	bne.n	8008346 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	330c      	adds	r3, #12
 8008328:	7812      	ldrb	r2, [r2, #0]
 800832a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	86da      	strh	r2, [r3, #54]	; 0x36
 8008344:	e011      	b.n	800836a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008346:	f7fe fb13 	bl	8006970 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d803      	bhi.n	800835e <HAL_SPI_Transmit+0x204>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d102      	bne.n	8008364 <HAL_SPI_Transmit+0x20a>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008368:	e026      	b.n	80083b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1cd      	bne.n	8008310 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fa63 	bl	8008844 <SPI_EndRxTxTransaction>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	77fb      	strb	r3, [r7, #31]
 80083b4:	e000      	b.n	80083b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80083b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b08c      	sub	sp, #48	; 0x30
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083e0:	2301      	movs	r3, #1
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_SPI_TransmitReceive+0x26>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e18a      	b.n	800870e <HAL_SPI_TransmitReceive+0x33c>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008400:	f7fe fab6 	bl	8006970 <HAL_GetTick>
 8008404:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800840c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008416:	887b      	ldrh	r3, [r7, #2]
 8008418:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800841a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800841e:	2b01      	cmp	r3, #1
 8008420:	d00f      	beq.n	8008442 <HAL_SPI_TransmitReceive+0x70>
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008428:	d107      	bne.n	800843a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d103      	bne.n	800843a <HAL_SPI_TransmitReceive+0x68>
 8008432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008436:	2b04      	cmp	r3, #4
 8008438:	d003      	beq.n	8008442 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800843a:	2302      	movs	r3, #2
 800843c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008440:	e15b      	b.n	80086fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x82>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x82>
 800844e:	887b      	ldrh	r3, [r7, #2]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d103      	bne.n	800845c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800845a:	e14e      	b.n	80086fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b04      	cmp	r3, #4
 8008466:	d003      	beq.n	8008470 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2205      	movs	r2, #5
 800846c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	887a      	ldrh	r2, [r7, #2]
 8008480:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	887a      	ldrh	r2, [r7, #2]
 8008486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	887a      	ldrh	r2, [r7, #2]
 8008492:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	887a      	ldrh	r2, [r7, #2]
 8008498:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d007      	beq.n	80084c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084cc:	d178      	bne.n	80085c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_SPI_TransmitReceive+0x10a>
 80084d6:	8b7b      	ldrh	r3, [r7, #26]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d166      	bne.n	80085aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008500:	e053      	b.n	80085aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b02      	cmp	r3, #2
 800850e:	d11b      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x176>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x176>
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	2b01      	cmp	r3, #1
 800851e:	d113      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	881a      	ldrh	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	1c9a      	adds	r2, r3, #2
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d119      	bne.n	800858a <HAL_SPI_TransmitReceive+0x1b8>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d014      	beq.n	800858a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	b292      	uxth	r2, r2
 800856c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	1c9a      	adds	r2, r3, #2
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008586:	2301      	movs	r3, #1
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800858a:	f7fe f9f1 	bl	8006970 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008596:	429a      	cmp	r2, r3
 8008598:	d807      	bhi.n	80085aa <HAL_SPI_TransmitReceive+0x1d8>
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d003      	beq.n	80085aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085a8:	e0a7      	b.n	80086fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1a6      	bne.n	8008502 <HAL_SPI_TransmitReceive+0x130>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1a1      	bne.n	8008502 <HAL_SPI_TransmitReceive+0x130>
 80085be:	e07c      	b.n	80086ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_SPI_TransmitReceive+0x1fc>
 80085c8:	8b7b      	ldrh	r3, [r7, #26]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d16b      	bne.n	80086a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	7812      	ldrb	r2, [r2, #0]
 80085da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085f4:	e057      	b.n	80086a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b02      	cmp	r3, #2
 8008602:	d11c      	bne.n	800863e <HAL_SPI_TransmitReceive+0x26c>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d017      	beq.n	800863e <HAL_SPI_TransmitReceive+0x26c>
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	2b01      	cmp	r3, #1
 8008612:	d114      	bne.n	800863e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	7812      	ldrb	r2, [r2, #0]
 8008620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b01      	cmp	r3, #1
 800864a:	d119      	bne.n	8008680 <HAL_SPI_TransmitReceive+0x2ae>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d014      	beq.n	8008680 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008672:	b29b      	uxth	r3, r3
 8008674:	3b01      	subs	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800867c:	2301      	movs	r3, #1
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008680:	f7fe f976 	bl	8006970 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800868c:	429a      	cmp	r2, r3
 800868e:	d803      	bhi.n	8008698 <HAL_SPI_TransmitReceive+0x2c6>
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d102      	bne.n	800869e <HAL_SPI_TransmitReceive+0x2cc>
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	2b00      	cmp	r3, #0
 800869c:	d103      	bne.n	80086a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086a4:	e029      	b.n	80086fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1a2      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x224>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d19d      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f8c0 	bl	8008844 <SPI_EndRxTxTransaction>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d006      	beq.n	80086d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086d6:	e010      	b.n	80086fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086e0:	2300      	movs	r3, #0
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	e000      	b.n	80086fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80086f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800870a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800870e:	4618      	mov	r0, r3
 8008710:	3730      	adds	r7, #48	; 0x30
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008724:	b2db      	uxtb	r3, r3
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
	...

08008734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	4613      	mov	r3, r2
 8008742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008744:	f7fe f914 	bl	8006970 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4413      	add	r3, r2
 8008752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008754:	f7fe f90c 	bl	8006970 <HAL_GetTick>
 8008758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800875a:	4b39      	ldr	r3, [pc, #228]	; (8008840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	015b      	lsls	r3, r3, #5
 8008760:	0d1b      	lsrs	r3, r3, #20
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	fb02 f303 	mul.w	r3, r2, r3
 8008768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800876a:	e054      	b.n	8008816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d050      	beq.n	8008816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008774:	f7fe f8fc 	bl	8006970 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	429a      	cmp	r2, r3
 8008782:	d902      	bls.n	800878a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d13d      	bne.n	8008806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087a2:	d111      	bne.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ac:	d004      	beq.n	80087b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b6:	d107      	bne.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d0:	d10f      	bne.n	80087f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e017      	b.n	8008836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	3b01      	subs	r3, #1
 8008814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	4013      	ands	r3, r2
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	429a      	cmp	r2, r3
 8008824:	bf0c      	ite	eq
 8008826:	2301      	moveq	r3, #1
 8008828:	2300      	movne	r3, #0
 800882a:	b2db      	uxtb	r3, r3
 800882c:	461a      	mov	r2, r3
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	429a      	cmp	r2, r3
 8008832:	d19b      	bne.n	800876c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	200000e4 	.word	0x200000e4

08008844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008850:	4b1b      	ldr	r3, [pc, #108]	; (80088c0 <SPI_EndRxTxTransaction+0x7c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1b      	ldr	r2, [pc, #108]	; (80088c4 <SPI_EndRxTxTransaction+0x80>)
 8008856:	fba2 2303 	umull	r2, r3, r2, r3
 800885a:	0d5b      	lsrs	r3, r3, #21
 800885c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008860:	fb02 f303 	mul.w	r3, r2, r3
 8008864:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800886e:	d112      	bne.n	8008896 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ff5a 	bl	8008734 <SPI_WaitFlagStateUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	f043 0220 	orr.w	r2, r3, #32
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e00f      	b.n	80088b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	3b01      	subs	r3, #1
 80088a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ac:	2b80      	cmp	r3, #128	; 0x80
 80088ae:	d0f2      	beq.n	8008896 <SPI_EndRxTxTransaction+0x52>
 80088b0:	e000      	b.n	80088b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80088b2:	bf00      	nop
  }

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200000e4 	.word	0x200000e4
 80088c4:	165e9f81 	.word	0x165e9f81

080088c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e041      	b.n	800895e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fd fe18 	bl	8006524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3304      	adds	r3, #4
 8008904:	4619      	mov	r1, r3
 8008906:	4610      	mov	r0, r2
 8008908:	f000 fcac 	bl	8009264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6a1a      	ldr	r2, [r3, #32]
 8008974:	f241 1311 	movw	r3, #4369	; 0x1111
 8008978:	4013      	ands	r3, r2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10f      	bne.n	800899e <HAL_TIM_Base_Stop+0x38>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6a1a      	ldr	r2, [r3, #32]
 8008984:	f240 4344 	movw	r3, #1092	; 0x444
 8008988:	4013      	ands	r3, r2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d107      	bne.n	800899e <HAL_TIM_Base_Stop+0x38>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0201 	bic.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d001      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e044      	b.n	8008a56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0201 	orr.w	r2, r2, #1
 80089e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1e      	ldr	r2, [pc, #120]	; (8008a64 <HAL_TIM_Base_Start_IT+0xb0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d018      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x6c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f6:	d013      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x6c>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a1a      	ldr	r2, [pc, #104]	; (8008a68 <HAL_TIM_Base_Start_IT+0xb4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00e      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x6c>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a19      	ldr	r2, [pc, #100]	; (8008a6c <HAL_TIM_Base_Start_IT+0xb8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d009      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x6c>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a17      	ldr	r2, [pc, #92]	; (8008a70 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d004      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x6c>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a16      	ldr	r2, [pc, #88]	; (8008a74 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d111      	bne.n	8008a44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b06      	cmp	r3, #6
 8008a30:	d010      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0201 	orr.w	r2, r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a42:	e007      	b.n	8008a54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0201 	orr.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40010000 	.word	0x40010000
 8008a68:	40000400 	.word	0x40000400
 8008a6c:	40000800 	.word	0x40000800
 8008a70:	40000c00 	.word	0x40000c00
 8008a74:	40014000 	.word	0x40014000

08008a78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e097      	b.n	8008bbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7fd fcf1 	bl	8006488 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008abc:	f023 0307 	bic.w	r3, r3, #7
 8008ac0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f000 fbc9 	bl	8009264 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	021b      	lsls	r3, r3, #8
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b18:	f023 030c 	bic.w	r3, r3, #12
 8008b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	4313      	orrs	r3, r2
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	011a      	lsls	r2, r3, #4
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	031b      	lsls	r3, r3, #12
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	011b      	lsls	r3, r3, #4
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008be4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d110      	bne.n	8008c16 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d102      	bne.n	8008c00 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bfa:	7b7b      	ldrb	r3, [r7, #13]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d001      	beq.n	8008c04 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e089      	b.n	8008d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c14:	e031      	b.n	8008c7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d110      	bne.n	8008c3e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d102      	bne.n	8008c28 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c22:	7b3b      	ldrb	r3, [r7, #12]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d001      	beq.n	8008c2c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e075      	b.n	8008d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c3c:	e01d      	b.n	8008c7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d108      	bne.n	8008c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d105      	bne.n	8008c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c4a:	7b7b      	ldrb	r3, [r7, #13]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d102      	bne.n	8008c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c50:	7b3b      	ldrb	r3, [r7, #12]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d001      	beq.n	8008c5a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e05e      	b.n	8008d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d010      	beq.n	8008ca8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008c86:	e01f      	b.n	8008cc8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fc01 	bl	8009498 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0202 	orr.w	r2, r2, #2
 8008ca4:	60da      	str	r2, [r3, #12]
      break;
 8008ca6:	e02e      	b.n	8008d06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2201      	movs	r2, #1
 8008cae:	2104      	movs	r1, #4
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fbf1 	bl	8009498 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0204 	orr.w	r2, r2, #4
 8008cc4:	60da      	str	r2, [r3, #12]
      break;
 8008cc6:	e01e      	b.n	8008d06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fbe1 	bl	8009498 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	2104      	movs	r1, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fbda 	bl	8009498 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0202 	orr.w	r2, r2, #2
 8008cf2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0204 	orr.w	r2, r2, #4
 8008d02:	60da      	str	r2, [r3, #12]
      break;
 8008d04:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0201 	orr.w	r2, r2, #1
 8008d14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10f      	bne.n	8008d50 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2200      	movs	r2, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fbad 	bl	8009498 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0202 	bic.w	r2, r2, #2
 8008d4c:	60da      	str	r2, [r3, #12]
 8008d4e:	e030      	b.n	8008db2 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d10f      	bne.n	8008d76 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2104      	movs	r1, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fb9a 	bl	8009498 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0204 	bic.w	r2, r2, #4
 8008d72:	60da      	str	r2, [r3, #12]
 8008d74:	e01d      	b.n	8008db2 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fb8a 	bl	8009498 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2104      	movs	r1, #4
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fb83 	bl	8009498 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68da      	ldr	r2, [r3, #12]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0202 	bic.w	r2, r2, #2
 8008da0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68da      	ldr	r2, [r3, #12]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0204 	bic.w	r2, r2, #4
 8008db0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a1a      	ldr	r2, [r3, #32]
 8008db8:	f241 1311 	movw	r3, #4369	; 0x1111
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10f      	bne.n	8008de2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6a1a      	ldr	r2, [r3, #32]
 8008dc8:	f240 4344 	movw	r3, #1092	; 0x444
 8008dcc:	4013      	ands	r3, r2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d107      	bne.n	8008de2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_TIM_Encoder_Stop_IT+0xce>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d138      	bne.n	8008e60 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_Encoder_Stop_IT+0xde>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dfc:	e013      	b.n	8008e26 <HAL_TIM_Encoder_Stop_IT+0x106>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d104      	bne.n	8008e0e <HAL_TIM_Encoder_Stop_IT+0xee>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e0c:	e00b      	b.n	8008e26 <HAL_TIM_Encoder_Stop_IT+0x106>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d104      	bne.n	8008e1e <HAL_TIM_Encoder_Stop_IT+0xfe>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e1c:	e003      	b.n	8008e26 <HAL_TIM_Encoder_Stop_IT+0x106>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_TIM_Encoder_Stop_IT+0x116>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e34:	e024      	b.n	8008e80 <HAL_TIM_Encoder_Stop_IT+0x160>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d104      	bne.n	8008e46 <HAL_TIM_Encoder_Stop_IT+0x126>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e44:	e01c      	b.n	8008e80 <HAL_TIM_Encoder_Stop_IT+0x160>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b08      	cmp	r3, #8
 8008e4a:	d104      	bne.n	8008e56 <HAL_TIM_Encoder_Stop_IT+0x136>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e54:	e014      	b.n	8008e80 <HAL_TIM_Encoder_Stop_IT+0x160>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e5e:	e00f      	b.n	8008e80 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d122      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d11b      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f06f 0202 	mvn.w	r2, #2
 8008eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f003 0303 	and.w	r3, r3, #3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fd f9f1 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8008ed2:	e005      	b.n	8008ee0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f9a7 	bl	8009228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f9ae 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f003 0304 	and.w	r3, r3, #4
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d122      	bne.n	8008f3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d11b      	bne.n	8008f3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f06f 0204 	mvn.w	r2, #4
 8008f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fd f9c7 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8008f26:	e005      	b.n	8008f34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f97d 	bl	8009228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f984 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d122      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d11b      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f06f 0208 	mvn.w	r2, #8
 8008f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2204      	movs	r2, #4
 8008f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7fd f99d 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8008f7a:	e005      	b.n	8008f88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f953 	bl	8009228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f95a 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b10      	cmp	r3, #16
 8008f9a:	d122      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b10      	cmp	r3, #16
 8008fa8:	d11b      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f06f 0210 	mvn.w	r2, #16
 8008fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fd f973 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8008fce:	e005      	b.n	8008fdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f929 	bl	8009228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f930 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d10e      	bne.n	800900e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d107      	bne.n	800900e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0201 	mvn.w	r2, #1
 8009006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7fd f8dd 	bl	80061c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009018:	2b80      	cmp	r3, #128	; 0x80
 800901a:	d10e      	bne.n	800903a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009026:	2b80      	cmp	r3, #128	; 0x80
 8009028:	d107      	bne.n	800903a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 facd 	bl	80095d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009044:	2b40      	cmp	r3, #64	; 0x40
 8009046:	d10e      	bne.n	8009066 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009052:	2b40      	cmp	r3, #64	; 0x40
 8009054:	d107      	bne.n	8009066 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800905e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8f5 	bl	8009250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0320 	and.w	r3, r3, #32
 8009070:	2b20      	cmp	r3, #32
 8009072:	d10e      	bne.n	8009092 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b20      	cmp	r3, #32
 8009080:	d107      	bne.n	8009092 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f06f 0220 	mvn.w	r2, #32
 800908a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa97 	bl	80095c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009092:	bf00      	nop
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d101      	bne.n	80090b6 <HAL_TIM_ConfigClockSource+0x1c>
 80090b2:	2302      	movs	r3, #2
 80090b4:	e0b4      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x186>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2202      	movs	r2, #2
 80090c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ee:	d03e      	beq.n	800916e <HAL_TIM_ConfigClockSource+0xd4>
 80090f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f4:	f200 8087 	bhi.w	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 80090f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fc:	f000 8086 	beq.w	800920c <HAL_TIM_ConfigClockSource+0x172>
 8009100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009104:	d87f      	bhi.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 8009106:	2b70      	cmp	r3, #112	; 0x70
 8009108:	d01a      	beq.n	8009140 <HAL_TIM_ConfigClockSource+0xa6>
 800910a:	2b70      	cmp	r3, #112	; 0x70
 800910c:	d87b      	bhi.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 800910e:	2b60      	cmp	r3, #96	; 0x60
 8009110:	d050      	beq.n	80091b4 <HAL_TIM_ConfigClockSource+0x11a>
 8009112:	2b60      	cmp	r3, #96	; 0x60
 8009114:	d877      	bhi.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 8009116:	2b50      	cmp	r3, #80	; 0x50
 8009118:	d03c      	beq.n	8009194 <HAL_TIM_ConfigClockSource+0xfa>
 800911a:	2b50      	cmp	r3, #80	; 0x50
 800911c:	d873      	bhi.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 800911e:	2b40      	cmp	r3, #64	; 0x40
 8009120:	d058      	beq.n	80091d4 <HAL_TIM_ConfigClockSource+0x13a>
 8009122:	2b40      	cmp	r3, #64	; 0x40
 8009124:	d86f      	bhi.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 8009126:	2b30      	cmp	r3, #48	; 0x30
 8009128:	d064      	beq.n	80091f4 <HAL_TIM_ConfigClockSource+0x15a>
 800912a:	2b30      	cmp	r3, #48	; 0x30
 800912c:	d86b      	bhi.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 800912e:	2b20      	cmp	r3, #32
 8009130:	d060      	beq.n	80091f4 <HAL_TIM_ConfigClockSource+0x15a>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d867      	bhi.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d05c      	beq.n	80091f4 <HAL_TIM_ConfigClockSource+0x15a>
 800913a:	2b10      	cmp	r3, #16
 800913c:	d05a      	beq.n	80091f4 <HAL_TIM_ConfigClockSource+0x15a>
 800913e:	e062      	b.n	8009206 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	6899      	ldr	r1, [r3, #8]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f000 f982 	bl	8009458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009162:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	609a      	str	r2, [r3, #8]
      break;
 800916c:	e04f      	b.n	800920e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	6899      	ldr	r1, [r3, #8]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	f000 f96b 	bl	8009458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009190:	609a      	str	r2, [r3, #8]
      break;
 8009192:	e03c      	b.n	800920e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	6859      	ldr	r1, [r3, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	461a      	mov	r2, r3
 80091a2:	f000 f8df 	bl	8009364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2150      	movs	r1, #80	; 0x50
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f938 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 80091b2:	e02c      	b.n	800920e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6859      	ldr	r1, [r3, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	461a      	mov	r2, r3
 80091c2:	f000 f8fe 	bl	80093c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2160      	movs	r1, #96	; 0x60
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 f928 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 80091d2:	e01c      	b.n	800920e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	6859      	ldr	r1, [r3, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f000 f8bf 	bl	8009364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2140      	movs	r1, #64	; 0x40
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 f918 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 80091f2:	e00c      	b.n	800920e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4619      	mov	r1, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	f000 f90f 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 8009204:	e003      	b.n	800920e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]
      break;
 800920a:	e000      	b.n	800920e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800920c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a34      	ldr	r2, [pc, #208]	; (8009348 <TIM_Base_SetConfig+0xe4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00f      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009282:	d00b      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a31      	ldr	r2, [pc, #196]	; (800934c <TIM_Base_SetConfig+0xe8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d007      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a30      	ldr	r2, [pc, #192]	; (8009350 <TIM_Base_SetConfig+0xec>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d003      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a2f      	ldr	r2, [pc, #188]	; (8009354 <TIM_Base_SetConfig+0xf0>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d108      	bne.n	80092ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a25      	ldr	r2, [pc, #148]	; (8009348 <TIM_Base_SetConfig+0xe4>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d01b      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092bc:	d017      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a22      	ldr	r2, [pc, #136]	; (800934c <TIM_Base_SetConfig+0xe8>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d013      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a21      	ldr	r2, [pc, #132]	; (8009350 <TIM_Base_SetConfig+0xec>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00f      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a20      	ldr	r2, [pc, #128]	; (8009354 <TIM_Base_SetConfig+0xf0>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d00b      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a1f      	ldr	r2, [pc, #124]	; (8009358 <TIM_Base_SetConfig+0xf4>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d007      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a1e      	ldr	r2, [pc, #120]	; (800935c <TIM_Base_SetConfig+0xf8>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d003      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a1d      	ldr	r2, [pc, #116]	; (8009360 <TIM_Base_SetConfig+0xfc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d108      	bne.n	8009300 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a08      	ldr	r2, [pc, #32]	; (8009348 <TIM_Base_SetConfig+0xe4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d103      	bne.n	8009334 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	691a      	ldr	r2, [r3, #16]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	615a      	str	r2, [r3, #20]
}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40010000 	.word	0x40010000
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40000c00 	.word	0x40000c00
 8009358:	40014000 	.word	0x40014000
 800935c:	40014400 	.word	0x40014400
 8009360:	40014800 	.word	0x40014800

08009364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f023 0201 	bic.w	r2, r3, #1
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800938e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	4313      	orrs	r3, r2
 8009398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f023 030a 	bic.w	r3, r3, #10
 80093a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	621a      	str	r2, [r3, #32]
}
 80093b6:	bf00      	nop
 80093b8:	371c      	adds	r7, #28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b087      	sub	sp, #28
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	f023 0210 	bic.w	r2, r3, #16
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	031b      	lsls	r3, r3, #12
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4313      	orrs	r3, r2
 8009408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	621a      	str	r2, [r3, #32]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4313      	orrs	r3, r2
 8009440:	f043 0307 	orr.w	r3, r3, #7
 8009444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	609a      	str	r2, [r3, #8]
}
 800944c:	bf00      	nop
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	021a      	lsls	r2, r3, #8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	431a      	orrs	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4313      	orrs	r3, r2
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	4313      	orrs	r3, r2
 8009484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	609a      	str	r2, [r3, #8]
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f003 031f 	and.w	r3, r3, #31
 80094aa:	2201      	movs	r2, #1
 80094ac:	fa02 f303 	lsl.w	r3, r2, r3
 80094b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6a1a      	ldr	r2, [r3, #32]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	43db      	mvns	r3, r3
 80094ba:	401a      	ands	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6a1a      	ldr	r2, [r3, #32]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f003 031f 	and.w	r3, r3, #31
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	fa01 f303 	lsl.w	r3, r1, r3
 80094d0:	431a      	orrs	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	621a      	str	r2, [r3, #32]
}
 80094d6:	bf00      	nop
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d101      	bne.n	80094fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094f8:	2302      	movs	r3, #2
 80094fa:	e050      	b.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a1c      	ldr	r2, [pc, #112]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d018      	beq.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009548:	d013      	beq.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a18      	ldr	r2, [pc, #96]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d00e      	beq.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a16      	ldr	r2, [pc, #88]	; (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d009      	beq.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a15      	ldr	r2, [pc, #84]	; (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d004      	beq.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a13      	ldr	r2, [pc, #76]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d10c      	bne.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	4313      	orrs	r3, r2
 8009582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	40010000 	.word	0x40010000
 80095b0:	40000400 	.word	0x40000400
 80095b4:	40000800 	.word	0x40000800
 80095b8:	40000c00 	.word	0x40000c00
 80095bc:	40014000 	.word	0x40014000

080095c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e03f      	b.n	800967a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fc ffb0 	bl	8006574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2224      	movs	r2, #36	; 0x24
 8009618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800962a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fe9b 	bl	800a368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	691a      	ldr	r2, [r3, #16]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695a      	ldr	r2, [r3, #20]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68da      	ldr	r2, [r3, #12]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2220      	movs	r2, #32
 8009674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b08c      	sub	sp, #48	; 0x30
 8009686:	af00      	add	r7, sp, #0
 8009688:	60f8      	str	r0, [r7, #12]
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	4613      	mov	r3, r2
 800968e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b20      	cmp	r3, #32
 800969a:	d152      	bne.n	8009742 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e04b      	b.n	8009744 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d101      	bne.n	80096ba <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80096b6:	2302      	movs	r3, #2
 80096b8:	e044      	b.n	8009744 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80096c8:	88fb      	ldrh	r3, [r7, #6]
 80096ca:	461a      	mov	r2, r3
 80096cc:	68b9      	ldr	r1, [r7, #8]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fbea 	bl	8009ea8 <UART_Start_Receive_DMA>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80096da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d12c      	bne.n	800973c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d125      	bne.n	8009736 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096ea:	2300      	movs	r3, #0
 80096ec:	613b      	str	r3, [r7, #16]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	613b      	str	r3, [r7, #16]
 80096fe:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	330c      	adds	r3, #12
 8009706:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	617b      	str	r3, [r7, #20]
   return(result);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f043 0310 	orr.w	r3, r3, #16
 8009716:	62bb      	str	r3, [r7, #40]	; 0x28
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	330c      	adds	r3, #12
 800971e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009720:	627a      	str	r2, [r7, #36]	; 0x24
 8009722:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009724:	6a39      	ldr	r1, [r7, #32]
 8009726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009728:	e841 2300 	strex	r3, r2, [r1]
 800972c:	61fb      	str	r3, [r7, #28]
   return(result);
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e5      	bne.n	8009700 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009734:	e002      	b.n	800973c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800973c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009740:	e000      	b.n	8009744 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009742:	2302      	movs	r3, #2
  }
}
 8009744:	4618      	mov	r0, r3
 8009746:	3730      	adds	r7, #48	; 0x30
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b0ba      	sub	sp, #232	; 0xe8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009772:	2300      	movs	r3, #0
 8009774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009778:	2300      	movs	r3, #0
 800977a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800978a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10f      	bne.n	80097b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009796:	f003 0320 	and.w	r3, r3, #32
 800979a:	2b00      	cmp	r3, #0
 800979c:	d009      	beq.n	80097b2 <HAL_UART_IRQHandler+0x66>
 800979e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a2:	f003 0320 	and.w	r3, r3, #32
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fd21 	bl	800a1f2 <UART_Receive_IT>
      return;
 80097b0:	e256      	b.n	8009c60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 80de 	beq.w	8009978 <HAL_UART_IRQHandler+0x22c>
 80097bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 80d1 	beq.w	8009978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <HAL_UART_IRQHandler+0xae>
 80097e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f2:	f043 0201 	orr.w	r2, r3, #1
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fe:	f003 0304 	and.w	r3, r3, #4
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <HAL_UART_IRQHandler+0xd2>
 8009806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d005      	beq.n	800981e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	f043 0202 	orr.w	r2, r3, #2
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800981e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <HAL_UART_IRQHandler+0xf6>
 800982a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	f043 0204 	orr.w	r2, r3, #4
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009846:	f003 0308 	and.w	r3, r3, #8
 800984a:	2b00      	cmp	r3, #0
 800984c:	d011      	beq.n	8009872 <HAL_UART_IRQHandler+0x126>
 800984e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d105      	bne.n	8009866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800985a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	f043 0208 	orr.w	r2, r3, #8
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 81ed 	beq.w	8009c56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800987c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d008      	beq.n	800989a <HAL_UART_IRQHandler+0x14e>
 8009888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800988c:	f003 0320 	and.w	r3, r3, #32
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fcac 	bl	800a1f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a4:	2b40      	cmp	r3, #64	; 0x40
 80098a6:	bf0c      	ite	eq
 80098a8:	2301      	moveq	r3, #1
 80098aa:	2300      	movne	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <HAL_UART_IRQHandler+0x17a>
 80098be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d04f      	beq.n	8009966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fbb4 	bl	800a034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d6:	2b40      	cmp	r3, #64	; 0x40
 80098d8:	d141      	bne.n	800995e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3314      	adds	r3, #20
 80098e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3314      	adds	r3, #20
 8009902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800990a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800991e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1d9      	bne.n	80098da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	2b00      	cmp	r3, #0
 800992c:	d013      	beq.n	8009956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	4a7d      	ldr	r2, [pc, #500]	; (8009b28 <HAL_UART_IRQHandler+0x3dc>)
 8009934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993a:	4618      	mov	r0, r3
 800993c:	f7fd fad0 	bl	8006ee0 <HAL_DMA_Abort_IT>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d016      	beq.n	8009974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009954:	e00e      	b.n	8009974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f9a4 	bl	8009ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995c:	e00a      	b.n	8009974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f9a0 	bl	8009ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009964:	e006      	b.n	8009974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f99c 	bl	8009ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009972:	e170      	b.n	8009c56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009974:	bf00      	nop
    return;
 8009976:	e16e      	b.n	8009c56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997c:	2b01      	cmp	r3, #1
 800997e:	f040 814a 	bne.w	8009c16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009986:	f003 0310 	and.w	r3, r3, #16
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 8143 	beq.w	8009c16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009994:	f003 0310 	and.w	r3, r3, #16
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 813c 	beq.w	8009c16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	60bb      	str	r3, [r7, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099be:	2b40      	cmp	r3, #64	; 0x40
 80099c0:	f040 80b4 	bne.w	8009b2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 8140 	beq.w	8009c5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099e2:	429a      	cmp	r2, r3
 80099e4:	f080 8139 	bcs.w	8009c5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099fa:	f000 8088 	beq.w	8009b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	330c      	adds	r3, #12
 8009a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	330c      	adds	r3, #12
 8009a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1d9      	bne.n	80099fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3314      	adds	r3, #20
 8009a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a54:	e853 3f00 	ldrex	r3, [r3]
 8009a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a5c:	f023 0301 	bic.w	r3, r3, #1
 8009a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3314      	adds	r3, #20
 8009a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e1      	bne.n	8009a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3314      	adds	r3, #20
 8009a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3314      	adds	r3, #20
 8009aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e3      	bne.n	8009a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	330c      	adds	r3, #12
 8009ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ade:	f023 0310 	bic.w	r3, r3, #16
 8009ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	330c      	adds	r3, #12
 8009aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009af0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009af2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009af8:	e841 2300 	strex	r3, r2, [r1]
 8009afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1e3      	bne.n	8009acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fd f979 	bl	8006e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fc fb82 	bl	8006228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b24:	e099      	b.n	8009c5a <HAL_UART_IRQHandler+0x50e>
 8009b26:	bf00      	nop
 8009b28:	0800a0fb 	.word	0x0800a0fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 808b 	beq.w	8009c5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 8086 	beq.w	8009c5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	330c      	adds	r3, #12
 8009b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	330c      	adds	r3, #12
 8009b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b76:	647a      	str	r2, [r7, #68]	; 0x44
 8009b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e3      	bne.n	8009b52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3314      	adds	r3, #20
 8009b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	623b      	str	r3, [r7, #32]
   return(result);
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	f023 0301 	bic.w	r3, r3, #1
 8009ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3314      	adds	r3, #20
 8009baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bae:	633a      	str	r2, [r7, #48]	; 0x30
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e3      	bne.n	8009b8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	330c      	adds	r3, #12
 8009bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 0310 	bic.w	r3, r3, #16
 8009be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	330c      	adds	r3, #12
 8009bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009bf4:	61fa      	str	r2, [r7, #28]
 8009bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	69b9      	ldr	r1, [r7, #24]
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	617b      	str	r3, [r7, #20]
   return(result);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e3      	bne.n	8009bd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fc fb0a 	bl	8006228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c14:	e023      	b.n	8009c5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d009      	beq.n	8009c36 <HAL_UART_IRQHandler+0x4ea>
 8009c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa77 	bl	800a122 <UART_Transmit_IT>
    return;
 8009c34:	e014      	b.n	8009c60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00e      	beq.n	8009c60 <HAL_UART_IRQHandler+0x514>
 8009c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d008      	beq.n	8009c60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fab7 	bl	800a1c2 <UART_EndTransmit_IT>
    return;
 8009c54:	e004      	b.n	8009c60 <HAL_UART_IRQHandler+0x514>
    return;
 8009c56:	bf00      	nop
 8009c58:	e002      	b.n	8009c60 <HAL_UART_IRQHandler+0x514>
      return;
 8009c5a:	bf00      	nop
 8009c5c:	e000      	b.n	8009c60 <HAL_UART_IRQHandler+0x514>
      return;
 8009c5e:	bf00      	nop
  }
}
 8009c60:	37e8      	adds	r7, #232	; 0xe8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop

08009c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b09c      	sub	sp, #112	; 0x70
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d172      	bne.n	8009dba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	330c      	adds	r3, #12
 8009ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	330c      	adds	r3, #12
 8009cf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cfc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e5      	bne.n	8009cda <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3314      	adds	r3, #20
 8009d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d20:	f023 0301 	bic.w	r3, r3, #1
 8009d24:	667b      	str	r3, [r7, #100]	; 0x64
 8009d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d2e:	647a      	str	r2, [r7, #68]	; 0x44
 8009d30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3314      	adds	r3, #20
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	623b      	str	r3, [r7, #32]
   return(result);
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d58:	663b      	str	r3, [r7, #96]	; 0x60
 8009d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3314      	adds	r3, #20
 8009d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d62:	633a      	str	r2, [r7, #48]	; 0x30
 8009d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e5      	bne.n	8009d42 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d119      	bne.n	8009dba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	330c      	adds	r3, #12
 8009d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f023 0310 	bic.w	r3, r3, #16
 8009d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	330c      	adds	r3, #12
 8009da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009da6:	61fa      	str	r2, [r7, #28]
 8009da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	69b9      	ldr	r1, [r7, #24]
 8009dac:	69fa      	ldr	r2, [r7, #28]
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	617b      	str	r3, [r7, #20]
   return(result);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e5      	bne.n	8009d86 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d106      	bne.n	8009dd0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009dca:	f7fc fa2d 	bl	8006228 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dce:	e002      	b.n	8009dd6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009dd0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009dd2:	f7ff ff53 	bl	8009c7c <HAL_UART_RxCpltCallback>
}
 8009dd6:	bf00      	nop
 8009dd8:	3770      	adds	r7, #112	; 0x70
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d108      	bne.n	8009e06 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009df8:	085b      	lsrs	r3, r3, #1
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7fc fa12 	bl	8006228 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e04:	e002      	b.n	8009e0c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff ff42 	bl	8009c90 <HAL_UART_RxHalfCpltCallback>
}
 8009e0c:	bf00      	nop
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e30:	2b80      	cmp	r3, #128	; 0x80
 8009e32:	bf0c      	ite	eq
 8009e34:	2301      	moveq	r3, #1
 8009e36:	2300      	movne	r3, #0
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b21      	cmp	r3, #33	; 0x21
 8009e46:	d108      	bne.n	8009e5a <UART_DMAError+0x46>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2200      	movs	r2, #0
 8009e52:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009e54:	68b8      	ldr	r0, [r7, #8]
 8009e56:	f000 f8c5 	bl	8009fe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e64:	2b40      	cmp	r3, #64	; 0x40
 8009e66:	bf0c      	ite	eq
 8009e68:	2301      	moveq	r3, #1
 8009e6a:	2300      	movne	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b22      	cmp	r3, #34	; 0x22
 8009e7a:	d108      	bne.n	8009e8e <UART_DMAError+0x7a>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d005      	beq.n	8009e8e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2200      	movs	r2, #0
 8009e86:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009e88:	68b8      	ldr	r0, [r7, #8]
 8009e8a:	f000 f8d3 	bl	800a034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	f043 0210 	orr.w	r2, r3, #16
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e9a:	68b8      	ldr	r0, [r7, #8]
 8009e9c:	f7ff ff02 	bl	8009ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ea0:	bf00      	nop
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b098      	sub	sp, #96	; 0x60
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	88fa      	ldrh	r2, [r7, #6]
 8009ec0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2222      	movs	r2, #34	; 0x22
 8009ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	4a40      	ldr	r2, [pc, #256]	; (8009fd8 <UART_Start_Receive_DMA+0x130>)
 8009ed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009edc:	4a3f      	ldr	r2, [pc, #252]	; (8009fdc <UART_Start_Receive_DMA+0x134>)
 8009ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee4:	4a3e      	ldr	r2, [pc, #248]	; (8009fe0 <UART_Start_Receive_DMA+0x138>)
 8009ee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eec:	2200      	movs	r2, #0
 8009eee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009ef0:	f107 0308 	add.w	r3, r7, #8
 8009ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3304      	adds	r3, #4
 8009f00:	4619      	mov	r1, r3
 8009f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	f7fc ff22 	bl	8006d50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	613b      	str	r3, [r7, #16]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	613b      	str	r3, [r7, #16]
 8009f20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d019      	beq.n	8009f66 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	330c      	adds	r3, #12
 8009f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	330c      	adds	r3, #12
 8009f50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f52:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009f54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e5      	bne.n	8009f32 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3314      	adds	r3, #20
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	657b      	str	r3, [r7, #84]	; 0x54
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3314      	adds	r3, #20
 8009f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f86:	63ba      	str	r2, [r7, #56]	; 0x38
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e5      	bne.n	8009f66 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3314      	adds	r3, #20
 8009fa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fba:	627a      	str	r2, [r7, #36]	; 0x24
 8009fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6a39      	ldr	r1, [r7, #32]
 8009fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e5      	bne.n	8009f9a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3760      	adds	r7, #96	; 0x60
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	08009cb9 	.word	0x08009cb9
 8009fdc:	08009ddf 	.word	0x08009ddf
 8009fe0:	08009e15 	.word	0x08009e15

08009fe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b089      	sub	sp, #36	; 0x24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	330c      	adds	r3, #12
 8009ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	e853 3f00 	ldrex	r3, [r3]
 8009ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	330c      	adds	r3, #12
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	61ba      	str	r2, [r7, #24]
 800a00e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a010:	6979      	ldr	r1, [r7, #20]
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	e841 2300 	strex	r3, r2, [r1]
 800a018:	613b      	str	r3, [r7, #16]
   return(result);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1e5      	bne.n	8009fec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2220      	movs	r2, #32
 800a024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a028:	bf00      	nop
 800a02a:	3724      	adds	r7, #36	; 0x24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b095      	sub	sp, #84	; 0x54
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a052:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	330c      	adds	r3, #12
 800a05a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a05c:	643a      	str	r2, [r7, #64]	; 0x40
 800a05e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e5      	bne.n	800a03c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3314      	adds	r3, #20
 800a076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	64bb      	str	r3, [r7, #72]	; 0x48
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3314      	adds	r3, #20
 800a08e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a090:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e5      	bne.n	800a070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d119      	bne.n	800a0e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	330c      	adds	r3, #12
 800a0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f023 0310 	bic.w	r3, r3, #16
 800a0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	330c      	adds	r3, #12
 800a0ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0cc:	61ba      	str	r2, [r7, #24]
 800a0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	6979      	ldr	r1, [r7, #20]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	e841 2300 	strex	r3, r2, [r1]
 800a0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e5      	bne.n	800a0ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a0ee:	bf00      	nop
 800a0f0:	3754      	adds	r7, #84	; 0x54
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f7ff fdc5 	bl	8009ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a122:	b480      	push	{r7}
 800a124:	b085      	sub	sp, #20
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b21      	cmp	r3, #33	; 0x21
 800a134:	d13e      	bne.n	800a1b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a13e:	d114      	bne.n	800a16a <UART_Transmit_IT+0x48>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d110      	bne.n	800a16a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a1b      	ldr	r3, [r3, #32]
 800a14c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a15c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	1c9a      	adds	r2, r3, #2
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	621a      	str	r2, [r3, #32]
 800a168:	e008      	b.n	800a17c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	1c59      	adds	r1, r3, #1
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	6211      	str	r1, [r2, #32]
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a180:	b29b      	uxth	r3, r3
 800a182:	3b01      	subs	r3, #1
 800a184:	b29b      	uxth	r3, r3
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	4619      	mov	r1, r3
 800a18a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10f      	bne.n	800a1b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68da      	ldr	r2, [r3, #12]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a19e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	e000      	b.n	800a1b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a1b4:	2302      	movs	r3, #2
  }
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff fd40 	bl	8009c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b08c      	sub	sp, #48	; 0x30
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b22      	cmp	r3, #34	; 0x22
 800a204:	f040 80ab 	bne.w	800a35e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a210:	d117      	bne.n	800a242 <UART_Receive_IT+0x50>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d113      	bne.n	800a242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a230:	b29a      	uxth	r2, r3
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23a:	1c9a      	adds	r2, r3, #2
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	629a      	str	r2, [r3, #40]	; 0x28
 800a240:	e026      	b.n	800a290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a254:	d007      	beq.n	800a266 <UART_Receive_IT+0x74>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <UART_Receive_IT+0x82>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	e008      	b.n	800a286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a280:	b2da      	uxtb	r2, r3
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a294:	b29b      	uxth	r3, r3
 800a296:	3b01      	subs	r3, #1
 800a298:	b29b      	uxth	r3, r3
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	4619      	mov	r1, r3
 800a29e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d15a      	bne.n	800a35a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68da      	ldr	r2, [r3, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0220 	bic.w	r2, r2, #32
 800a2b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68da      	ldr	r2, [r3, #12]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	695a      	ldr	r2, [r3, #20]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 0201 	bic.w	r2, r2, #1
 800a2d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d135      	bne.n	800a350 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	330c      	adds	r3, #12
 800a2f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f023 0310 	bic.w	r3, r3, #16
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	330c      	adds	r3, #12
 800a308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30a:	623a      	str	r2, [r7, #32]
 800a30c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	69f9      	ldr	r1, [r7, #28]
 800a310:	6a3a      	ldr	r2, [r7, #32]
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	61bb      	str	r3, [r7, #24]
   return(result);
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e5      	bne.n	800a2ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0310 	and.w	r3, r3, #16
 800a328:	2b10      	cmp	r3, #16
 800a32a:	d10a      	bne.n	800a342 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a32c:	2300      	movs	r3, #0
 800a32e:	60fb      	str	r3, [r7, #12]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7fb ff6d 	bl	8006228 <HAL_UARTEx_RxEventCallback>
 800a34e:	e002      	b.n	800a356 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff fc93 	bl	8009c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	e002      	b.n	800a360 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	e000      	b.n	800a360 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a35e:	2302      	movs	r3, #2
  }
}
 800a360:	4618      	mov	r0, r3
 800a362:	3730      	adds	r7, #48	; 0x30
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a36c:	b0c0      	sub	sp, #256	; 0x100
 800a36e:	af00      	add	r7, sp, #0
 800a370:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a384:	68d9      	ldr	r1, [r3, #12]
 800a386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	ea40 0301 	orr.w	r3, r0, r1
 800a390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3c0:	f021 010c 	bic.w	r1, r1, #12
 800a3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e2:	6999      	ldr	r1, [r3, #24]
 800a3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	ea40 0301 	orr.w	r3, r0, r1
 800a3ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	4b8f      	ldr	r3, [pc, #572]	; (800a634 <UART_SetConfig+0x2cc>)
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d005      	beq.n	800a408 <UART_SetConfig+0xa0>
 800a3fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b8d      	ldr	r3, [pc, #564]	; (800a638 <UART_SetConfig+0x2d0>)
 800a404:	429a      	cmp	r2, r3
 800a406:	d104      	bne.n	800a412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a408:	f7fd fe0a 	bl	8008020 <HAL_RCC_GetPCLK2Freq>
 800a40c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a410:	e003      	b.n	800a41a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a412:	f7fd fdf1 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 800a416:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a41a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a424:	f040 810c 	bne.w	800a640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a432:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a43a:	4622      	mov	r2, r4
 800a43c:	462b      	mov	r3, r5
 800a43e:	1891      	adds	r1, r2, r2
 800a440:	65b9      	str	r1, [r7, #88]	; 0x58
 800a442:	415b      	adcs	r3, r3
 800a444:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a44a:	4621      	mov	r1, r4
 800a44c:	eb12 0801 	adds.w	r8, r2, r1
 800a450:	4629      	mov	r1, r5
 800a452:	eb43 0901 	adc.w	r9, r3, r1
 800a456:	f04f 0200 	mov.w	r2, #0
 800a45a:	f04f 0300 	mov.w	r3, #0
 800a45e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a46a:	4690      	mov	r8, r2
 800a46c:	4699      	mov	r9, r3
 800a46e:	4623      	mov	r3, r4
 800a470:	eb18 0303 	adds.w	r3, r8, r3
 800a474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a478:	462b      	mov	r3, r5
 800a47a:	eb49 0303 	adc.w	r3, r9, r3
 800a47e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a48e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a496:	460b      	mov	r3, r1
 800a498:	18db      	adds	r3, r3, r3
 800a49a:	653b      	str	r3, [r7, #80]	; 0x50
 800a49c:	4613      	mov	r3, r2
 800a49e:	eb42 0303 	adc.w	r3, r2, r3
 800a4a2:	657b      	str	r3, [r7, #84]	; 0x54
 800a4a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a4a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a4ac:	f7f6 fbbc 	bl	8000c28 <__aeabi_uldivmod>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4b61      	ldr	r3, [pc, #388]	; (800a63c <UART_SetConfig+0x2d4>)
 800a4b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a4ba:	095b      	lsrs	r3, r3, #5
 800a4bc:	011c      	lsls	r4, r3, #4
 800a4be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a4cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	464b      	mov	r3, r9
 800a4d4:	1891      	adds	r1, r2, r2
 800a4d6:	64b9      	str	r1, [r7, #72]	; 0x48
 800a4d8:	415b      	adcs	r3, r3
 800a4da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a4e0:	4641      	mov	r1, r8
 800a4e2:	eb12 0a01 	adds.w	sl, r2, r1
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	eb43 0b01 	adc.w	fp, r3, r1
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	f04f 0300 	mov.w	r3, #0
 800a4f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a4f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a4fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a500:	4692      	mov	sl, r2
 800a502:	469b      	mov	fp, r3
 800a504:	4643      	mov	r3, r8
 800a506:	eb1a 0303 	adds.w	r3, sl, r3
 800a50a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a50e:	464b      	mov	r3, r9
 800a510:	eb4b 0303 	adc.w	r3, fp, r3
 800a514:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a524:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a52c:	460b      	mov	r3, r1
 800a52e:	18db      	adds	r3, r3, r3
 800a530:	643b      	str	r3, [r7, #64]	; 0x40
 800a532:	4613      	mov	r3, r2
 800a534:	eb42 0303 	adc.w	r3, r2, r3
 800a538:	647b      	str	r3, [r7, #68]	; 0x44
 800a53a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a53e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a542:	f7f6 fb71 	bl	8000c28 <__aeabi_uldivmod>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4611      	mov	r1, r2
 800a54c:	4b3b      	ldr	r3, [pc, #236]	; (800a63c <UART_SetConfig+0x2d4>)
 800a54e:	fba3 2301 	umull	r2, r3, r3, r1
 800a552:	095b      	lsrs	r3, r3, #5
 800a554:	2264      	movs	r2, #100	; 0x64
 800a556:	fb02 f303 	mul.w	r3, r2, r3
 800a55a:	1acb      	subs	r3, r1, r3
 800a55c:	00db      	lsls	r3, r3, #3
 800a55e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a562:	4b36      	ldr	r3, [pc, #216]	; (800a63c <UART_SetConfig+0x2d4>)
 800a564:	fba3 2302 	umull	r2, r3, r3, r2
 800a568:	095b      	lsrs	r3, r3, #5
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a570:	441c      	add	r4, r3
 800a572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a576:	2200      	movs	r2, #0
 800a578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a57c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a584:	4642      	mov	r2, r8
 800a586:	464b      	mov	r3, r9
 800a588:	1891      	adds	r1, r2, r2
 800a58a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a58c:	415b      	adcs	r3, r3
 800a58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a594:	4641      	mov	r1, r8
 800a596:	1851      	adds	r1, r2, r1
 800a598:	6339      	str	r1, [r7, #48]	; 0x30
 800a59a:	4649      	mov	r1, r9
 800a59c:	414b      	adcs	r3, r1
 800a59e:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a0:	f04f 0200 	mov.w	r2, #0
 800a5a4:	f04f 0300 	mov.w	r3, #0
 800a5a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a5ac:	4659      	mov	r1, fp
 800a5ae:	00cb      	lsls	r3, r1, #3
 800a5b0:	4651      	mov	r1, sl
 800a5b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5b6:	4651      	mov	r1, sl
 800a5b8:	00ca      	lsls	r2, r1, #3
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4603      	mov	r3, r0
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	189b      	adds	r3, r3, r2
 800a5c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	460a      	mov	r2, r1
 800a5cc:	eb42 0303 	adc.w	r3, r2, r3
 800a5d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a5e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	18db      	adds	r3, r3, r3
 800a5ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	eb42 0303 	adc.w	r3, r2, r3
 800a5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a5fe:	f7f6 fb13 	bl	8000c28 <__aeabi_uldivmod>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <UART_SetConfig+0x2d4>)
 800a608:	fba3 1302 	umull	r1, r3, r3, r2
 800a60c:	095b      	lsrs	r3, r3, #5
 800a60e:	2164      	movs	r1, #100	; 0x64
 800a610:	fb01 f303 	mul.w	r3, r1, r3
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	3332      	adds	r3, #50	; 0x32
 800a61a:	4a08      	ldr	r2, [pc, #32]	; (800a63c <UART_SetConfig+0x2d4>)
 800a61c:	fba2 2303 	umull	r2, r3, r2, r3
 800a620:	095b      	lsrs	r3, r3, #5
 800a622:	f003 0207 	and.w	r2, r3, #7
 800a626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4422      	add	r2, r4
 800a62e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a630:	e105      	b.n	800a83e <UART_SetConfig+0x4d6>
 800a632:	bf00      	nop
 800a634:	40011000 	.word	0x40011000
 800a638:	40011400 	.word	0x40011400
 800a63c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a644:	2200      	movs	r2, #0
 800a646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a64a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a64e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a652:	4642      	mov	r2, r8
 800a654:	464b      	mov	r3, r9
 800a656:	1891      	adds	r1, r2, r2
 800a658:	6239      	str	r1, [r7, #32]
 800a65a:	415b      	adcs	r3, r3
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
 800a65e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a662:	4641      	mov	r1, r8
 800a664:	1854      	adds	r4, r2, r1
 800a666:	4649      	mov	r1, r9
 800a668:	eb43 0501 	adc.w	r5, r3, r1
 800a66c:	f04f 0200 	mov.w	r2, #0
 800a670:	f04f 0300 	mov.w	r3, #0
 800a674:	00eb      	lsls	r3, r5, #3
 800a676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a67a:	00e2      	lsls	r2, r4, #3
 800a67c:	4614      	mov	r4, r2
 800a67e:	461d      	mov	r5, r3
 800a680:	4643      	mov	r3, r8
 800a682:	18e3      	adds	r3, r4, r3
 800a684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a688:	464b      	mov	r3, r9
 800a68a:	eb45 0303 	adc.w	r3, r5, r3
 800a68e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a69e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a6a2:	f04f 0200 	mov.w	r2, #0
 800a6a6:	f04f 0300 	mov.w	r3, #0
 800a6aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	008b      	lsls	r3, r1, #2
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	008a      	lsls	r2, r1, #2
 800a6bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a6c0:	f7f6 fab2 	bl	8000c28 <__aeabi_uldivmod>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4b60      	ldr	r3, [pc, #384]	; (800a84c <UART_SetConfig+0x4e4>)
 800a6ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a6ce:	095b      	lsrs	r3, r3, #5
 800a6d0:	011c      	lsls	r4, r3, #4
 800a6d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a6e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	1891      	adds	r1, r2, r2
 800a6ea:	61b9      	str	r1, [r7, #24]
 800a6ec:	415b      	adcs	r3, r3
 800a6ee:	61fb      	str	r3, [r7, #28]
 800a6f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6f4:	4641      	mov	r1, r8
 800a6f6:	1851      	adds	r1, r2, r1
 800a6f8:	6139      	str	r1, [r7, #16]
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	414b      	adcs	r3, r1
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	f04f 0300 	mov.w	r3, #0
 800a708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a70c:	4659      	mov	r1, fp
 800a70e:	00cb      	lsls	r3, r1, #3
 800a710:	4651      	mov	r1, sl
 800a712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a716:	4651      	mov	r1, sl
 800a718:	00ca      	lsls	r2, r1, #3
 800a71a:	4610      	mov	r0, r2
 800a71c:	4619      	mov	r1, r3
 800a71e:	4603      	mov	r3, r0
 800a720:	4642      	mov	r2, r8
 800a722:	189b      	adds	r3, r3, r2
 800a724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a728:	464b      	mov	r3, r9
 800a72a:	460a      	mov	r2, r1
 800a72c:	eb42 0303 	adc.w	r3, r2, r3
 800a730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a73e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a740:	f04f 0200 	mov.w	r2, #0
 800a744:	f04f 0300 	mov.w	r3, #0
 800a748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a74c:	4649      	mov	r1, r9
 800a74e:	008b      	lsls	r3, r1, #2
 800a750:	4641      	mov	r1, r8
 800a752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a756:	4641      	mov	r1, r8
 800a758:	008a      	lsls	r2, r1, #2
 800a75a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a75e:	f7f6 fa63 	bl	8000c28 <__aeabi_uldivmod>
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	4b39      	ldr	r3, [pc, #228]	; (800a84c <UART_SetConfig+0x4e4>)
 800a768:	fba3 1302 	umull	r1, r3, r3, r2
 800a76c:	095b      	lsrs	r3, r3, #5
 800a76e:	2164      	movs	r1, #100	; 0x64
 800a770:	fb01 f303 	mul.w	r3, r1, r3
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	011b      	lsls	r3, r3, #4
 800a778:	3332      	adds	r3, #50	; 0x32
 800a77a:	4a34      	ldr	r2, [pc, #208]	; (800a84c <UART_SetConfig+0x4e4>)
 800a77c:	fba2 2303 	umull	r2, r3, r2, r3
 800a780:	095b      	lsrs	r3, r3, #5
 800a782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a786:	441c      	add	r4, r3
 800a788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a78c:	2200      	movs	r2, #0
 800a78e:	673b      	str	r3, [r7, #112]	; 0x70
 800a790:	677a      	str	r2, [r7, #116]	; 0x74
 800a792:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a796:	4642      	mov	r2, r8
 800a798:	464b      	mov	r3, r9
 800a79a:	1891      	adds	r1, r2, r2
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	415b      	adcs	r3, r3
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7a6:	4641      	mov	r1, r8
 800a7a8:	1851      	adds	r1, r2, r1
 800a7aa:	6039      	str	r1, [r7, #0]
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	414b      	adcs	r3, r1
 800a7b0:	607b      	str	r3, [r7, #4]
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	f04f 0300 	mov.w	r3, #0
 800a7ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a7be:	4659      	mov	r1, fp
 800a7c0:	00cb      	lsls	r3, r1, #3
 800a7c2:	4651      	mov	r1, sl
 800a7c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7c8:	4651      	mov	r1, sl
 800a7ca:	00ca      	lsls	r2, r1, #3
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	4642      	mov	r2, r8
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7d8:	464b      	mov	r3, r9
 800a7da:	460a      	mov	r2, r1
 800a7dc:	eb42 0303 	adc.w	r3, r2, r3
 800a7e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a7ec:	667a      	str	r2, [r7, #100]	; 0x64
 800a7ee:	f04f 0200 	mov.w	r2, #0
 800a7f2:	f04f 0300 	mov.w	r3, #0
 800a7f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	008b      	lsls	r3, r1, #2
 800a7fe:	4641      	mov	r1, r8
 800a800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a804:	4641      	mov	r1, r8
 800a806:	008a      	lsls	r2, r1, #2
 800a808:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a80c:	f7f6 fa0c 	bl	8000c28 <__aeabi_uldivmod>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <UART_SetConfig+0x4e4>)
 800a816:	fba3 1302 	umull	r1, r3, r3, r2
 800a81a:	095b      	lsrs	r3, r3, #5
 800a81c:	2164      	movs	r1, #100	; 0x64
 800a81e:	fb01 f303 	mul.w	r3, r1, r3
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	011b      	lsls	r3, r3, #4
 800a826:	3332      	adds	r3, #50	; 0x32
 800a828:	4a08      	ldr	r2, [pc, #32]	; (800a84c <UART_SetConfig+0x4e4>)
 800a82a:	fba2 2303 	umull	r2, r3, r2, r3
 800a82e:	095b      	lsrs	r3, r3, #5
 800a830:	f003 020f 	and.w	r2, r3, #15
 800a834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4422      	add	r2, r4
 800a83c:	609a      	str	r2, [r3, #8]
}
 800a83e:	bf00      	nop
 800a840:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a844:	46bd      	mov	sp, r7
 800a846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a84a:	bf00      	nop
 800a84c:	51eb851f 	.word	0x51eb851f

0800a850 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a854:	4904      	ldr	r1, [pc, #16]	; (800a868 <MX_FATFS_Init+0x18>)
 800a856:	4805      	ldr	r0, [pc, #20]	; (800a86c <MX_FATFS_Init+0x1c>)
 800a858:	f003 f8ae 	bl	800d9b8 <FATFS_LinkDriver>
 800a85c:	4603      	mov	r3, r0
 800a85e:	461a      	mov	r2, r3
 800a860:	4b03      	ldr	r3, [pc, #12]	; (800a870 <MX_FATFS_Init+0x20>)
 800a862:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a864:	bf00      	nop
 800a866:	bd80      	pop	{r7, pc}
 800a868:	200008a8 	.word	0x200008a8
 800a86c:	200000f0 	.word	0x200000f0
 800a870:	200008a4 	.word	0x200008a4

0800a874 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a878:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	4603      	mov	r3, r0
 800a88c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	4618      	mov	r0, r3
 800a892:	f7fa fcc3 	bl	800521c <SD_disk_initialize>
 800a896:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 800a8aa:	79fb      	ldrb	r3, [r7, #7]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fa fd9f 	bl	80053f0 <SD_disk_status>
 800a8b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60b9      	str	r1, [r7, #8]
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	603b      	str	r3, [r7, #0]
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800a8cc:	7bf8      	ldrb	r0, [r7, #15]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	f7fa fda2 	bl	800541c <SD_disk_read>
 800a8d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800a8f2:	7bf8      	ldrb	r0, [r7, #15]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	f7fa fdf9 	bl	80054f0 <SD_disk_write>
 800a8fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	603a      	str	r2, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
 800a914:	460b      	mov	r3, r1
 800a916:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a918:	79b9      	ldrb	r1, [r7, #6]
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fa fe6a 	bl	80055f8 <SD_disk_ioctl>
 800a924:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a926:	4618      	mov	r0, r3
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	4a08      	ldr	r2, [pc, #32]	; (800a960 <disk_status+0x30>)
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	79fa      	ldrb	r2, [r7, #7]
 800a948:	4905      	ldr	r1, [pc, #20]	; (800a960 <disk_status+0x30>)
 800a94a:	440a      	add	r2, r1
 800a94c:	7a12      	ldrb	r2, [r2, #8]
 800a94e:	4610      	mov	r0, r2
 800a950:	4798      	blx	r3
 800a952:	4603      	mov	r3, r0
 800a954:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	20000b04 	.word	0x20000b04

0800a964 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4603      	mov	r3, r0
 800a96c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a972:	79fb      	ldrb	r3, [r7, #7]
 800a974:	4a0d      	ldr	r2, [pc, #52]	; (800a9ac <disk_initialize+0x48>)
 800a976:	5cd3      	ldrb	r3, [r2, r3]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d111      	bne.n	800a9a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	4a0b      	ldr	r2, [pc, #44]	; (800a9ac <disk_initialize+0x48>)
 800a980:	2101      	movs	r1, #1
 800a982:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	4a09      	ldr	r2, [pc, #36]	; (800a9ac <disk_initialize+0x48>)
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	79fa      	ldrb	r2, [r7, #7]
 800a992:	4906      	ldr	r1, [pc, #24]	; (800a9ac <disk_initialize+0x48>)
 800a994:	440a      	add	r2, r1
 800a996:	7a12      	ldrb	r2, [r2, #8]
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20000b04 	.word	0x20000b04

0800a9b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a9b0:	b590      	push	{r4, r7, lr}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	607a      	str	r2, [r7, #4]
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	4a0a      	ldr	r2, [pc, #40]	; (800a9ec <disk_read+0x3c>)
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	689c      	ldr	r4, [r3, #8]
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	4a07      	ldr	r2, [pc, #28]	; (800a9ec <disk_read+0x3c>)
 800a9d0:	4413      	add	r3, r2
 800a9d2:	7a18      	ldrb	r0, [r3, #8]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	68b9      	ldr	r1, [r7, #8]
 800a9da:	47a0      	blx	r4
 800a9dc:	4603      	mov	r3, r0
 800a9de:	75fb      	strb	r3, [r7, #23]
  return res;
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd90      	pop	{r4, r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000b04 	.word	0x20000b04

0800a9f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a9f0:	b590      	push	{r4, r7, lr}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60b9      	str	r1, [r7, #8]
 800a9f8:	607a      	str	r2, [r7, #4]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	4a0a      	ldr	r2, [pc, #40]	; (800aa2c <disk_write+0x3c>)
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	68dc      	ldr	r4, [r3, #12]
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	4a07      	ldr	r2, [pc, #28]	; (800aa2c <disk_write+0x3c>)
 800aa10:	4413      	add	r3, r2
 800aa12:	7a18      	ldrb	r0, [r3, #8]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	47a0      	blx	r4
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa20:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd90      	pop	{r4, r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20000b04 	.word	0x20000b04

0800aa30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	603a      	str	r2, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa40:	79fb      	ldrb	r3, [r7, #7]
 800aa42:	4a09      	ldr	r2, [pc, #36]	; (800aa68 <disk_ioctl+0x38>)
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	79fa      	ldrb	r2, [r7, #7]
 800aa4e:	4906      	ldr	r1, [pc, #24]	; (800aa68 <disk_ioctl+0x38>)
 800aa50:	440a      	add	r2, r1
 800aa52:	7a10      	ldrb	r0, [r2, #8]
 800aa54:	79b9      	ldrb	r1, [r7, #6]
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	4798      	blx	r3
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]
  return res;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20000b04 	.word	0x20000b04

0800aa6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3301      	adds	r3, #1
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aa7c:	89fb      	ldrh	r3, [r7, #14]
 800aa7e:	021b      	lsls	r3, r3, #8
 800aa80:	b21a      	sxth	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	b21b      	sxth	r3, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	b21b      	sxth	r3, r3
 800aa8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aa8e:	89fb      	ldrh	r3, [r7, #14]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3303      	adds	r3, #3
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	3202      	adds	r2, #2
 800aab4:	7812      	ldrb	r2, [r2, #0]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	3201      	adds	r2, #1
 800aac2:	7812      	ldrb	r2, [r2, #0]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	021b      	lsls	r3, r3, #8
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	7812      	ldrb	r2, [r2, #0]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]
	return rv;
 800aad4:	68fb      	ldr	r3, [r7, #12]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	460b      	mov	r3, r1
 800aaec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	887a      	ldrh	r2, [r7, #2]
 800aaf6:	b2d2      	uxtb	r2, r2
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	887b      	ldrh	r3, [r7, #2]
 800aafc:	0a1b      	lsrs	r3, r3, #8
 800aafe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	607a      	str	r2, [r7, #4]
 800ab06:	887a      	ldrh	r2, [r7, #2]
 800ab08:	b2d2      	uxtb	r2, r2
 800ab0a:	701a      	strb	r2, [r3, #0]
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	b2d2      	uxtb	r2, r2
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	0a1b      	lsrs	r3, r3, #8
 800ab32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	607a      	str	r2, [r7, #4]
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	b2d2      	uxtb	r2, r2
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	0a1b      	lsrs	r3, r3, #8
 800ab44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	0a1b      	lsrs	r3, r3, #8
 800ab56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	1c5a      	adds	r2, r3, #1
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	b2d2      	uxtb	r2, r2
 800ab62:	701a      	strb	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00d      	beq.n	800aba6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	1c53      	adds	r3, r2, #1
 800ab8e:	613b      	str	r3, [r7, #16]
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	1c59      	adds	r1, r3, #1
 800ab94:	6179      	str	r1, [r7, #20]
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	607b      	str	r3, [r7, #4]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1f1      	bne.n	800ab8a <mem_cpy+0x1a>
	}
}
 800aba6:	bf00      	nop
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800abb2:	b480      	push	{r7}
 800abb4:	b087      	sub	sp, #28
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	617a      	str	r2, [r7, #20]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	b2d2      	uxtb	r2, r2
 800abcc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	607b      	str	r3, [r7, #4]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1f3      	bne.n	800abc2 <mem_set+0x10>
}
 800abda:	bf00      	nop
 800abdc:	bf00      	nop
 800abde:	371c      	adds	r7, #28
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800abe8:	b480      	push	{r7}
 800abea:	b089      	sub	sp, #36	; 0x24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	61fa      	str	r2, [r7, #28]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	61ba      	str	r2, [r7, #24]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	1acb      	subs	r3, r1, r3
 800ac14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	607b      	str	r3, [r7, #4]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <mem_cmp+0x40>
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d0eb      	beq.n	800ac00 <mem_cmp+0x18>

	return r;
 800ac28:	697b      	ldr	r3, [r7, #20]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3724      	adds	r7, #36	; 0x24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac40:	e002      	b.n	800ac48 <chk_chr+0x12>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	3301      	adds	r3, #1
 800ac46:	607b      	str	r3, [r7, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <chk_chr+0x26>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d1f2      	bne.n	800ac42 <chk_chr+0xc>
	return *str;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	e029      	b.n	800acd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac80:	4a27      	ldr	r2, [pc, #156]	; (800ad20 <chk_lock+0xb4>)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	011b      	lsls	r3, r3, #4
 800ac86:	4413      	add	r3, r2
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01d      	beq.n	800acca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac8e:	4a24      	ldr	r2, [pc, #144]	; (800ad20 <chk_lock+0xb4>)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	4413      	add	r3, r2
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d116      	bne.n	800acce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aca0:	4a1f      	ldr	r2, [pc, #124]	; (800ad20 <chk_lock+0xb4>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	4413      	add	r3, r2
 800aca8:	3304      	adds	r3, #4
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d10c      	bne.n	800acce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acb4:	4a1a      	ldr	r2, [pc, #104]	; (800ad20 <chk_lock+0xb4>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	4413      	add	r3, r2
 800acbc:	3308      	adds	r3, #8
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d102      	bne.n	800acce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acc8:	e007      	b.n	800acda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800acca:	2301      	movs	r3, #1
 800accc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3301      	adds	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d9d2      	bls.n	800ac80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b05      	cmp	r3, #5
 800acde:	d109      	bne.n	800acf4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d102      	bne.n	800acec <chk_lock+0x80>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d101      	bne.n	800acf0 <chk_lock+0x84>
 800acec:	2300      	movs	r3, #0
 800acee:	e010      	b.n	800ad12 <chk_lock+0xa6>
 800acf0:	2312      	movs	r3, #18
 800acf2:	e00e      	b.n	800ad12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d108      	bne.n	800ad0c <chk_lock+0xa0>
 800acfa:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <chk_lock+0xb4>)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	4413      	add	r3, r2
 800ad02:	330c      	adds	r3, #12
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad0a:	d101      	bne.n	800ad10 <chk_lock+0xa4>
 800ad0c:	2310      	movs	r3, #16
 800ad0e:	e000      	b.n	800ad12 <chk_lock+0xa6>
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	200008b4 	.word	0x200008b4

0800ad24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	607b      	str	r3, [r7, #4]
 800ad2e:	e002      	b.n	800ad36 <enq_lock+0x12>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3301      	adds	r3, #1
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d806      	bhi.n	800ad4a <enq_lock+0x26>
 800ad3c:	4a09      	ldr	r2, [pc, #36]	; (800ad64 <enq_lock+0x40>)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	011b      	lsls	r3, r3, #4
 800ad42:	4413      	add	r3, r2
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1f2      	bne.n	800ad30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b05      	cmp	r3, #5
 800ad4e:	bf14      	ite	ne
 800ad50:	2301      	movne	r3, #1
 800ad52:	2300      	moveq	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	200008b4 	.word	0x200008b4

0800ad68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	e01f      	b.n	800adb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad78:	4a41      	ldr	r2, [pc, #260]	; (800ae80 <inc_lock+0x118>)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	011b      	lsls	r3, r3, #4
 800ad7e:	4413      	add	r3, r2
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d113      	bne.n	800adb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad8a:	4a3d      	ldr	r2, [pc, #244]	; (800ae80 <inc_lock+0x118>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	4413      	add	r3, r2
 800ad92:	3304      	adds	r3, #4
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d109      	bne.n	800adb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad9e:	4a38      	ldr	r2, [pc, #224]	; (800ae80 <inc_lock+0x118>)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	4413      	add	r3, r2
 800ada6:	3308      	adds	r3, #8
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800adae:	429a      	cmp	r2, r3
 800adb0:	d006      	beq.n	800adc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3301      	adds	r3, #1
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d9dc      	bls.n	800ad78 <inc_lock+0x10>
 800adbe:	e000      	b.n	800adc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800adc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	d132      	bne.n	800ae2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	e002      	b.n	800add4 <inc_lock+0x6c>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	3301      	adds	r3, #1
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b04      	cmp	r3, #4
 800add8:	d806      	bhi.n	800ade8 <inc_lock+0x80>
 800adda:	4a29      	ldr	r2, [pc, #164]	; (800ae80 <inc_lock+0x118>)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	4413      	add	r3, r2
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1f2      	bne.n	800adce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b05      	cmp	r3, #5
 800adec:	d101      	bne.n	800adf2 <inc_lock+0x8a>
 800adee:	2300      	movs	r3, #0
 800adf0:	e040      	b.n	800ae74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	4922      	ldr	r1, [pc, #136]	; (800ae80 <inc_lock+0x118>)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	011b      	lsls	r3, r3, #4
 800adfc:	440b      	add	r3, r1
 800adfe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	491e      	ldr	r1, [pc, #120]	; (800ae80 <inc_lock+0x118>)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	440b      	add	r3, r1
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	695a      	ldr	r2, [r3, #20]
 800ae14:	491a      	ldr	r1, [pc, #104]	; (800ae80 <inc_lock+0x118>)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	011b      	lsls	r3, r3, #4
 800ae1a:	440b      	add	r3, r1
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae20:	4a17      	ldr	r2, [pc, #92]	; (800ae80 <inc_lock+0x118>)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	4413      	add	r3, r2
 800ae28:	330c      	adds	r3, #12
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d009      	beq.n	800ae48 <inc_lock+0xe0>
 800ae34:	4a12      	ldr	r2, [pc, #72]	; (800ae80 <inc_lock+0x118>)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	011b      	lsls	r3, r3, #4
 800ae3a:	4413      	add	r3, r2
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <inc_lock+0xe0>
 800ae44:	2300      	movs	r3, #0
 800ae46:	e015      	b.n	800ae74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d108      	bne.n	800ae60 <inc_lock+0xf8>
 800ae4e:	4a0c      	ldr	r2, [pc, #48]	; (800ae80 <inc_lock+0x118>)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	011b      	lsls	r3, r3, #4
 800ae54:	4413      	add	r3, r2
 800ae56:	330c      	adds	r3, #12
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	e001      	b.n	800ae64 <inc_lock+0xfc>
 800ae60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae64:	4906      	ldr	r1, [pc, #24]	; (800ae80 <inc_lock+0x118>)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	440b      	add	r3, r1
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3301      	adds	r3, #1
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	200008b4 	.word	0x200008b4

0800ae84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	607b      	str	r3, [r7, #4]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d825      	bhi.n	800aee4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ae98:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <dec_lock+0x74>)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	011b      	lsls	r3, r3, #4
 800ae9e:	4413      	add	r3, r2
 800aea0:	330c      	adds	r3, #12
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aea6:	89fb      	ldrh	r3, [r7, #14]
 800aea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeac:	d101      	bne.n	800aeb2 <dec_lock+0x2e>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aeb2:	89fb      	ldrh	r3, [r7, #14]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <dec_lock+0x3a>
 800aeb8:	89fb      	ldrh	r3, [r7, #14]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aebe:	4a0e      	ldr	r2, [pc, #56]	; (800aef8 <dec_lock+0x74>)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	011b      	lsls	r3, r3, #4
 800aec4:	4413      	add	r3, r2
 800aec6:	330c      	adds	r3, #12
 800aec8:	89fa      	ldrh	r2, [r7, #14]
 800aeca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aecc:	89fb      	ldrh	r3, [r7, #14]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d105      	bne.n	800aede <dec_lock+0x5a>
 800aed2:	4a09      	ldr	r2, [pc, #36]	; (800aef8 <dec_lock+0x74>)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	011b      	lsls	r3, r3, #4
 800aed8:	4413      	add	r3, r2
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	737b      	strb	r3, [r7, #13]
 800aee2:	e001      	b.n	800aee8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aee4:	2302      	movs	r3, #2
 800aee6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aee8:	7b7b      	ldrb	r3, [r7, #13]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	200008b4 	.word	0x200008b4

0800aefc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800af04:	2300      	movs	r3, #0
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	e010      	b.n	800af2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af0a:	4a0d      	ldr	r2, [pc, #52]	; (800af40 <clear_lock+0x44>)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	4413      	add	r3, r2
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d105      	bne.n	800af26 <clear_lock+0x2a>
 800af1a:	4a09      	ldr	r2, [pc, #36]	; (800af40 <clear_lock+0x44>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	4413      	add	r3, r2
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3301      	adds	r3, #1
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d9eb      	bls.n	800af0a <clear_lock+0xe>
	}
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	200008b4 	.word	0x200008b4

0800af44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	78db      	ldrb	r3, [r3, #3]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d034      	beq.n	800afc2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7858      	ldrb	r0, [r3, #1]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af68:	2301      	movs	r3, #1
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	f7ff fd40 	bl	800a9f0 <disk_write>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <sync_window+0x38>
			res = FR_DISK_ERR;
 800af76:	2301      	movs	r3, #1
 800af78:	73fb      	strb	r3, [r7, #15]
 800af7a:	e022      	b.n	800afc2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	1ad2      	subs	r2, r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d217      	bcs.n	800afc2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	789b      	ldrb	r3, [r3, #2]
 800af96:	613b      	str	r3, [r7, #16]
 800af98:	e010      	b.n	800afbc <sync_window+0x78>
					wsect += fs->fsize;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	697a      	ldr	r2, [r7, #20]
 800afa0:	4413      	add	r3, r2
 800afa2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	7858      	ldrb	r0, [r3, #1]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800afae:	2301      	movs	r3, #1
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	f7ff fd1d 	bl	800a9f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	3b01      	subs	r3, #1
 800afba:	613b      	str	r3, [r7, #16]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d8eb      	bhi.n	800af9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800afd6:	2300      	movs	r3, #0
 800afd8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d01b      	beq.n	800b01c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff ffad 	bl	800af44 <sync_window>
 800afea:	4603      	mov	r3, r0
 800afec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d113      	bne.n	800b01c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	7858      	ldrb	r0, [r3, #1]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800affe:	2301      	movs	r3, #1
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	f7ff fcd5 	bl	800a9b0 <disk_read>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b00c:	f04f 33ff 	mov.w	r3, #4294967295
 800b010:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b012:	2301      	movs	r3, #1
 800b014:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff ff87 	bl	800af44 <sync_window>
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d158      	bne.n	800b0f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b03      	cmp	r3, #3
 800b046:	d148      	bne.n	800b0da <sync_fs+0xb2>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	791b      	ldrb	r3, [r3, #4]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d144      	bne.n	800b0da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3334      	adds	r3, #52	; 0x34
 800b054:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b058:	2100      	movs	r1, #0
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fda9 	bl	800abb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	3334      	adds	r3, #52	; 0x34
 800b064:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b068:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fd38 	bl	800aae2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3334      	adds	r3, #52	; 0x34
 800b076:	4921      	ldr	r1, [pc, #132]	; (800b0fc <sync_fs+0xd4>)
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff fd4d 	bl	800ab18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	3334      	adds	r3, #52	; 0x34
 800b082:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b086:	491e      	ldr	r1, [pc, #120]	; (800b100 <sync_fs+0xd8>)
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff fd45 	bl	800ab18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3334      	adds	r3, #52	; 0x34
 800b092:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	4619      	mov	r1, r3
 800b09c:	4610      	mov	r0, r2
 800b09e:	f7ff fd3b 	bl	800ab18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3334      	adds	r3, #52	; 0x34
 800b0a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7ff fd31 	bl	800ab18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	7858      	ldrb	r0, [r3, #1]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	f7ff fc8e 	bl	800a9f0 <disk_write>
			fs->fsi_flag = 0;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fca4 	bl	800aa30 <disk_ioctl>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <sync_fs+0xca>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	41615252 	.word	0x41615252
 800b100:	61417272 	.word	0x61417272

0800b104 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	3b02      	subs	r3, #2
 800b112:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	3b02      	subs	r3, #2
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d301      	bcc.n	800b124 <clust2sect+0x20>
 800b120:	2300      	movs	r3, #0
 800b122:	e008      	b.n	800b136 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	895b      	ldrh	r3, [r3, #10]
 800b128:	461a      	mov	r2, r3
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	fb03 f202 	mul.w	r2, r3, r2
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	4413      	add	r3, r2
}
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b086      	sub	sp, #24
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d904      	bls.n	800b162 <get_fat+0x20>
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d302      	bcc.n	800b168 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b162:	2301      	movs	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	e08f      	b.n	800b288 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b168:	f04f 33ff 	mov.w	r3, #4294967295
 800b16c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d062      	beq.n	800b23c <get_fat+0xfa>
 800b176:	2b03      	cmp	r3, #3
 800b178:	dc7c      	bgt.n	800b274 <get_fat+0x132>
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d002      	beq.n	800b184 <get_fat+0x42>
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d042      	beq.n	800b208 <get_fat+0xc6>
 800b182:	e077      	b.n	800b274 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	085b      	lsrs	r3, r3, #1
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	0a5b      	lsrs	r3, r3, #9
 800b19a:	4413      	add	r3, r2
 800b19c:	4619      	mov	r1, r3
 800b19e:	6938      	ldr	r0, [r7, #16]
 800b1a0:	f7ff ff14 	bl	800afcc <move_window>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d167      	bne.n	800b27a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	60fa      	str	r2, [r7, #12]
 800b1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	0a5b      	lsrs	r3, r3, #9
 800b1c6:	4413      	add	r3, r2
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6938      	ldr	r0, [r7, #16]
 800b1cc:	f7ff fefe 	bl	800afcc <move_window>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d153      	bne.n	800b27e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1e4:	021b      	lsls	r3, r3, #8
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <get_fat+0xbc>
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	091b      	lsrs	r3, r3, #4
 800b1fc:	e002      	b.n	800b204 <get_fat+0xc2>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b204:	617b      	str	r3, [r7, #20]
			break;
 800b206:	e03f      	b.n	800b288 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	0a1b      	lsrs	r3, r3, #8
 800b210:	4413      	add	r3, r2
 800b212:	4619      	mov	r1, r3
 800b214:	6938      	ldr	r0, [r7, #16]
 800b216:	f7ff fed9 	bl	800afcc <move_window>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d130      	bne.n	800b282 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b22e:	4413      	add	r3, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fc1b 	bl	800aa6c <ld_word>
 800b236:	4603      	mov	r3, r0
 800b238:	617b      	str	r3, [r7, #20]
			break;
 800b23a:	e025      	b.n	800b288 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	09db      	lsrs	r3, r3, #7
 800b244:	4413      	add	r3, r2
 800b246:	4619      	mov	r1, r3
 800b248:	6938      	ldr	r0, [r7, #16]
 800b24a:	f7ff febf 	bl	800afcc <move_window>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d118      	bne.n	800b286 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b262:	4413      	add	r3, r2
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fc19 	bl	800aa9c <ld_dword>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b270:	617b      	str	r3, [r7, #20]
			break;
 800b272:	e009      	b.n	800b288 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b274:	2301      	movs	r3, #1
 800b276:	617b      	str	r3, [r7, #20]
 800b278:	e006      	b.n	800b288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b27a:	bf00      	nop
 800b27c:	e004      	b.n	800b288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b27e:	bf00      	nop
 800b280:	e002      	b.n	800b288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b282:	bf00      	nop
 800b284:	e000      	b.n	800b288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b286:	bf00      	nop
		}
	}

	return val;
 800b288:	697b      	ldr	r3, [r7, #20]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b292:	b590      	push	{r4, r7, lr}
 800b294:	b089      	sub	sp, #36	; 0x24
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b29e:	2302      	movs	r3, #2
 800b2a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	f240 80d2 	bls.w	800b44e <put_fat+0x1bc>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	f080 80cc 	bcs.w	800b44e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	f000 8096 	beq.w	800b3ec <put_fat+0x15a>
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	f300 80cd 	bgt.w	800b460 <put_fat+0x1ce>
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d002      	beq.n	800b2d0 <put_fat+0x3e>
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d06e      	beq.n	800b3ac <put_fat+0x11a>
 800b2ce:	e0c7      	b.n	800b460 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	61bb      	str	r3, [r7, #24]
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	085b      	lsrs	r3, r3, #1
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	4413      	add	r3, r2
 800b2dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	0a5b      	lsrs	r3, r3, #9
 800b2e6:	4413      	add	r3, r2
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7ff fe6e 	bl	800afcc <move_window>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2f4:	7ffb      	ldrb	r3, [r7, #31]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f040 80ab 	bne.w	800b452 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	1c59      	adds	r1, r3, #1
 800b306:	61b9      	str	r1, [r7, #24]
 800b308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30c:	4413      	add	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00d      	beq.n	800b336 <put_fat+0xa4>
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	b25b      	sxtb	r3, r3
 800b320:	f003 030f 	and.w	r3, r3, #15
 800b324:	b25a      	sxtb	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	b25b      	sxtb	r3, r3
 800b32e:	4313      	orrs	r3, r2
 800b330:	b25b      	sxtb	r3, r3
 800b332:	b2db      	uxtb	r3, r3
 800b334:	e001      	b.n	800b33a <put_fat+0xa8>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2201      	movs	r2, #1
 800b342:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	0a5b      	lsrs	r3, r3, #9
 800b34c:	4413      	add	r3, r2
 800b34e:	4619      	mov	r1, r3
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f7ff fe3b 	bl	800afcc <move_window>
 800b356:	4603      	mov	r3, r0
 800b358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b35a:	7ffb      	ldrb	r3, [r7, #31]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d17a      	bne.n	800b456 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36c:	4413      	add	r3, r2
 800b36e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <put_fat+0xf0>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	091b      	lsrs	r3, r3, #4
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	e00e      	b.n	800b3a0 <put_fat+0x10e>
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	b25b      	sxtb	r3, r3
 800b388:	f023 030f 	bic.w	r3, r3, #15
 800b38c:	b25a      	sxtb	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	0a1b      	lsrs	r3, r3, #8
 800b392:	b25b      	sxtb	r3, r3
 800b394:	f003 030f 	and.w	r3, r3, #15
 800b398:	b25b      	sxtb	r3, r3
 800b39a:	4313      	orrs	r3, r2
 800b39c:	b25b      	sxtb	r3, r3
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	70da      	strb	r2, [r3, #3]
			break;
 800b3aa:	e059      	b.n	800b460 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	0a1b      	lsrs	r3, r3, #8
 800b3b4:	4413      	add	r3, r2
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f7ff fe07 	bl	800afcc <move_window>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3c2:	7ffb      	ldrb	r3, [r7, #31]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d148      	bne.n	800b45a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b3d6:	4413      	add	r3, r2
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	b292      	uxth	r2, r2
 800b3dc:	4611      	mov	r1, r2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff fb7f 	bl	800aae2 <st_word>
			fs->wflag = 1;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	70da      	strb	r2, [r3, #3]
			break;
 800b3ea:	e039      	b.n	800b460 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	09db      	lsrs	r3, r3, #7
 800b3f4:	4413      	add	r3, r2
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff fde7 	bl	800afcc <move_window>
 800b3fe:	4603      	mov	r3, r0
 800b400:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b402:	7ffb      	ldrb	r3, [r7, #31]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d12a      	bne.n	800b45e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b41c:	4413      	add	r3, r2
 800b41e:	4618      	mov	r0, r3
 800b420:	f7ff fb3c 	bl	800aa9c <ld_dword>
 800b424:	4603      	mov	r3, r0
 800b426:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b42a:	4323      	orrs	r3, r4
 800b42c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b43c:	4413      	add	r3, r2
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fb69 	bl	800ab18 <st_dword>
			fs->wflag = 1;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2201      	movs	r2, #1
 800b44a:	70da      	strb	r2, [r3, #3]
			break;
 800b44c:	e008      	b.n	800b460 <put_fat+0x1ce>
		}
	}
 800b44e:	bf00      	nop
 800b450:	e006      	b.n	800b460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b452:	bf00      	nop
 800b454:	e004      	b.n	800b460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b456:	bf00      	nop
 800b458:	e002      	b.n	800b460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b45a:	bf00      	nop
 800b45c:	e000      	b.n	800b460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b45e:	bf00      	nop
	return res;
 800b460:	7ffb      	ldrb	r3, [r7, #31]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3724      	adds	r7, #36	; 0x24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd90      	pop	{r4, r7, pc}

0800b46a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b088      	sub	sp, #32
 800b46e:	af00      	add	r7, sp, #0
 800b470:	60f8      	str	r0, [r7, #12]
 800b472:	60b9      	str	r1, [r7, #8]
 800b474:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d904      	bls.n	800b490 <remove_chain+0x26>
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d301      	bcc.n	800b494 <remove_chain+0x2a>
 800b490:	2302      	movs	r3, #2
 800b492:	e04b      	b.n	800b52c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00c      	beq.n	800b4b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	69b8      	ldr	r0, [r7, #24]
 800b4a2:	f7ff fef6 	bl	800b292 <put_fat>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b4aa:	7ffb      	ldrb	r3, [r7, #31]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <remove_chain+0x4a>
 800b4b0:	7ffb      	ldrb	r3, [r7, #31]
 800b4b2:	e03b      	b.n	800b52c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b4b4:	68b9      	ldr	r1, [r7, #8]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f7ff fe43 	bl	800b142 <get_fat>
 800b4bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d031      	beq.n	800b528 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <remove_chain+0x64>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e02e      	b.n	800b52c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d4:	d101      	bne.n	800b4da <remove_chain+0x70>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e028      	b.n	800b52c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b4da:	2200      	movs	r2, #0
 800b4dc:	68b9      	ldr	r1, [r7, #8]
 800b4de:	69b8      	ldr	r0, [r7, #24]
 800b4e0:	f7ff fed7 	bl	800b292 <put_fat>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b4e8:	7ffb      	ldrb	r3, [r7, #31]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <remove_chain+0x88>
 800b4ee:	7ffb      	ldrb	r3, [r7, #31]
 800b4f0:	e01c      	b.n	800b52c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	695a      	ldr	r2, [r3, #20]
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	3b02      	subs	r3, #2
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d20b      	bcs.n	800b518 <remove_chain+0xae>
			fs->free_clst++;
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	791b      	ldrb	r3, [r3, #4]
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	b2da      	uxtb	r2, r3
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	429a      	cmp	r2, r3
 800b524:	d3c6      	bcc.n	800b4b4 <remove_chain+0x4a>
 800b526:	e000      	b.n	800b52a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b528:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3720      	adds	r7, #32
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10d      	bne.n	800b566 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d004      	beq.n	800b560 <create_chain+0x2c>
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	69ba      	ldr	r2, [r7, #24]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d31b      	bcc.n	800b598 <create_chain+0x64>
 800b560:	2301      	movs	r3, #1
 800b562:	61bb      	str	r3, [r7, #24]
 800b564:	e018      	b.n	800b598 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff fdea 	bl	800b142 <get_fat>
 800b56e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d801      	bhi.n	800b57a <create_chain+0x46>
 800b576:	2301      	movs	r3, #1
 800b578:	e070      	b.n	800b65c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b580:	d101      	bne.n	800b586 <create_chain+0x52>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	e06a      	b.n	800b65c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d201      	bcs.n	800b594 <create_chain+0x60>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	e063      	b.n	800b65c <create_chain+0x128>
		scl = clst;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	69fa      	ldr	r2, [r7, #28]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d307      	bcc.n	800b5bc <create_chain+0x88>
				ncl = 2;
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b5b0:	69fa      	ldr	r2, [r7, #28]
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d901      	bls.n	800b5bc <create_chain+0x88>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	e04f      	b.n	800b65c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b5bc:	69f9      	ldr	r1, [r7, #28]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff fdbf 	bl	800b142 <get_fat>
 800b5c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00e      	beq.n	800b5ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d003      	beq.n	800b5da <create_chain+0xa6>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d8:	d101      	bne.n	800b5de <create_chain+0xaa>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	e03e      	b.n	800b65c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d1da      	bne.n	800b59c <create_chain+0x68>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e038      	b.n	800b65c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b5ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f0:	69f9      	ldr	r1, [r7, #28]
 800b5f2:	6938      	ldr	r0, [r7, #16]
 800b5f4:	f7ff fe4d 	bl	800b292 <put_fat>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <create_chain+0xe2>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d006      	beq.n	800b616 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6938      	ldr	r0, [r7, #16]
 800b60e:	f7ff fe40 	bl	800b292 <put_fat>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d116      	bne.n	800b64a <create_chain+0x116>
		fs->last_clst = ncl;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	69fa      	ldr	r2, [r7, #28]
 800b620:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	695a      	ldr	r2, [r3, #20]
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	3b02      	subs	r3, #2
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d804      	bhi.n	800b63a <create_chain+0x106>
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	1e5a      	subs	r2, r3, #1
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	791b      	ldrb	r3, [r3, #4]
 800b63e:	f043 0301 	orr.w	r3, r3, #1
 800b642:	b2da      	uxtb	r2, r3
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	711a      	strb	r2, [r3, #4]
 800b648:	e007      	b.n	800b65a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d102      	bne.n	800b656 <create_chain+0x122>
 800b650:	f04f 33ff 	mov.w	r3, #4294967295
 800b654:	e000      	b.n	800b658 <create_chain+0x124>
 800b656:	2301      	movs	r3, #1
 800b658:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b65a:	69fb      	ldr	r3, [r7, #28]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b678:	3304      	adds	r3, #4
 800b67a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	0a5b      	lsrs	r3, r3, #9
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	8952      	ldrh	r2, [r2, #10]
 800b684:	fbb3 f3f2 	udiv	r3, r3, r2
 800b688:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	1d1a      	adds	r2, r3, #4
 800b68e:	613a      	str	r2, [r7, #16]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <clmt_clust+0x3a>
 800b69a:	2300      	movs	r3, #0
 800b69c:	e010      	b.n	800b6c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b69e:	697a      	ldr	r2, [r7, #20]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d307      	bcc.n	800b6b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b6b4:	e7e9      	b.n	800b68a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b6b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	4413      	add	r3, r2
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6e2:	d204      	bcs.n	800b6ee <dir_sdi+0x22>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	f003 031f 	and.w	r3, r3, #31
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e063      	b.n	800b7ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <dir_sdi+0x46>
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d902      	bls.n	800b712 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b710:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10c      	bne.n	800b732 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	095b      	lsrs	r3, r3, #5
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	8912      	ldrh	r2, [r2, #8]
 800b720:	4293      	cmp	r3, r2
 800b722:	d301      	bcc.n	800b728 <dir_sdi+0x5c>
 800b724:	2302      	movs	r3, #2
 800b726:	e048      	b.n	800b7ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	61da      	str	r2, [r3, #28]
 800b730:	e029      	b.n	800b786 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	895b      	ldrh	r3, [r3, #10]
 800b736:	025b      	lsls	r3, r3, #9
 800b738:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b73a:	e019      	b.n	800b770 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6979      	ldr	r1, [r7, #20]
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fcfe 	bl	800b142 <get_fat>
 800b746:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74e:	d101      	bne.n	800b754 <dir_sdi+0x88>
 800b750:	2301      	movs	r3, #1
 800b752:	e032      	b.n	800b7ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d904      	bls.n	800b764 <dir_sdi+0x98>
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	429a      	cmp	r2, r3
 800b762:	d301      	bcc.n	800b768 <dir_sdi+0x9c>
 800b764:	2302      	movs	r3, #2
 800b766:	e028      	b.n	800b7ba <dir_sdi+0xee>
			ofs -= csz;
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	429a      	cmp	r2, r3
 800b776:	d2e1      	bcs.n	800b73c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b778:	6979      	ldr	r1, [r7, #20]
 800b77a:	6938      	ldr	r0, [r7, #16]
 800b77c:	f7ff fcc2 	bl	800b104 <clust2sect>
 800b780:	4602      	mov	r2, r0
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	69db      	ldr	r3, [r3, #28]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <dir_sdi+0xcc>
 800b794:	2302      	movs	r3, #2
 800b796:	e010      	b.n	800b7ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	69da      	ldr	r2, [r3, #28]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	0a5b      	lsrs	r3, r3, #9
 800b7a0:	441a      	add	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b2:	441a      	add	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b086      	sub	sp, #24
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	3320      	adds	r3, #32
 800b7d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <dir_next+0x28>
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7e8:	d301      	bcc.n	800b7ee <dir_next+0x2c>
 800b7ea:	2304      	movs	r3, #4
 800b7ec:	e0aa      	b.n	800b944 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f040 8098 	bne.w	800b92a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	69db      	ldr	r3, [r3, #28]
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	095b      	lsrs	r3, r3, #5
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	8912      	ldrh	r2, [r2, #8]
 800b814:	4293      	cmp	r3, r2
 800b816:	f0c0 8088 	bcc.w	800b92a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	61da      	str	r2, [r3, #28]
 800b820:	2304      	movs	r3, #4
 800b822:	e08f      	b.n	800b944 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	0a5b      	lsrs	r3, r3, #9
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	8952      	ldrh	r2, [r2, #10]
 800b82c:	3a01      	subs	r2, #1
 800b82e:	4013      	ands	r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	d17a      	bne.n	800b92a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	4619      	mov	r1, r3
 800b83c:	4610      	mov	r0, r2
 800b83e:	f7ff fc80 	bl	800b142 <get_fat>
 800b842:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d801      	bhi.n	800b84e <dir_next+0x8c>
 800b84a:	2302      	movs	r3, #2
 800b84c:	e07a      	b.n	800b944 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b854:	d101      	bne.n	800b85a <dir_next+0x98>
 800b856:	2301      	movs	r3, #1
 800b858:	e074      	b.n	800b944 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d358      	bcc.n	800b916 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d104      	bne.n	800b874 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	61da      	str	r2, [r3, #28]
 800b870:	2304      	movs	r3, #4
 800b872:	e067      	b.n	800b944 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	4619      	mov	r1, r3
 800b87c:	4610      	mov	r0, r2
 800b87e:	f7ff fe59 	bl	800b534 <create_chain>
 800b882:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <dir_next+0xcc>
 800b88a:	2307      	movs	r3, #7
 800b88c:	e05a      	b.n	800b944 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <dir_next+0xd6>
 800b894:	2302      	movs	r3, #2
 800b896:	e055      	b.n	800b944 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d101      	bne.n	800b8a4 <dir_next+0xe2>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e04f      	b.n	800b944 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff fb4d 	bl	800af44 <sync_window>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <dir_next+0xf2>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e047      	b.n	800b944 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3334      	adds	r3, #52	; 0x34
 800b8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8bc:	2100      	movs	r1, #0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff f977 	bl	800abb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	613b      	str	r3, [r7, #16]
 800b8c8:	6979      	ldr	r1, [r7, #20]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7ff fc1a 	bl	800b104 <clust2sect>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	631a      	str	r2, [r3, #48]	; 0x30
 800b8d6:	e012      	b.n	800b8fe <dir_next+0x13c>
						fs->wflag = 1;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fb30 	bl	800af44 <sync_window>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <dir_next+0x12c>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e02a      	b.n	800b944 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	631a      	str	r2, [r3, #48]	; 0x30
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	895b      	ldrh	r3, [r3, #10]
 800b902:	461a      	mov	r2, r3
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	4293      	cmp	r3, r2
 800b908:	d3e6      	bcc.n	800b8d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b91c:	6979      	ldr	r1, [r7, #20]
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff fbf0 	bl	800b104 <clust2sect>
 800b924:	4602      	mov	r2, r0
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93c:	441a      	add	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b95c:	2100      	movs	r1, #0
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff feb4 	bl	800b6cc <dir_sdi>
 800b964:	4603      	mov	r3, r0
 800b966:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d12b      	bne.n	800b9c6 <dir_alloc+0x7a>
		n = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	4619      	mov	r1, r3
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff fb27 	bl	800afcc <move_window>
 800b97e:	4603      	mov	r3, r0
 800b980:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11d      	bne.n	800b9c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2be5      	cmp	r3, #229	; 0xe5
 800b990:	d004      	beq.n	800b99c <dir_alloc+0x50>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d107      	bne.n	800b9ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	613b      	str	r3, [r7, #16]
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d102      	bne.n	800b9b0 <dir_alloc+0x64>
 800b9aa:	e00c      	b.n	800b9c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff ff05 	bl	800b7c2 <dir_next>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0d7      	beq.n	800b972 <dir_alloc+0x26>
 800b9c2:	e000      	b.n	800b9c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b9c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	d101      	bne.n	800b9d0 <dir_alloc+0x84>
 800b9cc:	2307      	movs	r3, #7
 800b9ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	331a      	adds	r3, #26
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff f83f 	bl	800aa6c <ld_word>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	d109      	bne.n	800ba0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	3314      	adds	r3, #20
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff f834 	bl	800aa6c <ld_word>
 800ba04:	4603      	mov	r3, r0
 800ba06:	041b      	lsls	r3, r3, #16
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	331a      	adds	r3, #26
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	b292      	uxth	r2, r2
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff f857 	bl	800aae2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d109      	bne.n	800ba50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f103 0214 	add.w	r2, r3, #20
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	0c1b      	lsrs	r3, r3, #16
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f7ff f849 	bl	800aae2 <st_word>
	}
}
 800ba50:	bf00      	nop
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ba58:	b590      	push	{r4, r7, lr}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	331a      	adds	r3, #26
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff f800 	bl	800aa6c <ld_word>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <cmp_lfn+0x1e>
 800ba72:	2300      	movs	r3, #0
 800ba74:	e059      	b.n	800bb2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba7e:	1e5a      	subs	r2, r3, #1
 800ba80:	4613      	mov	r3, r2
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	81fb      	strh	r3, [r7, #14]
 800ba90:	2300      	movs	r3, #0
 800ba92:	613b      	str	r3, [r7, #16]
 800ba94:	e033      	b.n	800bafe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ba96:	4a27      	ldr	r2, [pc, #156]	; (800bb34 <cmp_lfn+0xdc>)
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	4413      	add	r3, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe ffe1 	bl	800aa6c <ld_word>
 800baaa:	4603      	mov	r3, r0
 800baac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800baae:	89fb      	ldrh	r3, [r7, #14]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01a      	beq.n	800baea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	2bfe      	cmp	r3, #254	; 0xfe
 800bab8:	d812      	bhi.n	800bae0 <cmp_lfn+0x88>
 800baba:	89bb      	ldrh	r3, [r7, #12]
 800babc:	4618      	mov	r0, r3
 800babe:	f001 ffc7 	bl	800da50 <ff_wtoupper>
 800bac2:	4603      	mov	r3, r0
 800bac4:	461c      	mov	r4, r3
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	617a      	str	r2, [r7, #20]
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	4618      	mov	r0, r3
 800bad6:	f001 ffbb 	bl	800da50 <ff_wtoupper>
 800bada:	4603      	mov	r3, r0
 800badc:	429c      	cmp	r4, r3
 800bade:	d001      	beq.n	800bae4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bae0:	2300      	movs	r3, #0
 800bae2:	e022      	b.n	800bb2a <cmp_lfn+0xd2>
			}
			wc = uc;
 800bae4:	89bb      	ldrh	r3, [r7, #12]
 800bae6:	81fb      	strh	r3, [r7, #14]
 800bae8:	e006      	b.n	800baf8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800baea:	89bb      	ldrh	r3, [r7, #12]
 800baec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d001      	beq.n	800baf8 <cmp_lfn+0xa0>
 800baf4:	2300      	movs	r3, #0
 800baf6:	e018      	b.n	800bb2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	3301      	adds	r3, #1
 800bafc:	613b      	str	r3, [r7, #16]
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2b0c      	cmp	r3, #12
 800bb02:	d9c8      	bls.n	800ba96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <cmp_lfn+0xd0>
 800bb10:	89fb      	ldrh	r3, [r7, #14]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d008      	beq.n	800bb28 <cmp_lfn+0xd0>
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <cmp_lfn+0xd0>
 800bb24:	2300      	movs	r3, #0
 800bb26:	e000      	b.n	800bb2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bb28:	2301      	movs	r3, #1
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd90      	pop	{r4, r7, pc}
 800bb32:	bf00      	nop
 800bb34:	08010530 	.word	0x08010530

0800bb38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4611      	mov	r1, r2
 800bb44:	461a      	mov	r2, r3
 800bb46:	460b      	mov	r3, r1
 800bb48:	71fb      	strb	r3, [r7, #7]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	330d      	adds	r3, #13
 800bb52:	79ba      	ldrb	r2, [r7, #6]
 800bb54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	330b      	adds	r3, #11
 800bb5a:	220f      	movs	r2, #15
 800bb5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	330c      	adds	r3, #12
 800bb62:	2200      	movs	r2, #0
 800bb64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	331a      	adds	r3, #26
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fe ffb8 	bl	800aae2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	1e5a      	subs	r2, r3, #1
 800bb76:	4613      	mov	r3, r2
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	4413      	add	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	82fb      	strh	r3, [r7, #22]
 800bb86:	2300      	movs	r3, #0
 800bb88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bb8a:	8afb      	ldrh	r3, [r7, #22]
 800bb8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d007      	beq.n	800bba4 <put_lfn+0x6c>
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	61fa      	str	r2, [r7, #28]
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	4413      	add	r3, r2
 800bba0:	881b      	ldrh	r3, [r3, #0]
 800bba2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bba4:	4a17      	ldr	r2, [pc, #92]	; (800bc04 <put_lfn+0xcc>)
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	4413      	add	r3, r2
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	8afa      	ldrh	r2, [r7, #22]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe ff93 	bl	800aae2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bbbc:	8afb      	ldrh	r3, [r7, #22]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <put_lfn+0x90>
 800bbc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	61bb      	str	r3, [r7, #24]
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b0c      	cmp	r3, #12
 800bbd2:	d9da      	bls.n	800bb8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bbd4:	8afb      	ldrh	r3, [r7, #22]
 800bbd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d006      	beq.n	800bbec <put_lfn+0xb4>
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	005b      	lsls	r3, r3, #1
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d103      	bne.n	800bbf4 <put_lfn+0xbc>
 800bbec:	79fb      	ldrb	r3, [r7, #7]
 800bbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	79fa      	ldrb	r2, [r7, #7]
 800bbf8:	701a      	strb	r2, [r3, #0]
}
 800bbfa:	bf00      	nop
 800bbfc:	3720      	adds	r7, #32
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	08010530 	.word	0x08010530

0800bc08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08c      	sub	sp, #48	; 0x30
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bc16:	220b      	movs	r2, #11
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7fe ffa8 	bl	800ab70 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b05      	cmp	r3, #5
 800bc24:	d92b      	bls.n	800bc7e <gen_numname+0x76>
		sr = seq;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bc2a:	e022      	b.n	800bc72 <gen_numname+0x6a>
			wc = *lfn++;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1c9a      	adds	r2, r3, #2
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	881b      	ldrh	r3, [r3, #0]
 800bc34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bc36:	2300      	movs	r3, #0
 800bc38:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc3a:	e017      	b.n	800bc6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	005a      	lsls	r2, r3, #1
 800bc40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	4413      	add	r3, r2
 800bc48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bc4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc4c:	085b      	lsrs	r3, r3, #1
 800bc4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d005      	beq.n	800bc66 <gen_numname+0x5e>
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bc60:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bc64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	3301      	adds	r3, #1
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	2b0f      	cmp	r3, #15
 800bc70:	d9e4      	bls.n	800bc3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1d8      	bne.n	800bc2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bc7e:	2307      	movs	r3, #7
 800bc80:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	f003 030f 	and.w	r3, r3, #15
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	3330      	adds	r3, #48	; 0x30
 800bc8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bc92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc96:	2b39      	cmp	r3, #57	; 0x39
 800bc98:	d904      	bls.n	800bca4 <gen_numname+0x9c>
 800bc9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc9e:	3307      	adds	r3, #7
 800bca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	1e5a      	subs	r2, r3, #1
 800bca8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bcaa:	3330      	adds	r3, #48	; 0x30
 800bcac:	443b      	add	r3, r7
 800bcae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bcb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	091b      	lsrs	r3, r3, #4
 800bcba:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1df      	bne.n	800bc82 <gen_numname+0x7a>
	ns[i] = '~';
 800bcc2:	f107 0214 	add.w	r2, r7, #20
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	4413      	add	r3, r2
 800bcca:	227e      	movs	r2, #126	; 0x7e
 800bccc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bcce:	2300      	movs	r3, #0
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd2:	e002      	b.n	800bcda <gen_numname+0xd2>
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d205      	bcs.n	800bcee <gen_numname+0xe6>
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	4413      	add	r3, r2
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b20      	cmp	r3, #32
 800bcec:	d1f2      	bne.n	800bcd4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	2b07      	cmp	r3, #7
 800bcf2:	d807      	bhi.n	800bd04 <gen_numname+0xfc>
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bcfa:	3330      	adds	r3, #48	; 0x30
 800bcfc:	443b      	add	r3, r7
 800bcfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bd02:	e000      	b.n	800bd06 <gen_numname+0xfe>
 800bd04:	2120      	movs	r1, #32
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	627a      	str	r2, [r7, #36]	; 0x24
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	4413      	add	r3, r2
 800bd10:	460a      	mov	r2, r1
 800bd12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	2b07      	cmp	r3, #7
 800bd18:	d9e9      	bls.n	800bcee <gen_numname+0xe6>
}
 800bd1a:	bf00      	nop
 800bd1c:	bf00      	nop
 800bd1e:	3730      	adds	r7, #48	; 0x30
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bd30:	230b      	movs	r3, #11
 800bd32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	0852      	lsrs	r2, r2, #1
 800bd3a:	01db      	lsls	r3, r3, #7
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	1c59      	adds	r1, r3, #1
 800bd44:	6079      	str	r1, [r7, #4]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	4413      	add	r3, r2
 800bd4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	60bb      	str	r3, [r7, #8]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1ed      	bne.n	800bd34 <sum_sfn+0x10>
	return sum;
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b086      	sub	sp, #24
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bd74:	2100      	movs	r1, #0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff fca8 	bl	800b6cc <dir_sdi>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d001      	beq.n	800bd8a <dir_find+0x24>
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	e0a9      	b.n	800bede <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd8a:	23ff      	movs	r3, #255	; 0xff
 800bd8c:	753b      	strb	r3, [r7, #20]
 800bd8e:	7d3b      	ldrb	r3, [r7, #20]
 800bd90:	757b      	strb	r3, [r7, #21]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f04f 32ff 	mov.w	r2, #4294967295
 800bd98:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	69db      	ldr	r3, [r3, #28]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6938      	ldr	r0, [r7, #16]
 800bda2:	f7ff f913 	bl	800afcc <move_window>
 800bda6:	4603      	mov	r3, r0
 800bda8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f040 8090 	bne.w	800bed2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bdba:	7dbb      	ldrb	r3, [r7, #22]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d102      	bne.n	800bdc6 <dir_find+0x60>
 800bdc0:	2304      	movs	r3, #4
 800bdc2:	75fb      	strb	r3, [r7, #23]
 800bdc4:	e08a      	b.n	800bedc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	330b      	adds	r3, #11
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdd2:	73fb      	strb	r3, [r7, #15]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	7bfa      	ldrb	r2, [r7, #15]
 800bdd8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bdda:	7dbb      	ldrb	r3, [r7, #22]
 800bddc:	2be5      	cmp	r3, #229	; 0xe5
 800bdde:	d007      	beq.n	800bdf0 <dir_find+0x8a>
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	f003 0308 	and.w	r3, r3, #8
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d009      	beq.n	800bdfe <dir_find+0x98>
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	2b0f      	cmp	r3, #15
 800bdee:	d006      	beq.n	800bdfe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bdf0:	23ff      	movs	r3, #255	; 0xff
 800bdf2:	757b      	strb	r3, [r7, #21]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
 800bdfc:	e05e      	b.n	800bebc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	2b0f      	cmp	r3, #15
 800be02:	d136      	bne.n	800be72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800be0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d154      	bne.n	800bebc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800be12:	7dbb      	ldrb	r3, [r7, #22]
 800be14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00d      	beq.n	800be38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a1b      	ldr	r3, [r3, #32]
 800be20:	7b5b      	ldrb	r3, [r3, #13]
 800be22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800be24:	7dbb      	ldrb	r3, [r7, #22]
 800be26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be2a:	75bb      	strb	r3, [r7, #22]
 800be2c:	7dbb      	ldrb	r3, [r7, #22]
 800be2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	695a      	ldr	r2, [r3, #20]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800be38:	7dba      	ldrb	r2, [r7, #22]
 800be3a:	7d7b      	ldrb	r3, [r7, #21]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d115      	bne.n	800be6c <dir_find+0x106>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	330d      	adds	r3, #13
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	7d3a      	ldrb	r2, [r7, #20]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d10e      	bne.n	800be6c <dir_find+0x106>
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	68da      	ldr	r2, [r3, #12]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7ff fdfd 	bl	800ba58 <cmp_lfn>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <dir_find+0x106>
 800be64:	7d7b      	ldrb	r3, [r7, #21]
 800be66:	3b01      	subs	r3, #1
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	e000      	b.n	800be6e <dir_find+0x108>
 800be6c:	23ff      	movs	r3, #255	; 0xff
 800be6e:	757b      	strb	r3, [r7, #21]
 800be70:	e024      	b.n	800bebc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800be72:	7d7b      	ldrb	r3, [r7, #21]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d109      	bne.n	800be8c <dir_find+0x126>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a1b      	ldr	r3, [r3, #32]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff ff51 	bl	800bd24 <sum_sfn>
 800be82:	4603      	mov	r3, r0
 800be84:	461a      	mov	r2, r3
 800be86:	7d3b      	ldrb	r3, [r7, #20]
 800be88:	4293      	cmp	r3, r2
 800be8a:	d024      	beq.n	800bed6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10a      	bne.n	800beb0 <dir_find+0x14a>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a18      	ldr	r0, [r3, #32]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	3324      	adds	r3, #36	; 0x24
 800bea2:	220b      	movs	r2, #11
 800bea4:	4619      	mov	r1, r3
 800bea6:	f7fe fe9f 	bl	800abe8 <mem_cmp>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d014      	beq.n	800beda <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800beb0:	23ff      	movs	r3, #255	; 0xff
 800beb2:	757b      	strb	r3, [r7, #21]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bebc:	2100      	movs	r1, #0
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fc7f 	bl	800b7c2 <dir_next>
 800bec4:	4603      	mov	r3, r0
 800bec6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f43f af65 	beq.w	800bd9a <dir_find+0x34>
 800bed0:	e004      	b.n	800bedc <dir_find+0x176>
		if (res != FR_OK) break;
 800bed2:	bf00      	nop
 800bed4:	e002      	b.n	800bedc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bed6:	bf00      	nop
 800bed8:	e000      	b.n	800bedc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800beda:	bf00      	nop

	return res;
 800bedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08c      	sub	sp, #48	; 0x30
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800befc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <dir_register+0x20>
 800bf04:	2306      	movs	r3, #6
 800bf06:	e0e0      	b.n	800c0ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bf08:	2300      	movs	r3, #0
 800bf0a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf0c:	e002      	b.n	800bf14 <dir_register+0x2c>
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	3301      	adds	r3, #1
 800bf12:	627b      	str	r3, [r7, #36]	; 0x24
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	68da      	ldr	r2, [r3, #12]
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	005b      	lsls	r3, r3, #1
 800bf1c:	4413      	add	r3, r2
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1f4      	bne.n	800bf0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bf2a:	f107 030c 	add.w	r3, r7, #12
 800bf2e:	220c      	movs	r2, #12
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fe fe1d 	bl	800ab70 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d032      	beq.n	800bfa6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2240      	movs	r2, #64	; 0x40
 800bf44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bf48:	2301      	movs	r3, #1
 800bf4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf4c:	e016      	b.n	800bf7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	f107 010c 	add.w	r1, r7, #12
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	f7ff fe53 	bl	800bc08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7ff feff 	bl	800bd66 <dir_find>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bf6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	3301      	adds	r3, #1
 800bf7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7e:	2b63      	cmp	r3, #99	; 0x63
 800bf80:	d9e5      	bls.n	800bf4e <dir_register+0x66>
 800bf82:	e000      	b.n	800bf86 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bf84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf88:	2b64      	cmp	r3, #100	; 0x64
 800bf8a:	d101      	bne.n	800bf90 <dir_register+0xa8>
 800bf8c:	2307      	movs	r3, #7
 800bf8e:	e09c      	b.n	800c0ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bf90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf94:	2b04      	cmp	r3, #4
 800bf96:	d002      	beq.n	800bf9e <dir_register+0xb6>
 800bf98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf9c:	e095      	b.n	800c0ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bf9e:	7dfa      	ldrb	r2, [r7, #23]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	f003 0302 	and.w	r3, r3, #2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <dir_register+0xd8>
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	330c      	adds	r3, #12
 800bfb4:	4a47      	ldr	r2, [pc, #284]	; (800c0d4 <dir_register+0x1ec>)
 800bfb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfba:	089b      	lsrs	r3, r3, #2
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	e000      	b.n	800bfc2 <dir_register+0xda>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bfc4:	6a39      	ldr	r1, [r7, #32]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff fcc0 	bl	800b94c <dir_alloc>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bfd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d148      	bne.n	800c06c <dir_register+0x184>
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	623b      	str	r3, [r7, #32]
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d042      	beq.n	800c06c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	695a      	ldr	r2, [r3, #20]
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	015b      	lsls	r3, r3, #5
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff fb6a 	bl	800b6cc <dir_sdi>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c002:	2b00      	cmp	r3, #0
 800c004:	d132      	bne.n	800c06c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3324      	adds	r3, #36	; 0x24
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff fe8a 	bl	800bd24 <sum_sfn>
 800c010:	4603      	mov	r3, r0
 800c012:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	69db      	ldr	r3, [r3, #28]
 800c018:	4619      	mov	r1, r3
 800c01a:	69f8      	ldr	r0, [r7, #28]
 800c01c:	f7fe ffd6 	bl	800afcc <move_window>
 800c020:	4603      	mov	r3, r0
 800c022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d11d      	bne.n	800c06a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	68d8      	ldr	r0, [r3, #12]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a19      	ldr	r1, [r3, #32]
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	7efb      	ldrb	r3, [r7, #27]
 800c03c:	f7ff fd7c 	bl	800bb38 <put_lfn>
				fs->wflag = 1;
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	2201      	movs	r2, #1
 800c044:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c046:	2100      	movs	r1, #0
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff fbba 	bl	800b7c2 <dir_next>
 800c04e:	4603      	mov	r3, r0
 800c050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d107      	bne.n	800c06c <dir_register+0x184>
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	3b01      	subs	r3, #1
 800c060:	623b      	str	r3, [r7, #32]
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1d5      	bne.n	800c014 <dir_register+0x12c>
 800c068:	e000      	b.n	800c06c <dir_register+0x184>
				if (res != FR_OK) break;
 800c06a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c06c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c070:	2b00      	cmp	r3, #0
 800c072:	d128      	bne.n	800c0c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	4619      	mov	r1, r3
 800c07a:	69f8      	ldr	r0, [r7, #28]
 800c07c:	f7fe ffa6 	bl	800afcc <move_window>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d11b      	bne.n	800c0c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	2220      	movs	r2, #32
 800c094:	2100      	movs	r1, #0
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fd8b 	bl	800abb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a18      	ldr	r0, [r3, #32]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	3324      	adds	r3, #36	; 0x24
 800c0a4:	220b      	movs	r2, #11
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	f7fe fd62 	bl	800ab70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	330c      	adds	r3, #12
 800c0b8:	f002 0218 	and.w	r2, r2, #24
 800c0bc:	b2d2      	uxtb	r2, r2
 800c0be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3730      	adds	r7, #48	; 0x30
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	4ec4ec4f 	.word	0x4ec4ec4f

0800c0d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08a      	sub	sp, #40	; 0x28
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	613b      	str	r3, [r7, #16]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	617b      	str	r3, [r7, #20]
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	61ba      	str	r2, [r7, #24]
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	4413      	add	r3, r2
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c108:	2b1f      	cmp	r3, #31
 800c10a:	d940      	bls.n	800c18e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c10e:	2b2f      	cmp	r3, #47	; 0x2f
 800c110:	d006      	beq.n	800c120 <create_name+0x48>
 800c112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c114:	2b5c      	cmp	r3, #92	; 0x5c
 800c116:	d110      	bne.n	800c13a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c118:	e002      	b.n	800c120 <create_name+0x48>
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	3301      	adds	r3, #1
 800c11e:	61bb      	str	r3, [r7, #24]
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	4413      	add	r3, r2
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b2f      	cmp	r3, #47	; 0x2f
 800c12a:	d0f6      	beq.n	800c11a <create_name+0x42>
 800c12c:	693a      	ldr	r2, [r7, #16]
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	4413      	add	r3, r2
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	2b5c      	cmp	r3, #92	; 0x5c
 800c136:	d0f0      	beq.n	800c11a <create_name+0x42>
			break;
 800c138:	e02a      	b.n	800c190 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2bfe      	cmp	r3, #254	; 0xfe
 800c13e:	d901      	bls.n	800c144 <create_name+0x6c>
 800c140:	2306      	movs	r3, #6
 800c142:	e17d      	b.n	800c440 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c146:	b2db      	uxtb	r3, r3
 800c148:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c14a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c14c:	2101      	movs	r1, #1
 800c14e:	4618      	mov	r0, r3
 800c150:	f001 fc42 	bl	800d9d8 <ff_convert>
 800c154:	4603      	mov	r3, r0
 800c156:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <create_name+0x8a>
 800c15e:	2306      	movs	r3, #6
 800c160:	e16e      	b.n	800c440 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c164:	2b7f      	cmp	r3, #127	; 0x7f
 800c166:	d809      	bhi.n	800c17c <create_name+0xa4>
 800c168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c16a:	4619      	mov	r1, r3
 800c16c:	488d      	ldr	r0, [pc, #564]	; (800c3a4 <create_name+0x2cc>)
 800c16e:	f7fe fd62 	bl	800ac36 <chk_chr>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <create_name+0xa4>
 800c178:	2306      	movs	r3, #6
 800c17a:	e161      	b.n	800c440 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	617a      	str	r2, [r7, #20]
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	4413      	add	r3, r2
 800c188:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c18a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c18c:	e7b4      	b.n	800c0f8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c18e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	441a      	add	r2, r3
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c19a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c19c:	2b1f      	cmp	r3, #31
 800c19e:	d801      	bhi.n	800c1a4 <create_name+0xcc>
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	e000      	b.n	800c1a6 <create_name+0xce>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c1aa:	e011      	b.n	800c1d0 <create_name+0xf8>
		w = lfn[di - 1];
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1c0:	2b20      	cmp	r3, #32
 800c1c2:	d002      	beq.n	800c1ca <create_name+0xf2>
 800c1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c1c8:	d106      	bne.n	800c1d8 <create_name+0x100>
		di--;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1ea      	bne.n	800c1ac <create_name+0xd4>
 800c1d6:	e000      	b.n	800c1da <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c1d8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <create_name+0x118>
 800c1ec:	2306      	movs	r3, #6
 800c1ee:	e127      	b.n	800c440 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3324      	adds	r3, #36	; 0x24
 800c1f4:	220b      	movs	r2, #11
 800c1f6:	2120      	movs	r1, #32
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe fcda 	bl	800abb2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c1fe:	2300      	movs	r3, #0
 800c200:	61bb      	str	r3, [r7, #24]
 800c202:	e002      	b.n	800c20a <create_name+0x132>
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	3301      	adds	r3, #1
 800c208:	61bb      	str	r3, [r7, #24]
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4413      	add	r3, r2
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	2b20      	cmp	r3, #32
 800c216:	d0f5      	beq.n	800c204 <create_name+0x12c>
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4413      	add	r3, r2
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	2b2e      	cmp	r3, #46	; 0x2e
 800c224:	d0ee      	beq.n	800c204 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d009      	beq.n	800c240 <create_name+0x168>
 800c22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c230:	f043 0303 	orr.w	r3, r3, #3
 800c234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c238:	e002      	b.n	800c240 <create_name+0x168>
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d009      	beq.n	800c25a <create_name+0x182>
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c24c:	3b01      	subs	r3, #1
 800c24e:	005b      	lsls	r3, r3, #1
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	4413      	add	r3, r2
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	2b2e      	cmp	r3, #46	; 0x2e
 800c258:	d1ef      	bne.n	800c23a <create_name+0x162>

	i = b = 0; ni = 8;
 800c25a:	2300      	movs	r3, #0
 800c25c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c260:	2300      	movs	r3, #0
 800c262:	623b      	str	r3, [r7, #32]
 800c264:	2308      	movs	r3, #8
 800c266:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	61ba      	str	r2, [r7, #24]
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	4413      	add	r3, r2
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f000 8090 	beq.w	800c3a0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c282:	2b20      	cmp	r3, #32
 800c284:	d006      	beq.n	800c294 <create_name+0x1bc>
 800c286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c288:	2b2e      	cmp	r3, #46	; 0x2e
 800c28a:	d10a      	bne.n	800c2a2 <create_name+0x1ca>
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	429a      	cmp	r2, r3
 800c292:	d006      	beq.n	800c2a2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c298:	f043 0303 	orr.w	r3, r3, #3
 800c29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2a0:	e07d      	b.n	800c39e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c2a2:	6a3a      	ldr	r2, [r7, #32]
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d203      	bcs.n	800c2b2 <create_name+0x1da>
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d123      	bne.n	800c2fa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	2b0b      	cmp	r3, #11
 800c2b6:	d106      	bne.n	800c2c6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2bc:	f043 0303 	orr.w	r3, r3, #3
 800c2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2c4:	e075      	b.n	800c3b2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c2c6:	69ba      	ldr	r2, [r7, #24]
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d005      	beq.n	800c2da <create_name+0x202>
 800c2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2d2:	f043 0303 	orr.w	r3, r3, #3
 800c2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d866      	bhi.n	800c3b0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	61bb      	str	r3, [r7, #24]
 800c2e6:	2308      	movs	r3, #8
 800c2e8:	623b      	str	r3, [r7, #32]
 800c2ea:	230b      	movs	r3, #11
 800c2ec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c2ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2f8:	e051      	b.n	800c39e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c2fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c2fe:	d914      	bls.n	800c32a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c302:	2100      	movs	r1, #0
 800c304:	4618      	mov	r0, r3
 800c306:	f001 fb67 	bl	800d9d8 <ff_convert>
 800c30a:	4603      	mov	r3, r0
 800c30c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c310:	2b00      	cmp	r3, #0
 800c312:	d004      	beq.n	800c31e <create_name+0x246>
 800c314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c316:	3b80      	subs	r3, #128	; 0x80
 800c318:	4a23      	ldr	r2, [pc, #140]	; (800c3a8 <create_name+0x2d0>)
 800c31a:	5cd3      	ldrb	r3, [r2, r3]
 800c31c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c31e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c322:	f043 0302 	orr.w	r3, r3, #2
 800c326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c32a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d007      	beq.n	800c340 <create_name+0x268>
 800c330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c332:	4619      	mov	r1, r3
 800c334:	481d      	ldr	r0, [pc, #116]	; (800c3ac <create_name+0x2d4>)
 800c336:	f7fe fc7e 	bl	800ac36 <chk_chr>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d008      	beq.n	800c352 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c340:	235f      	movs	r3, #95	; 0x5f
 800c342:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c348:	f043 0303 	orr.w	r3, r3, #3
 800c34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c350:	e01b      	b.n	800c38a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c354:	2b40      	cmp	r3, #64	; 0x40
 800c356:	d909      	bls.n	800c36c <create_name+0x294>
 800c358:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c35a:	2b5a      	cmp	r3, #90	; 0x5a
 800c35c:	d806      	bhi.n	800c36c <create_name+0x294>
					b |= 2;
 800c35e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c362:	f043 0302 	orr.w	r3, r3, #2
 800c366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c36a:	e00e      	b.n	800c38a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c36c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c36e:	2b60      	cmp	r3, #96	; 0x60
 800c370:	d90b      	bls.n	800c38a <create_name+0x2b2>
 800c372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c374:	2b7a      	cmp	r3, #122	; 0x7a
 800c376:	d808      	bhi.n	800c38a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c37c:	f043 0301 	orr.w	r3, r3, #1
 800c380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c386:	3b20      	subs	r3, #32
 800c388:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	623a      	str	r2, [r7, #32]
 800c390:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c392:	b2d1      	uxtb	r1, r2
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	4413      	add	r3, r2
 800c398:	460a      	mov	r2, r1
 800c39a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c39e:	e763      	b.n	800c268 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c3a0:	bf00      	nop
 800c3a2:	e006      	b.n	800c3b2 <create_name+0x2da>
 800c3a4:	0801043c 	.word	0x0801043c
 800c3a8:	080104b0 	.word	0x080104b0
 800c3ac:	08010448 	.word	0x08010448
			if (si > di) break;			/* No extension */
 800c3b0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c3b8:	2be5      	cmp	r3, #229	; 0xe5
 800c3ba:	d103      	bne.n	800c3c4 <create_name+0x2ec>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2205      	movs	r2, #5
 800c3c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	2b08      	cmp	r3, #8
 800c3c8:	d104      	bne.n	800c3d4 <create_name+0x2fc>
 800c3ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c3d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3d8:	f003 030c 	and.w	r3, r3, #12
 800c3dc:	2b0c      	cmp	r3, #12
 800c3de:	d005      	beq.n	800c3ec <create_name+0x314>
 800c3e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3e4:	f003 0303 	and.w	r3, r3, #3
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d105      	bne.n	800c3f8 <create_name+0x320>
 800c3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f0:	f043 0302 	orr.w	r3, r3, #2
 800c3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d117      	bne.n	800c434 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c408:	f003 0303 	and.w	r3, r3, #3
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d105      	bne.n	800c41c <create_name+0x344>
 800c410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c414:	f043 0310 	orr.w	r3, r3, #16
 800c418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c41c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c420:	f003 030c 	and.w	r3, r3, #12
 800c424:	2b04      	cmp	r3, #4
 800c426:	d105      	bne.n	800c434 <create_name+0x35c>
 800c428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c42c:	f043 0308 	orr.w	r3, r3, #8
 800c430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c43a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c43e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c440:	4618      	mov	r0, r3
 800c442:	3728      	adds	r7, #40	; 0x28
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c45c:	e002      	b.n	800c464 <follow_path+0x1c>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b2f      	cmp	r3, #47	; 0x2f
 800c46a:	d0f8      	beq.n	800c45e <follow_path+0x16>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b5c      	cmp	r3, #92	; 0x5c
 800c472:	d0f4      	beq.n	800c45e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	2200      	movs	r2, #0
 800c478:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b1f      	cmp	r3, #31
 800c480:	d80a      	bhi.n	800c498 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2280      	movs	r2, #128	; 0x80
 800c486:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c48a:	2100      	movs	r1, #0
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff f91d 	bl	800b6cc <dir_sdi>
 800c492:	4603      	mov	r3, r0
 800c494:	75fb      	strb	r3, [r7, #23]
 800c496:	e043      	b.n	800c520 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c498:	463b      	mov	r3, r7
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff fe1b 	bl	800c0d8 <create_name>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d134      	bne.n	800c516 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7ff fc5a 	bl	800bd66 <dir_find>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00a      	beq.n	800c4da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	d127      	bne.n	800c51a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c4ca:	7afb      	ldrb	r3, [r7, #11]
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d122      	bne.n	800c51a <follow_path+0xd2>
 800c4d4:	2305      	movs	r3, #5
 800c4d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c4d8:	e01f      	b.n	800c51a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c4da:	7afb      	ldrb	r3, [r7, #11]
 800c4dc:	f003 0304 	and.w	r3, r3, #4
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d11c      	bne.n	800c51e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	799b      	ldrb	r3, [r3, #6]
 800c4e8:	f003 0310 	and.w	r3, r3, #16
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c4f0:	2305      	movs	r3, #5
 800c4f2:	75fb      	strb	r3, [r7, #23]
 800c4f4:	e014      	b.n	800c520 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	695b      	ldr	r3, [r3, #20]
 800c500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c504:	4413      	add	r3, r2
 800c506:	4619      	mov	r1, r3
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7ff fa66 	bl	800b9da <ld_clust>
 800c50e:	4602      	mov	r2, r0
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c514:	e7c0      	b.n	800c498 <follow_path+0x50>
			if (res != FR_OK) break;
 800c516:	bf00      	nop
 800c518:	e002      	b.n	800c520 <follow_path+0xd8>
				break;
 800c51a:	bf00      	nop
 800c51c:	e000      	b.n	800c520 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c51e:	bf00      	nop
			}
		}
	}

	return res;
 800c520:	7dfb      	ldrb	r3, [r7, #23]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b087      	sub	sp, #28
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c532:	f04f 33ff 	mov.w	r3, #4294967295
 800c536:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d031      	beq.n	800c5a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	e002      	b.n	800c54e <get_ldnumber+0x24>
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	3301      	adds	r3, #1
 800c54c:	617b      	str	r3, [r7, #20]
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b1f      	cmp	r3, #31
 800c554:	d903      	bls.n	800c55e <get_ldnumber+0x34>
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b3a      	cmp	r3, #58	; 0x3a
 800c55c:	d1f4      	bne.n	800c548 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b3a      	cmp	r3, #58	; 0x3a
 800c564:	d11c      	bne.n	800c5a0 <get_ldnumber+0x76>
			tp = *path;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	60fa      	str	r2, [r7, #12]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	3b30      	subs	r3, #48	; 0x30
 800c576:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2b09      	cmp	r3, #9
 800c57c:	d80e      	bhi.n	800c59c <get_ldnumber+0x72>
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	429a      	cmp	r2, r3
 800c584:	d10a      	bne.n	800c59c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d107      	bne.n	800c59c <get_ldnumber+0x72>
					vol = (int)i;
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	3301      	adds	r3, #1
 800c594:	617b      	str	r3, [r7, #20]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	e002      	b.n	800c5a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c5a4:	693b      	ldr	r3, [r7, #16]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	371c      	adds	r7, #28
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
	...

0800c5b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	70da      	strb	r2, [r3, #3]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7fe fcfc 	bl	800afcc <move_window>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <check_fs+0x2a>
 800c5da:	2304      	movs	r3, #4
 800c5dc:	e038      	b.n	800c650 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3334      	adds	r3, #52	; 0x34
 800c5e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe fa40 	bl	800aa6c <ld_word>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d001      	beq.n	800c5fc <check_fs+0x48>
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e029      	b.n	800c650 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c602:	2be9      	cmp	r3, #233	; 0xe9
 800c604:	d009      	beq.n	800c61a <check_fs+0x66>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c60c:	2beb      	cmp	r3, #235	; 0xeb
 800c60e:	d11e      	bne.n	800c64e <check_fs+0x9a>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c616:	2b90      	cmp	r3, #144	; 0x90
 800c618:	d119      	bne.n	800c64e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	3334      	adds	r3, #52	; 0x34
 800c61e:	3336      	adds	r3, #54	; 0x36
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe fa3b 	bl	800aa9c <ld_dword>
 800c626:	4603      	mov	r3, r0
 800c628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c62c:	4a0a      	ldr	r2, [pc, #40]	; (800c658 <check_fs+0xa4>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d101      	bne.n	800c636 <check_fs+0x82>
 800c632:	2300      	movs	r3, #0
 800c634:	e00c      	b.n	800c650 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3334      	adds	r3, #52	; 0x34
 800c63a:	3352      	adds	r3, #82	; 0x52
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fa2d 	bl	800aa9c <ld_dword>
 800c642:	4603      	mov	r3, r0
 800c644:	4a05      	ldr	r2, [pc, #20]	; (800c65c <check_fs+0xa8>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d101      	bne.n	800c64e <check_fs+0x9a>
 800c64a:	2300      	movs	r3, #0
 800c64c:	e000      	b.n	800c650 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c64e:	2302      	movs	r3, #2
}
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	00544146 	.word	0x00544146
 800c65c:	33544146 	.word	0x33544146

0800c660 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b096      	sub	sp, #88	; 0x58
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	4613      	mov	r3, r2
 800c66c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2200      	movs	r2, #0
 800c672:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f7ff ff58 	bl	800c52a <get_ldnumber>
 800c67a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	da01      	bge.n	800c686 <find_volume+0x26>
 800c682:	230b      	movs	r3, #11
 800c684:	e230      	b.n	800cae8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c686:	4aa1      	ldr	r2, [pc, #644]	; (800c90c <find_volume+0x2ac>)
 800c688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c68e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <find_volume+0x3a>
 800c696:	230c      	movs	r3, #12
 800c698:	e226      	b.n	800cae8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	f023 0301 	bic.w	r3, r3, #1
 800c6a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d01a      	beq.n	800c6e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b2:	785b      	ldrb	r3, [r3, #1]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fe f93b 	bl	800a930 <disk_status>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10c      	bne.n	800c6e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c6cc:	79fb      	ldrb	r3, [r7, #7]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d007      	beq.n	800c6e2 <find_volume+0x82>
 800c6d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6d6:	f003 0304 	and.w	r3, r3, #4
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c6de:	230a      	movs	r3, #10
 800c6e0:	e202      	b.n	800cae8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	e200      	b.n	800cae8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe f933 	bl	800a964 <disk_initialize>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d001      	beq.n	800c714 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c710:	2303      	movs	r3, #3
 800c712:	e1e9      	b.n	800cae8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d007      	beq.n	800c72a <find_volume+0xca>
 800c71a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c71e:	f003 0304 	and.w	r3, r3, #4
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c726:	230a      	movs	r3, #10
 800c728:	e1de      	b.n	800cae8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c72e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c732:	f7ff ff3f 	bl	800c5b4 <check_fs>
 800c736:	4603      	mov	r3, r0
 800c738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c73c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c740:	2b02      	cmp	r3, #2
 800c742:	d149      	bne.n	800c7d8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c744:	2300      	movs	r3, #0
 800c746:	643b      	str	r3, [r7, #64]	; 0x40
 800c748:	e01e      	b.n	800c788 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c752:	011b      	lsls	r3, r3, #4
 800c754:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c758:	4413      	add	r3, r2
 800c75a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	3304      	adds	r3, #4
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d006      	beq.n	800c774 <find_volume+0x114>
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	3308      	adds	r3, #8
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7fe f996 	bl	800aa9c <ld_dword>
 800c770:	4602      	mov	r2, r0
 800c772:	e000      	b.n	800c776 <find_volume+0x116>
 800c774:	2200      	movs	r2, #0
 800c776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	3358      	adds	r3, #88	; 0x58
 800c77c:	443b      	add	r3, r7
 800c77e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c784:	3301      	adds	r3, #1
 800c786:	643b      	str	r3, [r7, #64]	; 0x40
 800c788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d9dd      	bls.n	800c74a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c78e:	2300      	movs	r3, #0
 800c790:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <find_volume+0x13e>
 800c798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c79a:	3b01      	subs	r3, #1
 800c79c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	3358      	adds	r3, #88	; 0x58
 800c7a4:	443b      	add	r3, r7
 800c7a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c7aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d005      	beq.n	800c7be <find_volume+0x15e>
 800c7b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7b6:	f7ff fefd 	bl	800c5b4 <check_fs>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	e000      	b.n	800c7c0 <find_volume+0x160>
 800c7be:	2303      	movs	r3, #3
 800c7c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c7c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d905      	bls.n	800c7d8 <find_volume+0x178>
 800c7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	643b      	str	r3, [r7, #64]	; 0x40
 800c7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d9e2      	bls.n	800c79e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c7d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7dc:	2b04      	cmp	r3, #4
 800c7de:	d101      	bne.n	800c7e4 <find_volume+0x184>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e181      	b.n	800cae8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d901      	bls.n	800c7f0 <find_volume+0x190>
 800c7ec:	230d      	movs	r3, #13
 800c7ee:	e17b      	b.n	800cae8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	3334      	adds	r3, #52	; 0x34
 800c7f4:	330b      	adds	r3, #11
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe f938 	bl	800aa6c <ld_word>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c802:	d001      	beq.n	800c808 <find_volume+0x1a8>
 800c804:	230d      	movs	r3, #13
 800c806:	e16f      	b.n	800cae8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	3334      	adds	r3, #52	; 0x34
 800c80c:	3316      	adds	r3, #22
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fe f92c 	bl	800aa6c <ld_word>
 800c814:	4603      	mov	r3, r0
 800c816:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d106      	bne.n	800c82c <find_volume+0x1cc>
 800c81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c820:	3334      	adds	r3, #52	; 0x34
 800c822:	3324      	adds	r3, #36	; 0x24
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe f939 	bl	800aa9c <ld_dword>
 800c82a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c830:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c834:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83e:	789b      	ldrb	r3, [r3, #2]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d005      	beq.n	800c850 <find_volume+0x1f0>
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	789b      	ldrb	r3, [r3, #2]
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d001      	beq.n	800c850 <find_volume+0x1f0>
 800c84c:	230d      	movs	r3, #13
 800c84e:	e14b      	b.n	800cae8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c852:	789b      	ldrb	r3, [r3, #2]
 800c854:	461a      	mov	r2, r3
 800c856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c858:	fb02 f303 	mul.w	r3, r2, r3
 800c85c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c864:	b29a      	uxth	r2, r3
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	895b      	ldrh	r3, [r3, #10]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d008      	beq.n	800c884 <find_volume+0x224>
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	461a      	mov	r2, r3
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	895b      	ldrh	r3, [r3, #10]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	4013      	ands	r3, r2
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <find_volume+0x228>
 800c884:	230d      	movs	r3, #13
 800c886:	e12f      	b.n	800cae8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	3334      	adds	r3, #52	; 0x34
 800c88c:	3311      	adds	r3, #17
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe f8ec 	bl	800aa6c <ld_word>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	891b      	ldrh	r3, [r3, #8]
 800c8a0:	f003 030f 	and.w	r3, r3, #15
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <find_volume+0x24e>
 800c8aa:	230d      	movs	r3, #13
 800c8ac:	e11c      	b.n	800cae8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	3334      	adds	r3, #52	; 0x34
 800c8b2:	3313      	adds	r3, #19
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fe f8d9 	bl	800aa6c <ld_word>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d106      	bne.n	800c8d2 <find_volume+0x272>
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	3334      	adds	r3, #52	; 0x34
 800c8c8:	3320      	adds	r3, #32
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fe f8e6 	bl	800aa9c <ld_dword>
 800c8d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	3334      	adds	r3, #52	; 0x34
 800c8d6:	330e      	adds	r3, #14
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fe f8c7 	bl	800aa6c <ld_word>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c8e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d101      	bne.n	800c8ec <find_volume+0x28c>
 800c8e8:	230d      	movs	r3, #13
 800c8ea:	e0fd      	b.n	800cae8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c8ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	4413      	add	r3, r2
 800c8f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8f4:	8912      	ldrh	r2, [r2, #8]
 800c8f6:	0912      	lsrs	r2, r2, #4
 800c8f8:	b292      	uxth	r2, r2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c8fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	429a      	cmp	r2, r3
 800c904:	d204      	bcs.n	800c910 <find_volume+0x2b0>
 800c906:	230d      	movs	r3, #13
 800c908:	e0ee      	b.n	800cae8 <find_volume+0x488>
 800c90a:	bf00      	nop
 800c90c:	200008ac 	.word	0x200008ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c918:	8952      	ldrh	r2, [r2, #10]
 800c91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c91e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <find_volume+0x2ca>
 800c926:	230d      	movs	r3, #13
 800c928:	e0de      	b.n	800cae8 <find_volume+0x488>
		fmt = FS_FAT32;
 800c92a:	2303      	movs	r3, #3
 800c92c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c936:	4293      	cmp	r3, r2
 800c938:	d802      	bhi.n	800c940 <find_volume+0x2e0>
 800c93a:	2302      	movs	r3, #2
 800c93c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c946:	4293      	cmp	r3, r2
 800c948:	d802      	bhi.n	800c950 <find_volume+0x2f0>
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	1c9a      	adds	r2, r3, #2
 800c954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c956:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c95c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c95e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c962:	441a      	add	r2, r3
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96c:	441a      	add	r2, r3
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c976:	2b03      	cmp	r3, #3
 800c978:	d11e      	bne.n	800c9b8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	3334      	adds	r3, #52	; 0x34
 800c97e:	332a      	adds	r3, #42	; 0x2a
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe f873 	bl	800aa6c <ld_word>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <find_volume+0x330>
 800c98c:	230d      	movs	r3, #13
 800c98e:	e0ab      	b.n	800cae8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	891b      	ldrh	r3, [r3, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <find_volume+0x33c>
 800c998:	230d      	movs	r3, #13
 800c99a:	e0a5      	b.n	800cae8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	3334      	adds	r3, #52	; 0x34
 800c9a0:	332c      	adds	r3, #44	; 0x2c
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe f87a 	bl	800aa9c <ld_dword>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800c9b6:	e01f      	b.n	800c9f8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	891b      	ldrh	r3, [r3, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <find_volume+0x364>
 800c9c0:	230d      	movs	r3, #13
 800c9c2:	e091      	b.n	800cae8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ca:	441a      	add	r2, r3
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c9d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d103      	bne.n	800c9e0 <find_volume+0x380>
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	699b      	ldr	r3, [r3, #24]
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	e00a      	b.n	800c9f6 <find_volume+0x396>
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	699a      	ldr	r2, [r3, #24]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	085a      	lsrs	r2, r3, #1
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c9f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	69da      	ldr	r2, [r3, #28]
 800c9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ca02:	0a5b      	lsrs	r3, r3, #9
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d201      	bcs.n	800ca0c <find_volume+0x3ac>
 800ca08:	230d      	movs	r3, #13
 800ca0a:	e06d      	b.n	800cae8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca12:	615a      	str	r2, [r3, #20]
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	695a      	ldr	r2, [r3, #20]
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	2280      	movs	r2, #128	; 0x80
 800ca20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ca22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	d149      	bne.n	800cabe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	3334      	adds	r3, #52	; 0x34
 800ca2e:	3330      	adds	r3, #48	; 0x30
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fe f81b 	bl	800aa6c <ld_word>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d140      	bne.n	800cabe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ca3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca3e:	3301      	adds	r3, #1
 800ca40:	4619      	mov	r1, r3
 800ca42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca44:	f7fe fac2 	bl	800afcc <move_window>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d137      	bne.n	800cabe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	2200      	movs	r2, #0
 800ca52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	3334      	adds	r3, #52	; 0x34
 800ca58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fe f805 	bl	800aa6c <ld_word>
 800ca62:	4603      	mov	r3, r0
 800ca64:	461a      	mov	r2, r3
 800ca66:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d127      	bne.n	800cabe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	3334      	adds	r3, #52	; 0x34
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fe f812 	bl	800aa9c <ld_dword>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	4a1d      	ldr	r2, [pc, #116]	; (800caf0 <find_volume+0x490>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d11e      	bne.n	800cabe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	3334      	adds	r3, #52	; 0x34
 800ca84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe f807 	bl	800aa9c <ld_dword>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	4a18      	ldr	r2, [pc, #96]	; (800caf4 <find_volume+0x494>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d113      	bne.n	800cabe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	3334      	adds	r3, #52	; 0x34
 800ca9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fd fffc 	bl	800aa9c <ld_dword>
 800caa4:	4602      	mov	r2, r0
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800caaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caac:	3334      	adds	r3, #52	; 0x34
 800caae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fd fff2 	bl	800aa9c <ld_dword>
 800cab8:	4602      	mov	r2, r0
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cac4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cac6:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <find_volume+0x498>)
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <find_volume+0x498>)
 800cad0:	801a      	strh	r2, [r3, #0]
 800cad2:	4b09      	ldr	r3, [pc, #36]	; (800caf8 <find_volume+0x498>)
 800cad4:	881a      	ldrh	r2, [r3, #0]
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cadc:	4a07      	ldr	r2, [pc, #28]	; (800cafc <find_volume+0x49c>)
 800cade:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cae2:	f7fe fa0b 	bl	800aefc <clear_lock>
#endif
	return FR_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3758      	adds	r7, #88	; 0x58
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	41615252 	.word	0x41615252
 800caf4:	61417272 	.word	0x61417272
 800caf8:	200008b0 	.word	0x200008b0
 800cafc:	20000904 	.word	0x20000904

0800cb00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cb0a:	2309      	movs	r3, #9
 800cb0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d01c      	beq.n	800cb4e <validate+0x4e>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d018      	beq.n	800cb4e <validate+0x4e>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d013      	beq.n	800cb4e <validate+0x4e>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	889a      	ldrh	r2, [r3, #4]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	88db      	ldrh	r3, [r3, #6]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d10c      	bne.n	800cb4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	785b      	ldrb	r3, [r3, #1]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fd fef8 	bl	800a930 <disk_status>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d101      	bne.n	800cb4e <validate+0x4e>
			res = FR_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cb4e:	7bfb      	ldrb	r3, [r7, #15]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <validate+0x5a>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	e000      	b.n	800cb5c <validate+0x5c>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	6013      	str	r3, [r2, #0]
	return res;
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
	...

0800cb6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	4613      	mov	r3, r2
 800cb78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cb7e:	f107 0310 	add.w	r3, r7, #16
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff fcd1 	bl	800c52a <get_ldnumber>
 800cb88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	da01      	bge.n	800cb94 <f_mount+0x28>
 800cb90:	230b      	movs	r3, #11
 800cb92:	e02b      	b.n	800cbec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cb94:	4a17      	ldr	r2, [pc, #92]	; (800cbf4 <f_mount+0x88>)
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d005      	beq.n	800cbb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cba4:	69b8      	ldr	r0, [r7, #24]
 800cba6:	f7fe f9a9 	bl	800aefc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	490d      	ldr	r1, [pc, #52]	; (800cbf4 <f_mount+0x88>)
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <f_mount+0x66>
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d001      	beq.n	800cbd6 <f_mount+0x6a>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e00a      	b.n	800cbec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cbd6:	f107 010c 	add.w	r1, r7, #12
 800cbda:	f107 0308 	add.w	r3, r7, #8
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff fd3d 	bl	800c660 <find_volume>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3720      	adds	r7, #32
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200008ac 	.word	0x200008ac

0800cbf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b09a      	sub	sp, #104	; 0x68
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4613      	mov	r3, r2
 800cc04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <f_open+0x18>
 800cc0c:	2309      	movs	r3, #9
 800cc0e:	e1ad      	b.n	800cf6c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cc18:	79fa      	ldrb	r2, [r7, #7]
 800cc1a:	f107 0114 	add.w	r1, r7, #20
 800cc1e:	f107 0308 	add.w	r3, r7, #8
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7ff fd1c 	bl	800c660 <find_volume>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cc2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f040 8191 	bne.w	800cf5a <f_open+0x362>
		dj.obj.fs = fs;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	f107 0318 	add.w	r3, r7, #24
 800cc42:	4611      	mov	r1, r2
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fbff 	bl	800c448 <follow_path>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cc50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d11a      	bne.n	800cc8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cc58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	da03      	bge.n	800cc6a <f_open+0x72>
				res = FR_INVALID_NAME;
 800cc62:	2306      	movs	r3, #6
 800cc64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cc68:	e011      	b.n	800cc8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	bf14      	ite	ne
 800cc74:	2301      	movne	r3, #1
 800cc76:	2300      	moveq	r3, #0
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f107 0318 	add.w	r3, r7, #24
 800cc80:	4611      	mov	r1, r2
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fd fff2 	bl	800ac6c <chk_lock>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	f003 031c 	and.w	r3, r3, #28
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d07f      	beq.n	800cd98 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cc98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d017      	beq.n	800ccd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cca0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cca4:	2b04      	cmp	r3, #4
 800cca6:	d10e      	bne.n	800ccc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cca8:	f7fe f83c 	bl	800ad24 <enq_lock>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d006      	beq.n	800ccc0 <f_open+0xc8>
 800ccb2:	f107 0318 	add.w	r3, r7, #24
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff f916 	bl	800bee8 <dir_register>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	e000      	b.n	800ccc2 <f_open+0xca>
 800ccc0:	2312      	movs	r3, #18
 800ccc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	f043 0308 	orr.w	r3, r3, #8
 800cccc:	71fb      	strb	r3, [r7, #7]
 800ccce:	e010      	b.n	800ccf2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ccd0:	7fbb      	ldrb	r3, [r7, #30]
 800ccd2:	f003 0311 	and.w	r3, r3, #17
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <f_open+0xea>
					res = FR_DENIED;
 800ccda:	2307      	movs	r3, #7
 800ccdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cce0:	e007      	b.n	800ccf2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	f003 0304 	and.w	r3, r3, #4
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <f_open+0xfa>
 800ccec:	2308      	movs	r3, #8
 800ccee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ccf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d168      	bne.n	800cdcc <f_open+0x1d4>
 800ccfa:	79fb      	ldrb	r3, [r7, #7]
 800ccfc:	f003 0308 	and.w	r3, r3, #8
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d063      	beq.n	800cdcc <f_open+0x1d4>
				dw = GET_FATTIME();
 800cd04:	f7fd fdb6 	bl	800a874 <get_fattime>
 800cd08:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0c:	330e      	adds	r3, #14
 800cd0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7fd ff01 	bl	800ab18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	3316      	adds	r3, #22
 800cd1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fd fefb 	bl	800ab18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd24:	330b      	adds	r3, #11
 800cd26:	2220      	movs	r2, #32
 800cd28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd2e:	4611      	mov	r1, r2
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe fe52 	bl	800b9da <ld_clust>
 800cd36:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe fe6a 	bl	800ba18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	331c      	adds	r3, #28
 800cd48:	2100      	movs	r1, #0
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fd fee4 	bl	800ab18 <st_dword>
					fs->wflag = 1;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2201      	movs	r2, #1
 800cd54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cd56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d037      	beq.n	800cdcc <f_open+0x1d4>
						dw = fs->winsect;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd60:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cd62:	f107 0318 	add.w	r3, r7, #24
 800cd66:	2200      	movs	r2, #0
 800cd68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fe fb7d 	bl	800b46a <remove_chain>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cd76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d126      	bne.n	800cdcc <f_open+0x1d4>
							res = move_window(fs, dw);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe f922 	bl	800afcc <move_window>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd92:	3a01      	subs	r2, #1
 800cd94:	611a      	str	r2, [r3, #16]
 800cd96:	e019      	b.n	800cdcc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cd98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d115      	bne.n	800cdcc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cda0:	7fbb      	ldrb	r3, [r7, #30]
 800cda2:	f003 0310 	and.w	r3, r3, #16
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cdaa:	2304      	movs	r3, #4
 800cdac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cdb0:	e00c      	b.n	800cdcc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	f003 0302 	and.w	r3, r3, #2
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d007      	beq.n	800cdcc <f_open+0x1d4>
 800cdbc:	7fbb      	ldrb	r3, [r7, #30]
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <f_open+0x1d4>
						res = FR_DENIED;
 800cdc6:	2307      	movs	r3, #7
 800cdc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cdcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d128      	bne.n	800ce26 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	f003 0308 	and.w	r3, r3, #8
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cdee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	f023 0301 	bic.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bf14      	ite	ne
 800cdfe:	2301      	movne	r3, #1
 800ce00:	2300      	moveq	r3, #0
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	461a      	mov	r2, r3
 800ce06:	f107 0318 	add.w	r3, r7, #24
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fd ffab 	bl	800ad68 <inc_lock>
 800ce12:	4602      	mov	r2, r0
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <f_open+0x22e>
 800ce20:	2302      	movs	r3, #2
 800ce22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ce26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f040 8095 	bne.w	800cf5a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce34:	4611      	mov	r1, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fe fdcf 	bl	800b9da <ld_clust>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	331c      	adds	r3, #28
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fd fe28 	bl	800aa9c <ld_dword>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ce58:	697a      	ldr	r2, [r7, #20]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	88da      	ldrh	r2, [r3, #6]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	79fa      	ldrb	r2, [r7, #7]
 800ce6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3330      	adds	r3, #48	; 0x30
 800ce82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce86:	2100      	movs	r1, #0
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fd fe92 	bl	800abb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d060      	beq.n	800cf5a <f_open+0x362>
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d05c      	beq.n	800cf5a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	68da      	ldr	r2, [r3, #12]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	895b      	ldrh	r3, [r3, #10]
 800ceac:	025b      	lsls	r3, r3, #9
 800ceae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cebc:	e016      	b.n	800ceec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe f93d 	bl	800b142 <get_fat>
 800cec8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ceca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d802      	bhi.n	800ced6 <f_open+0x2de>
 800ced0:	2302      	movs	r3, #2
 800ced2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ced6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ced8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cedc:	d102      	bne.n	800cee4 <f_open+0x2ec>
 800cede:	2301      	movs	r3, #1
 800cee0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d103      	bne.n	800cefc <f_open+0x304>
 800cef4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d8e0      	bhi.n	800cebe <f_open+0x2c6>
				}
				fp->clust = clst;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cf02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d127      	bne.n	800cf5a <f_open+0x362>
 800cf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d022      	beq.n	800cf5a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe f8f3 	bl	800b104 <clust2sect>
 800cf1e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cf20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d103      	bne.n	800cf2e <f_open+0x336>
						res = FR_INT_ERR;
 800cf26:	2302      	movs	r3, #2
 800cf28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf2c:	e015      	b.n	800cf5a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cf2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf30:	0a5a      	lsrs	r2, r3, #9
 800cf32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf34:	441a      	add	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	7858      	ldrb	r0, [r3, #1]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6a1a      	ldr	r2, [r3, #32]
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f7fd fd31 	bl	800a9b0 <disk_read>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <f_open+0x362>
 800cf54:	2301      	movs	r3, #1
 800cf56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cf5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <f_open+0x370>
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cf68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3768      	adds	r7, #104	; 0x68
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08c      	sub	sp, #48	; 0x30
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f107 0210 	add.w	r2, r7, #16
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff fdb3 	bl	800cb00 <validate>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cfa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d107      	bne.n	800cfb8 <f_write+0x44>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	7d5b      	ldrb	r3, [r3, #21]
 800cfac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <f_write+0x4a>
 800cfb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfbc:	e14b      	b.n	800d256 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	7d1b      	ldrb	r3, [r3, #20]
 800cfc2:	f003 0302 	and.w	r3, r3, #2
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <f_write+0x5a>
 800cfca:	2307      	movs	r3, #7
 800cfcc:	e143      	b.n	800d256 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	699a      	ldr	r2, [r3, #24]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	441a      	add	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	f080 812d 	bcs.w	800d23a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	699b      	ldr	r3, [r3, #24]
 800cfe4:	43db      	mvns	r3, r3
 800cfe6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cfe8:	e127      	b.n	800d23a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f040 80e3 	bne.w	800d1be <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	0a5b      	lsrs	r3, r3, #9
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	8952      	ldrh	r2, [r2, #10]
 800d002:	3a01      	subs	r2, #1
 800d004:	4013      	ands	r3, r2
 800d006:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d143      	bne.n	800d096 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10c      	bne.n	800d030 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d11a      	bne.n	800d058 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2100      	movs	r1, #0
 800d026:	4618      	mov	r0, r3
 800d028:	f7fe fa84 	bl	800b534 <create_chain>
 800d02c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d02e:	e013      	b.n	800d058 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	2b00      	cmp	r3, #0
 800d036:	d007      	beq.n	800d048 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	4619      	mov	r1, r3
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7fe fb10 	bl	800b664 <clmt_clust>
 800d044:	62b8      	str	r0, [r7, #40]	; 0x28
 800d046:	e007      	b.n	800d058 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	4619      	mov	r1, r3
 800d050:	4610      	mov	r0, r2
 800d052:	f7fe fa6f 	bl	800b534 <create_chain>
 800d056:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 80f2 	beq.w	800d244 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d062:	2b01      	cmp	r3, #1
 800d064:	d104      	bne.n	800d070 <f_write+0xfc>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2202      	movs	r2, #2
 800d06a:	755a      	strb	r2, [r3, #21]
 800d06c:	2302      	movs	r3, #2
 800d06e:	e0f2      	b.n	800d256 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d076:	d104      	bne.n	800d082 <f_write+0x10e>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2201      	movs	r2, #1
 800d07c:	755a      	strb	r2, [r3, #21]
 800d07e:	2301      	movs	r3, #1
 800d080:	e0e9      	b.n	800d256 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d086:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d102      	bne.n	800d096 <f_write+0x122>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d094:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	7d1b      	ldrb	r3, [r3, #20]
 800d09a:	b25b      	sxtb	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	da18      	bge.n	800d0d2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	7858      	ldrb	r0, [r3, #1]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6a1a      	ldr	r2, [r3, #32]
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	f7fd fc9e 	bl	800a9f0 <disk_write>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d004      	beq.n	800d0c4 <f_write+0x150>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	755a      	strb	r2, [r3, #21]
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e0c8      	b.n	800d256 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	7d1b      	ldrb	r3, [r3, #20]
 800d0c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d0d2:	693a      	ldr	r2, [r7, #16]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	69db      	ldr	r3, [r3, #28]
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4610      	mov	r0, r2
 800d0dc:	f7fe f812 	bl	800b104 <clust2sect>
 800d0e0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d104      	bne.n	800d0f2 <f_write+0x17e>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	755a      	strb	r2, [r3, #21]
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	e0b1      	b.n	800d256 <f_write+0x2e2>
			sect += csect;
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	0a5b      	lsrs	r3, r3, #9
 800d0fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d100:	6a3b      	ldr	r3, [r7, #32]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d03c      	beq.n	800d180 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d106:	69ba      	ldr	r2, [r7, #24]
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	4413      	add	r3, r2
 800d10c:	693a      	ldr	r2, [r7, #16]
 800d10e:	8952      	ldrh	r2, [r2, #10]
 800d110:	4293      	cmp	r3, r2
 800d112:	d905      	bls.n	800d120 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	895b      	ldrh	r3, [r3, #10]
 800d118:	461a      	mov	r2, r3
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	7858      	ldrb	r0, [r3, #1]
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	69f9      	ldr	r1, [r7, #28]
 800d12a:	f7fd fc61 	bl	800a9f0 <disk_write>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <f_write+0x1ca>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2201      	movs	r2, #1
 800d138:	755a      	strb	r2, [r3, #21]
 800d13a:	2301      	movs	r3, #1
 800d13c:	e08b      	b.n	800d256 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6a1a      	ldr	r2, [r3, #32]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	1ad3      	subs	r3, r2, r3
 800d146:	6a3a      	ldr	r2, [r7, #32]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d915      	bls.n	800d178 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6a1a      	ldr	r2, [r3, #32]
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	025b      	lsls	r3, r3, #9
 800d15c:	69fa      	ldr	r2, [r7, #28]
 800d15e:	4413      	add	r3, r2
 800d160:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d164:	4619      	mov	r1, r3
 800d166:	f7fd fd03 	bl	800ab70 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	7d1b      	ldrb	r3, [r3, #20]
 800d16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d172:	b2da      	uxtb	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	025b      	lsls	r3, r3, #9
 800d17c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d17e:	e03f      	b.n	800d200 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6a1b      	ldr	r3, [r3, #32]
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	429a      	cmp	r2, r3
 800d188:	d016      	beq.n	800d1b8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	699a      	ldr	r2, [r3, #24]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d192:	429a      	cmp	r2, r3
 800d194:	d210      	bcs.n	800d1b8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	7858      	ldrb	r0, [r3, #1]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	f7fd fc04 	bl	800a9b0 <disk_read>
 800d1a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d004      	beq.n	800d1b8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	755a      	strb	r2, [r3, #21]
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e04e      	b.n	800d256 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	697a      	ldr	r2, [r7, #20]
 800d1bc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	699b      	ldr	r3, [r3, #24]
 800d1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d1ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d901      	bls.n	800d1d8 <f_write+0x264>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e6:	4413      	add	r3, r2
 800d1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ea:	69f9      	ldr	r1, [r7, #28]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fd fcbf 	bl	800ab70 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	7d1b      	ldrb	r3, [r3, #20]
 800d1f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d200:	69fa      	ldr	r2, [r7, #28]
 800d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d204:	4413      	add	r3, r2
 800d206:	61fb      	str	r3, [r7, #28]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	699a      	ldr	r2, [r3, #24]
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	441a      	add	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	619a      	str	r2, [r3, #24]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	68da      	ldr	r2, [r3, #12]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	699b      	ldr	r3, [r3, #24]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	bf38      	it	cc
 800d220:	461a      	movcc	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	60da      	str	r2, [r3, #12]
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	441a      	add	r2, r3
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	601a      	str	r2, [r3, #0]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f47f aed4 	bne.w	800cfea <f_write+0x76>
 800d242:	e000      	b.n	800d246 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d244:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	7d1b      	ldrb	r3, [r3, #20]
 800d24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3730      	adds	r7, #48	; 0x30
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b086      	sub	sp, #24
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f107 0208 	add.w	r2, r7, #8
 800d26c:	4611      	mov	r1, r2
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff fc46 	bl	800cb00 <validate>
 800d274:	4603      	mov	r3, r0
 800d276:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d278:	7dfb      	ldrb	r3, [r7, #23]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d168      	bne.n	800d350 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	7d1b      	ldrb	r3, [r3, #20]
 800d282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d286:	2b00      	cmp	r3, #0
 800d288:	d062      	beq.n	800d350 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	7d1b      	ldrb	r3, [r3, #20]
 800d28e:	b25b      	sxtb	r3, r3
 800d290:	2b00      	cmp	r3, #0
 800d292:	da15      	bge.n	800d2c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	7858      	ldrb	r0, [r3, #1]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a1a      	ldr	r2, [r3, #32]
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	f7fd fba4 	bl	800a9f0 <disk_write>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d001      	beq.n	800d2b2 <f_sync+0x54>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e04f      	b.n	800d352 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	7d1b      	ldrb	r3, [r3, #20]
 800d2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ba:	b2da      	uxtb	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d2c0:	f7fd fad8 	bl	800a874 <get_fattime>
 800d2c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	f7fd fe7c 	bl	800afcc <move_window>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d138      	bne.n	800d350 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	330b      	adds	r3, #11
 800d2e8:	781a      	ldrb	r2, [r3, #0]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	330b      	adds	r3, #11
 800d2ee:	f042 0220 	orr.w	r2, r2, #32
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6818      	ldr	r0, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	461a      	mov	r2, r3
 800d300:	68f9      	ldr	r1, [r7, #12]
 800d302:	f7fe fb89 	bl	800ba18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f103 021c 	add.w	r2, r3, #28
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	4619      	mov	r1, r3
 800d312:	4610      	mov	r0, r2
 800d314:	f7fd fc00 	bl	800ab18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	3316      	adds	r3, #22
 800d31c:	6939      	ldr	r1, [r7, #16]
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fd fbfa 	bl	800ab18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3312      	adds	r3, #18
 800d328:	2100      	movs	r1, #0
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fd fbd9 	bl	800aae2 <st_word>
					fs->wflag = 1;
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	2201      	movs	r2, #1
 800d334:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7fd fe75 	bl	800b028 <sync_fs>
 800d33e:	4603      	mov	r3, r0
 800d340:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7d1b      	ldrb	r3, [r3, #20]
 800d346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d350:	7dfb      	ldrb	r3, [r7, #23]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7ff ff7b 	bl	800d25e <f_sync>
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d118      	bne.n	800d3a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f107 0208 	add.w	r2, r7, #8
 800d378:	4611      	mov	r1, r2
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff fbc0 	bl	800cb00 <validate>
 800d380:	4603      	mov	r3, r0
 800d382:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d384:	7bfb      	ldrb	r3, [r7, #15]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10c      	bne.n	800d3a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fd fd78 	bl	800ae84 <dec_lock>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d3ba:	78fb      	ldrb	r3, [r7, #3]
 800d3bc:	2b0a      	cmp	r3, #10
 800d3be:	d103      	bne.n	800d3c8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d3c0:	210d      	movs	r1, #13
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7ff fff3 	bl	800d3ae <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	db25      	blt.n	800d420 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	60fa      	str	r2, [r7, #12]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	4413      	add	r3, r2
 800d3de:	78fa      	ldrb	r2, [r7, #3]
 800d3e0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b3c      	cmp	r3, #60	; 0x3c
 800d3e6:	dd12      	ble.n	800d40e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6818      	ldr	r0, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f103 010c 	add.w	r1, r3, #12
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	f7ff fdbc 	bl	800cf74 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	429a      	cmp	r2, r3
 800d402:	d101      	bne.n	800d408 <putc_bfd+0x5a>
 800d404:	2300      	movs	r3, #0
 800d406:	e001      	b.n	800d40c <putc_bfd+0x5e>
 800d408:	f04f 33ff 	mov.w	r3, #4294967295
 800d40c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	609a      	str	r2, [r3, #8]
 800d41e:	e000      	b.n	800d422 <putc_bfd+0x74>
	if (i < 0) return;
 800d420:	bf00      	nop
}
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	db16      	blt.n	800d466 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6818      	ldr	r0, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f103 010c 	add.w	r1, r3, #12
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	461a      	mov	r2, r3
 800d448:	f107 030c 	add.w	r3, r7, #12
 800d44c:	f7ff fd92 	bl	800cf74 <f_write>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d107      	bne.n	800d466 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d102      	bne.n	800d466 <putc_flush+0x3e>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	e001      	b.n	800d46a <putc_flush+0x42>
	return EOF;
 800d466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d472:	b480      	push	{r7}
 800d474:	b083      	sub	sp, #12
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
 800d47a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	683a      	ldr	r2, [r7, #0]
 800d480:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	605a      	str	r2, [r3, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	609a      	str	r2, [r3, #8]
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b096      	sub	sp, #88	; 0x58
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d4a6:	f107 030c 	add.w	r3, r7, #12
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7ff ffe0 	bl	800d472 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d4b2:	e009      	b.n	800d4c8 <f_puts+0x2c>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	781a      	ldrb	r2, [r3, #0]
 800d4bc:	f107 030c 	add.w	r3, r7, #12
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7ff ff73 	bl	800d3ae <putc_bfd>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1f1      	bne.n	800d4b4 <f_puts+0x18>
	return putc_flush(&pb);
 800d4d0:	f107 030c 	add.w	r3, r7, #12
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff ffa7 	bl	800d428 <putc_flush>
 800d4da:	4603      	mov	r3, r0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3758      	adds	r7, #88	; 0x58
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d4e4:	b40e      	push	{r1, r2, r3}
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b0a7      	sub	sp, #156	; 0x9c
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d4ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff ffbc 	bl	800d472 <putc_init>

	va_start(arp, fmt);
 800d4fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d4fe:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800d500:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800d510:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d514:	2b00      	cmp	r3, #0
 800d516:	f000 81f2 	beq.w	800d8fe <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800d51a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d51e:	2b25      	cmp	r3, #37	; 0x25
 800d520:	d008      	beq.n	800d534 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d522:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d52a:	4611      	mov	r1, r2
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff ff3e 	bl	800d3ae <putc_bfd>
			continue;
 800d532:	e1e3      	b.n	800d8fc <f_printf+0x418>
		}
		w = f = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d53a:	2300      	movs	r3, #0
 800d53c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800d540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d550:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d554:	2b30      	cmp	r3, #48	; 0x30
 800d556:	d10b      	bne.n	800d570 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d558:	2301      	movs	r3, #1
 800d55a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d55e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800d56e:	e024      	b.n	800d5ba <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d570:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d574:	2b2d      	cmp	r3, #45	; 0x2d
 800d576:	d120      	bne.n	800d5ba <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d578:	2302      	movs	r3, #2
 800d57a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d57e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d58e:	e014      	b.n	800d5ba <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d590:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d594:	4613      	mov	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4413      	add	r3, r2
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	461a      	mov	r2, r3
 800d59e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5a2:	4413      	add	r3, r2
 800d5a4:	3b30      	subs	r3, #48	; 0x30
 800d5a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800d5aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800d5ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5be:	2b2f      	cmp	r3, #47	; 0x2f
 800d5c0:	d903      	bls.n	800d5ca <f_printf+0xe6>
 800d5c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5c6:	2b39      	cmp	r3, #57	; 0x39
 800d5c8:	d9e2      	bls.n	800d590 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d5ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5ce:	2b6c      	cmp	r3, #108	; 0x6c
 800d5d0:	d003      	beq.n	800d5da <f_printf+0xf6>
 800d5d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5d6:	2b4c      	cmp	r3, #76	; 0x4c
 800d5d8:	d10d      	bne.n	800d5f6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d5da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d5de:	f043 0304 	orr.w	r3, r3, #4
 800d5e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d5e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800d5f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f000 8181 	beq.w	800d902 <f_printf+0x41e>
		d = c;
 800d600:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d604:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800d608:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d60c:	2b60      	cmp	r3, #96	; 0x60
 800d60e:	d908      	bls.n	800d622 <f_printf+0x13e>
 800d610:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d614:	2b7a      	cmp	r3, #122	; 0x7a
 800d616:	d804      	bhi.n	800d622 <f_printf+0x13e>
 800d618:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d61c:	3b20      	subs	r3, #32
 800d61e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800d622:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d626:	3b42      	subs	r3, #66	; 0x42
 800d628:	2b16      	cmp	r3, #22
 800d62a:	f200 8098 	bhi.w	800d75e <f_printf+0x27a>
 800d62e:	a201      	add	r2, pc, #4	; (adr r2, 800d634 <f_printf+0x150>)
 800d630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d634:	0800d73f 	.word	0x0800d73f
 800d638:	0800d727 	.word	0x0800d727
 800d63c:	0800d74f 	.word	0x0800d74f
 800d640:	0800d75f 	.word	0x0800d75f
 800d644:	0800d75f 	.word	0x0800d75f
 800d648:	0800d75f 	.word	0x0800d75f
 800d64c:	0800d75f 	.word	0x0800d75f
 800d650:	0800d75f 	.word	0x0800d75f
 800d654:	0800d75f 	.word	0x0800d75f
 800d658:	0800d75f 	.word	0x0800d75f
 800d65c:	0800d75f 	.word	0x0800d75f
 800d660:	0800d75f 	.word	0x0800d75f
 800d664:	0800d75f 	.word	0x0800d75f
 800d668:	0800d747 	.word	0x0800d747
 800d66c:	0800d75f 	.word	0x0800d75f
 800d670:	0800d75f 	.word	0x0800d75f
 800d674:	0800d75f 	.word	0x0800d75f
 800d678:	0800d691 	.word	0x0800d691
 800d67c:	0800d75f 	.word	0x0800d75f
 800d680:	0800d74f 	.word	0x0800d74f
 800d684:	0800d75f 	.word	0x0800d75f
 800d688:	0800d75f 	.word	0x0800d75f
 800d68c:	0800d757 	.word	0x0800d757
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d692:	1d1a      	adds	r2, r3, #4
 800d694:	67ba      	str	r2, [r7, #120]	; 0x78
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800d69a:	2300      	movs	r3, #0
 800d69c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d6a0:	e004      	b.n	800d6ac <f_printf+0x1c8>
 800d6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d6ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d6ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6b2:	4413      	add	r3, r2
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1f3      	bne.n	800d6a2 <f_printf+0x1be>
			if (!(f & 2)) {
 800d6ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d6be:	f003 0302 	and.w	r3, r3, #2
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d11a      	bne.n	800d6fc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d6c6:	e005      	b.n	800d6d4 <f_printf+0x1f0>
 800d6c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6cc:	2120      	movs	r1, #32
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7ff fe6d 	bl	800d3ae <putc_bfd>
 800d6d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6d8:	1c5a      	adds	r2, r3, #1
 800d6da:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d6de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d8f0      	bhi.n	800d6c8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d6e6:	e009      	b.n	800d6fc <f_printf+0x218>
 800d6e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d6ee:	781a      	ldrb	r2, [r3, #0]
 800d6f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff fe59 	bl	800d3ae <putc_bfd>
 800d6fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1f1      	bne.n	800d6e8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d704:	e005      	b.n	800d712 <f_printf+0x22e>
 800d706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d70a:	2120      	movs	r1, #32
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7ff fe4e 	bl	800d3ae <putc_bfd>
 800d712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d71c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d720:	429a      	cmp	r2, r3
 800d722:	d8f0      	bhi.n	800d706 <f_printf+0x222>
			continue;
 800d724:	e0ea      	b.n	800d8fc <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d728:	1d1a      	adds	r2, r3, #4
 800d72a:	67ba      	str	r2, [r7, #120]	; 0x78
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d734:	4611      	mov	r1, r2
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff fe39 	bl	800d3ae <putc_bfd>
 800d73c:	e0de      	b.n	800d8fc <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800d73e:	2302      	movs	r3, #2
 800d740:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d744:	e014      	b.n	800d770 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d746:	2308      	movs	r3, #8
 800d748:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d74c:	e010      	b.n	800d770 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d74e:	230a      	movs	r3, #10
 800d750:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d754:	e00c      	b.n	800d770 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d756:	2310      	movs	r3, #16
 800d758:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d75c:	e008      	b.n	800d770 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d75e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d766:	4611      	mov	r1, r2
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff fe20 	bl	800d3ae <putc_bfd>
 800d76e:	e0c5      	b.n	800d8fc <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d770:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d774:	f003 0304 	and.w	r3, r3, #4
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d004      	beq.n	800d786 <f_printf+0x2a2>
 800d77c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d77e:	1d1a      	adds	r2, r3, #4
 800d780:	67ba      	str	r2, [r7, #120]	; 0x78
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	e00c      	b.n	800d7a0 <f_printf+0x2bc>
 800d786:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d78a:	2b44      	cmp	r3, #68	; 0x44
 800d78c:	d104      	bne.n	800d798 <f_printf+0x2b4>
 800d78e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d790:	1d1a      	adds	r2, r3, #4
 800d792:	67ba      	str	r2, [r7, #120]	; 0x78
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	e003      	b.n	800d7a0 <f_printf+0x2bc>
 800d798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d79a:	1d1a      	adds	r2, r3, #4
 800d79c:	67ba      	str	r2, [r7, #120]	; 0x78
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d7a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d7a8:	2b44      	cmp	r3, #68	; 0x44
 800d7aa:	d10e      	bne.n	800d7ca <f_printf+0x2e6>
 800d7ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	da0a      	bge.n	800d7ca <f_printf+0x2e6>
			v = 0 - v;
 800d7b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7b8:	425b      	negs	r3, r3
 800d7ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800d7be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d7c2:	f043 0308 	orr.w	r3, r3, #8
 800d7c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d7d0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800d7d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7dc:	fb01 f202 	mul.w	r2, r1, r2
 800d7e0:	1a9b      	subs	r3, r3, r2
 800d7e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800d7e6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d7ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d7f6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d7fa:	2b09      	cmp	r3, #9
 800d7fc:	d90b      	bls.n	800d816 <f_printf+0x332>
 800d7fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d802:	2b78      	cmp	r3, #120	; 0x78
 800d804:	d101      	bne.n	800d80a <f_printf+0x326>
 800d806:	2227      	movs	r2, #39	; 0x27
 800d808:	e000      	b.n	800d80c <f_printf+0x328>
 800d80a:	2207      	movs	r2, #7
 800d80c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d810:	4413      	add	r3, r2
 800d812:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800d816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d81a:	1c5a      	adds	r2, r3, #1
 800d81c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d820:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d824:	3230      	adds	r2, #48	; 0x30
 800d826:	b2d2      	uxtb	r2, r2
 800d828:	3398      	adds	r3, #152	; 0x98
 800d82a:	443b      	add	r3, r7
 800d82c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d834:	2b00      	cmp	r3, #0
 800d836:	d003      	beq.n	800d840 <f_printf+0x35c>
 800d838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d83c:	2b1f      	cmp	r3, #31
 800d83e:	d9c7      	bls.n	800d7d0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d840:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d844:	f003 0308 	and.w	r3, r3, #8
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d009      	beq.n	800d860 <f_printf+0x37c>
 800d84c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d850:	1c5a      	adds	r2, r3, #1
 800d852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d856:	3398      	adds	r3, #152	; 0x98
 800d858:	443b      	add	r3, r7
 800d85a:	222d      	movs	r2, #45	; 0x2d
 800d85c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d868:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <f_printf+0x394>
 800d874:	2330      	movs	r3, #48	; 0x30
 800d876:	e000      	b.n	800d87a <f_printf+0x396>
 800d878:	2320      	movs	r3, #32
 800d87a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d87e:	e007      	b.n	800d890 <f_printf+0x3ac>
 800d880:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d888:	4611      	mov	r1, r2
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fd8f 	bl	800d3ae <putc_bfd>
 800d890:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d894:	f003 0302 	and.w	r3, r3, #2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d108      	bne.n	800d8ae <f_printf+0x3ca>
 800d89c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d8a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d8e8      	bhi.n	800d880 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800d8ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d8b8:	f107 020c 	add.w	r2, r7, #12
 800d8bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8c0:	4413      	add	r3, r2
 800d8c2:	781a      	ldrb	r2, [r3, #0]
 800d8c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff fd6f 	bl	800d3ae <putc_bfd>
		} while (i);
 800d8d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1ea      	bne.n	800d8ae <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800d8d8:	e007      	b.n	800d8ea <f_printf+0x406>
 800d8da:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d8de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7ff fd62 	bl	800d3ae <putc_bfd>
 800d8ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d8f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d8ee      	bhi.n	800d8da <f_printf+0x3f6>
		c = *fmt++;
 800d8fc:	e600      	b.n	800d500 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d8fe:	bf00      	nop
 800d900:	e000      	b.n	800d904 <f_printf+0x420>
		if (!c) break;
 800d902:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d908:	4618      	mov	r0, r3
 800d90a:	f7ff fd8d 	bl	800d428 <putc_flush>
 800d90e:	4603      	mov	r3, r0
}
 800d910:	4618      	mov	r0, r3
 800d912:	379c      	adds	r7, #156	; 0x9c
 800d914:	46bd      	mov	sp, r7
 800d916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d91a:	b003      	add	sp, #12
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop

0800d920 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	4613      	mov	r3, r2
 800d92c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d92e:	2301      	movs	r3, #1
 800d930:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d932:	2300      	movs	r3, #0
 800d934:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d936:	4b1f      	ldr	r3, [pc, #124]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d938:	7a5b      	ldrb	r3, [r3, #9]
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d131      	bne.n	800d9a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d940:	4b1c      	ldr	r3, [pc, #112]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d942:	7a5b      	ldrb	r3, [r3, #9]
 800d944:	b2db      	uxtb	r3, r3
 800d946:	461a      	mov	r2, r3
 800d948:	4b1a      	ldr	r3, [pc, #104]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d94a:	2100      	movs	r1, #0
 800d94c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d94e:	4b19      	ldr	r3, [pc, #100]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d950:	7a5b      	ldrb	r3, [r3, #9]
 800d952:	b2db      	uxtb	r3, r3
 800d954:	4a17      	ldr	r2, [pc, #92]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4413      	add	r3, r2
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d95e:	4b15      	ldr	r3, [pc, #84]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d960:	7a5b      	ldrb	r3, [r3, #9]
 800d962:	b2db      	uxtb	r3, r3
 800d964:	461a      	mov	r2, r3
 800d966:	4b13      	ldr	r3, [pc, #76]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d968:	4413      	add	r3, r2
 800d96a:	79fa      	ldrb	r2, [r7, #7]
 800d96c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d96e:	4b11      	ldr	r3, [pc, #68]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d970:	7a5b      	ldrb	r3, [r3, #9]
 800d972:	b2db      	uxtb	r3, r3
 800d974:	1c5a      	adds	r2, r3, #1
 800d976:	b2d1      	uxtb	r1, r2
 800d978:	4a0e      	ldr	r2, [pc, #56]	; (800d9b4 <FATFS_LinkDriverEx+0x94>)
 800d97a:	7251      	strb	r1, [r2, #9]
 800d97c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d97e:	7dbb      	ldrb	r3, [r7, #22]
 800d980:	3330      	adds	r3, #48	; 0x30
 800d982:	b2da      	uxtb	r2, r3
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	3301      	adds	r3, #1
 800d98c:	223a      	movs	r2, #58	; 0x3a
 800d98e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	3302      	adds	r3, #2
 800d994:	222f      	movs	r2, #47	; 0x2f
 800d996:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	3303      	adds	r3, #3
 800d99c:	2200      	movs	r2, #0
 800d99e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	20000b04 	.word	0x20000b04

0800d9b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7ff ffaa 	bl	800d920 <FATFS_LinkDriverEx>
 800d9cc:	4603      	mov	r3, r0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
	...

0800d9d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	6039      	str	r1, [r7, #0]
 800d9e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d9e4:	88fb      	ldrh	r3, [r7, #6]
 800d9e6:	2b7f      	cmp	r3, #127	; 0x7f
 800d9e8:	d802      	bhi.n	800d9f0 <ff_convert+0x18>
		c = chr;
 800d9ea:	88fb      	ldrh	r3, [r7, #6]
 800d9ec:	81fb      	strh	r3, [r7, #14]
 800d9ee:	e025      	b.n	800da3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00b      	beq.n	800da0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d9f6:	88fb      	ldrh	r3, [r7, #6]
 800d9f8:	2bff      	cmp	r3, #255	; 0xff
 800d9fa:	d805      	bhi.n	800da08 <ff_convert+0x30>
 800d9fc:	88fb      	ldrh	r3, [r7, #6]
 800d9fe:	3b80      	subs	r3, #128	; 0x80
 800da00:	4a12      	ldr	r2, [pc, #72]	; (800da4c <ff_convert+0x74>)
 800da02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da06:	e000      	b.n	800da0a <ff_convert+0x32>
 800da08:	2300      	movs	r3, #0
 800da0a:	81fb      	strh	r3, [r7, #14]
 800da0c:	e016      	b.n	800da3c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800da0e:	2300      	movs	r3, #0
 800da10:	81fb      	strh	r3, [r7, #14]
 800da12:	e009      	b.n	800da28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800da14:	89fb      	ldrh	r3, [r7, #14]
 800da16:	4a0d      	ldr	r2, [pc, #52]	; (800da4c <ff_convert+0x74>)
 800da18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da1c:	88fa      	ldrh	r2, [r7, #6]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d006      	beq.n	800da30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800da22:	89fb      	ldrh	r3, [r7, #14]
 800da24:	3301      	adds	r3, #1
 800da26:	81fb      	strh	r3, [r7, #14]
 800da28:	89fb      	ldrh	r3, [r7, #14]
 800da2a:	2b7f      	cmp	r3, #127	; 0x7f
 800da2c:	d9f2      	bls.n	800da14 <ff_convert+0x3c>
 800da2e:	e000      	b.n	800da32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800da30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800da32:	89fb      	ldrh	r3, [r7, #14]
 800da34:	3380      	adds	r3, #128	; 0x80
 800da36:	b29b      	uxth	r3, r3
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800da3c:	89fb      	ldrh	r3, [r7, #14]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3714      	adds	r7, #20
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	08010540 	.word	0x08010540

0800da50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800da50:	b480      	push	{r7}
 800da52:	b087      	sub	sp, #28
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800da5a:	88fb      	ldrh	r3, [r7, #6]
 800da5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da60:	d201      	bcs.n	800da66 <ff_wtoupper+0x16>
 800da62:	4b3e      	ldr	r3, [pc, #248]	; (800db5c <ff_wtoupper+0x10c>)
 800da64:	e000      	b.n	800da68 <ff_wtoupper+0x18>
 800da66:	4b3e      	ldr	r3, [pc, #248]	; (800db60 <ff_wtoupper+0x110>)
 800da68:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	1c9a      	adds	r2, r3, #2
 800da6e:	617a      	str	r2, [r7, #20]
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800da74:	8a7b      	ldrh	r3, [r7, #18]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d068      	beq.n	800db4c <ff_wtoupper+0xfc>
 800da7a:	88fa      	ldrh	r2, [r7, #6]
 800da7c:	8a7b      	ldrh	r3, [r7, #18]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d364      	bcc.n	800db4c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	1c9a      	adds	r2, r3, #2
 800da86:	617a      	str	r2, [r7, #20]
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	823b      	strh	r3, [r7, #16]
 800da8c:	8a3b      	ldrh	r3, [r7, #16]
 800da8e:	0a1b      	lsrs	r3, r3, #8
 800da90:	81fb      	strh	r3, [r7, #14]
 800da92:	8a3b      	ldrh	r3, [r7, #16]
 800da94:	b2db      	uxtb	r3, r3
 800da96:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800da98:	88fa      	ldrh	r2, [r7, #6]
 800da9a:	8a79      	ldrh	r1, [r7, #18]
 800da9c:	8a3b      	ldrh	r3, [r7, #16]
 800da9e:	440b      	add	r3, r1
 800daa0:	429a      	cmp	r2, r3
 800daa2:	da49      	bge.n	800db38 <ff_wtoupper+0xe8>
			switch (cmd) {
 800daa4:	89fb      	ldrh	r3, [r7, #14]
 800daa6:	2b08      	cmp	r3, #8
 800daa8:	d84f      	bhi.n	800db4a <ff_wtoupper+0xfa>
 800daaa:	a201      	add	r2, pc, #4	; (adr r2, 800dab0 <ff_wtoupper+0x60>)
 800daac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab0:	0800dad5 	.word	0x0800dad5
 800dab4:	0800dae7 	.word	0x0800dae7
 800dab8:	0800dafd 	.word	0x0800dafd
 800dabc:	0800db05 	.word	0x0800db05
 800dac0:	0800db0d 	.word	0x0800db0d
 800dac4:	0800db15 	.word	0x0800db15
 800dac8:	0800db1d 	.word	0x0800db1d
 800dacc:	0800db25 	.word	0x0800db25
 800dad0:	0800db2d 	.word	0x0800db2d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dad4:	88fa      	ldrh	r2, [r7, #6]
 800dad6:	8a7b      	ldrh	r3, [r7, #18]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	005b      	lsls	r3, r3, #1
 800dadc:	697a      	ldr	r2, [r7, #20]
 800dade:	4413      	add	r3, r2
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	80fb      	strh	r3, [r7, #6]
 800dae4:	e027      	b.n	800db36 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dae6:	88fa      	ldrh	r2, [r7, #6]
 800dae8:	8a7b      	ldrh	r3, [r7, #18]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	b29b      	uxth	r3, r3
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	88fa      	ldrh	r2, [r7, #6]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	80fb      	strh	r3, [r7, #6]
 800dafa:	e01c      	b.n	800db36 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dafc:	88fb      	ldrh	r3, [r7, #6]
 800dafe:	3b10      	subs	r3, #16
 800db00:	80fb      	strh	r3, [r7, #6]
 800db02:	e018      	b.n	800db36 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800db04:	88fb      	ldrh	r3, [r7, #6]
 800db06:	3b20      	subs	r3, #32
 800db08:	80fb      	strh	r3, [r7, #6]
 800db0a:	e014      	b.n	800db36 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800db0c:	88fb      	ldrh	r3, [r7, #6]
 800db0e:	3b30      	subs	r3, #48	; 0x30
 800db10:	80fb      	strh	r3, [r7, #6]
 800db12:	e010      	b.n	800db36 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800db14:	88fb      	ldrh	r3, [r7, #6]
 800db16:	3b1a      	subs	r3, #26
 800db18:	80fb      	strh	r3, [r7, #6]
 800db1a:	e00c      	b.n	800db36 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800db1c:	88fb      	ldrh	r3, [r7, #6]
 800db1e:	3308      	adds	r3, #8
 800db20:	80fb      	strh	r3, [r7, #6]
 800db22:	e008      	b.n	800db36 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800db24:	88fb      	ldrh	r3, [r7, #6]
 800db26:	3b50      	subs	r3, #80	; 0x50
 800db28:	80fb      	strh	r3, [r7, #6]
 800db2a:	e004      	b.n	800db36 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800db2c:	88fb      	ldrh	r3, [r7, #6]
 800db2e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800db32:	80fb      	strh	r3, [r7, #6]
 800db34:	bf00      	nop
			}
			break;
 800db36:	e008      	b.n	800db4a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800db38:	89fb      	ldrh	r3, [r7, #14]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d195      	bne.n	800da6a <ff_wtoupper+0x1a>
 800db3e:	8a3b      	ldrh	r3, [r7, #16]
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	4413      	add	r3, r2
 800db46:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800db48:	e78f      	b.n	800da6a <ff_wtoupper+0x1a>
			break;
 800db4a:	bf00      	nop
	}

	return chr;
 800db4c:	88fb      	ldrh	r3, [r7, #6]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	371c      	adds	r7, #28
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	08010640 	.word	0x08010640
 800db60:	08010834 	.word	0x08010834

0800db64 <__errno>:
 800db64:	4b01      	ldr	r3, [pc, #4]	; (800db6c <__errno+0x8>)
 800db66:	6818      	ldr	r0, [r3, #0]
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	20000104 	.word	0x20000104

0800db70 <__libc_init_array>:
 800db70:	b570      	push	{r4, r5, r6, lr}
 800db72:	4d0d      	ldr	r5, [pc, #52]	; (800dba8 <__libc_init_array+0x38>)
 800db74:	4c0d      	ldr	r4, [pc, #52]	; (800dbac <__libc_init_array+0x3c>)
 800db76:	1b64      	subs	r4, r4, r5
 800db78:	10a4      	asrs	r4, r4, #2
 800db7a:	2600      	movs	r6, #0
 800db7c:	42a6      	cmp	r6, r4
 800db7e:	d109      	bne.n	800db94 <__libc_init_array+0x24>
 800db80:	4d0b      	ldr	r5, [pc, #44]	; (800dbb0 <__libc_init_array+0x40>)
 800db82:	4c0c      	ldr	r4, [pc, #48]	; (800dbb4 <__libc_init_array+0x44>)
 800db84:	f002 fa68 	bl	8010058 <_init>
 800db88:	1b64      	subs	r4, r4, r5
 800db8a:	10a4      	asrs	r4, r4, #2
 800db8c:	2600      	movs	r6, #0
 800db8e:	42a6      	cmp	r6, r4
 800db90:	d105      	bne.n	800db9e <__libc_init_array+0x2e>
 800db92:	bd70      	pop	{r4, r5, r6, pc}
 800db94:	f855 3b04 	ldr.w	r3, [r5], #4
 800db98:	4798      	blx	r3
 800db9a:	3601      	adds	r6, #1
 800db9c:	e7ee      	b.n	800db7c <__libc_init_array+0xc>
 800db9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba2:	4798      	blx	r3
 800dba4:	3601      	adds	r6, #1
 800dba6:	e7f2      	b.n	800db8e <__libc_init_array+0x1e>
 800dba8:	08010dc4 	.word	0x08010dc4
 800dbac:	08010dc4 	.word	0x08010dc4
 800dbb0:	08010dc4 	.word	0x08010dc4
 800dbb4:	08010dc8 	.word	0x08010dc8

0800dbb8 <__retarget_lock_acquire>:
 800dbb8:	4770      	bx	lr

0800dbba <__retarget_lock_acquire_recursive>:
 800dbba:	4770      	bx	lr

0800dbbc <__retarget_lock_release>:
 800dbbc:	4770      	bx	lr

0800dbbe <__retarget_lock_release_recursive>:
 800dbbe:	4770      	bx	lr

0800dbc0 <memcpy>:
 800dbc0:	440a      	add	r2, r1
 800dbc2:	4291      	cmp	r1, r2
 800dbc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbc8:	d100      	bne.n	800dbcc <memcpy+0xc>
 800dbca:	4770      	bx	lr
 800dbcc:	b510      	push	{r4, lr}
 800dbce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbd6:	4291      	cmp	r1, r2
 800dbd8:	d1f9      	bne.n	800dbce <memcpy+0xe>
 800dbda:	bd10      	pop	{r4, pc}

0800dbdc <memset>:
 800dbdc:	4402      	add	r2, r0
 800dbde:	4603      	mov	r3, r0
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d100      	bne.n	800dbe6 <memset+0xa>
 800dbe4:	4770      	bx	lr
 800dbe6:	f803 1b01 	strb.w	r1, [r3], #1
 800dbea:	e7f9      	b.n	800dbe0 <memset+0x4>

0800dbec <_free_r>:
 800dbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbee:	2900      	cmp	r1, #0
 800dbf0:	d044      	beq.n	800dc7c <_free_r+0x90>
 800dbf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbf6:	9001      	str	r0, [sp, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f1a1 0404 	sub.w	r4, r1, #4
 800dbfe:	bfb8      	it	lt
 800dc00:	18e4      	addlt	r4, r4, r3
 800dc02:	f001 f935 	bl	800ee70 <__malloc_lock>
 800dc06:	4a1e      	ldr	r2, [pc, #120]	; (800dc80 <_free_r+0x94>)
 800dc08:	9801      	ldr	r0, [sp, #4]
 800dc0a:	6813      	ldr	r3, [r2, #0]
 800dc0c:	b933      	cbnz	r3, 800dc1c <_free_r+0x30>
 800dc0e:	6063      	str	r3, [r4, #4]
 800dc10:	6014      	str	r4, [r2, #0]
 800dc12:	b003      	add	sp, #12
 800dc14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc18:	f001 b930 	b.w	800ee7c <__malloc_unlock>
 800dc1c:	42a3      	cmp	r3, r4
 800dc1e:	d908      	bls.n	800dc32 <_free_r+0x46>
 800dc20:	6825      	ldr	r5, [r4, #0]
 800dc22:	1961      	adds	r1, r4, r5
 800dc24:	428b      	cmp	r3, r1
 800dc26:	bf01      	itttt	eq
 800dc28:	6819      	ldreq	r1, [r3, #0]
 800dc2a:	685b      	ldreq	r3, [r3, #4]
 800dc2c:	1949      	addeq	r1, r1, r5
 800dc2e:	6021      	streq	r1, [r4, #0]
 800dc30:	e7ed      	b.n	800dc0e <_free_r+0x22>
 800dc32:	461a      	mov	r2, r3
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	b10b      	cbz	r3, 800dc3c <_free_r+0x50>
 800dc38:	42a3      	cmp	r3, r4
 800dc3a:	d9fa      	bls.n	800dc32 <_free_r+0x46>
 800dc3c:	6811      	ldr	r1, [r2, #0]
 800dc3e:	1855      	adds	r5, r2, r1
 800dc40:	42a5      	cmp	r5, r4
 800dc42:	d10b      	bne.n	800dc5c <_free_r+0x70>
 800dc44:	6824      	ldr	r4, [r4, #0]
 800dc46:	4421      	add	r1, r4
 800dc48:	1854      	adds	r4, r2, r1
 800dc4a:	42a3      	cmp	r3, r4
 800dc4c:	6011      	str	r1, [r2, #0]
 800dc4e:	d1e0      	bne.n	800dc12 <_free_r+0x26>
 800dc50:	681c      	ldr	r4, [r3, #0]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	6053      	str	r3, [r2, #4]
 800dc56:	4421      	add	r1, r4
 800dc58:	6011      	str	r1, [r2, #0]
 800dc5a:	e7da      	b.n	800dc12 <_free_r+0x26>
 800dc5c:	d902      	bls.n	800dc64 <_free_r+0x78>
 800dc5e:	230c      	movs	r3, #12
 800dc60:	6003      	str	r3, [r0, #0]
 800dc62:	e7d6      	b.n	800dc12 <_free_r+0x26>
 800dc64:	6825      	ldr	r5, [r4, #0]
 800dc66:	1961      	adds	r1, r4, r5
 800dc68:	428b      	cmp	r3, r1
 800dc6a:	bf04      	itt	eq
 800dc6c:	6819      	ldreq	r1, [r3, #0]
 800dc6e:	685b      	ldreq	r3, [r3, #4]
 800dc70:	6063      	str	r3, [r4, #4]
 800dc72:	bf04      	itt	eq
 800dc74:	1949      	addeq	r1, r1, r5
 800dc76:	6021      	streq	r1, [r4, #0]
 800dc78:	6054      	str	r4, [r2, #4]
 800dc7a:	e7ca      	b.n	800dc12 <_free_r+0x26>
 800dc7c:	b003      	add	sp, #12
 800dc7e:	bd30      	pop	{r4, r5, pc}
 800dc80:	20000b14 	.word	0x20000b14

0800dc84 <sbrk_aligned>:
 800dc84:	b570      	push	{r4, r5, r6, lr}
 800dc86:	4e0e      	ldr	r6, [pc, #56]	; (800dcc0 <sbrk_aligned+0x3c>)
 800dc88:	460c      	mov	r4, r1
 800dc8a:	6831      	ldr	r1, [r6, #0]
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	b911      	cbnz	r1, 800dc96 <sbrk_aligned+0x12>
 800dc90:	f000 f88c 	bl	800ddac <_sbrk_r>
 800dc94:	6030      	str	r0, [r6, #0]
 800dc96:	4621      	mov	r1, r4
 800dc98:	4628      	mov	r0, r5
 800dc9a:	f000 f887 	bl	800ddac <_sbrk_r>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	d00a      	beq.n	800dcb8 <sbrk_aligned+0x34>
 800dca2:	1cc4      	adds	r4, r0, #3
 800dca4:	f024 0403 	bic.w	r4, r4, #3
 800dca8:	42a0      	cmp	r0, r4
 800dcaa:	d007      	beq.n	800dcbc <sbrk_aligned+0x38>
 800dcac:	1a21      	subs	r1, r4, r0
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f000 f87c 	bl	800ddac <_sbrk_r>
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	d101      	bne.n	800dcbc <sbrk_aligned+0x38>
 800dcb8:	f04f 34ff 	mov.w	r4, #4294967295
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
 800dcc0:	20000b18 	.word	0x20000b18

0800dcc4 <_malloc_r>:
 800dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc8:	1ccd      	adds	r5, r1, #3
 800dcca:	f025 0503 	bic.w	r5, r5, #3
 800dcce:	3508      	adds	r5, #8
 800dcd0:	2d0c      	cmp	r5, #12
 800dcd2:	bf38      	it	cc
 800dcd4:	250c      	movcc	r5, #12
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	4607      	mov	r7, r0
 800dcda:	db01      	blt.n	800dce0 <_malloc_r+0x1c>
 800dcdc:	42a9      	cmp	r1, r5
 800dcde:	d905      	bls.n	800dcec <_malloc_r+0x28>
 800dce0:	230c      	movs	r3, #12
 800dce2:	603b      	str	r3, [r7, #0]
 800dce4:	2600      	movs	r6, #0
 800dce6:	4630      	mov	r0, r6
 800dce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcec:	4e2e      	ldr	r6, [pc, #184]	; (800dda8 <_malloc_r+0xe4>)
 800dcee:	f001 f8bf 	bl	800ee70 <__malloc_lock>
 800dcf2:	6833      	ldr	r3, [r6, #0]
 800dcf4:	461c      	mov	r4, r3
 800dcf6:	bb34      	cbnz	r4, 800dd46 <_malloc_r+0x82>
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4638      	mov	r0, r7
 800dcfc:	f7ff ffc2 	bl	800dc84 <sbrk_aligned>
 800dd00:	1c43      	adds	r3, r0, #1
 800dd02:	4604      	mov	r4, r0
 800dd04:	d14d      	bne.n	800dda2 <_malloc_r+0xde>
 800dd06:	6834      	ldr	r4, [r6, #0]
 800dd08:	4626      	mov	r6, r4
 800dd0a:	2e00      	cmp	r6, #0
 800dd0c:	d140      	bne.n	800dd90 <_malloc_r+0xcc>
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	4631      	mov	r1, r6
 800dd12:	4638      	mov	r0, r7
 800dd14:	eb04 0803 	add.w	r8, r4, r3
 800dd18:	f000 f848 	bl	800ddac <_sbrk_r>
 800dd1c:	4580      	cmp	r8, r0
 800dd1e:	d13a      	bne.n	800dd96 <_malloc_r+0xd2>
 800dd20:	6821      	ldr	r1, [r4, #0]
 800dd22:	3503      	adds	r5, #3
 800dd24:	1a6d      	subs	r5, r5, r1
 800dd26:	f025 0503 	bic.w	r5, r5, #3
 800dd2a:	3508      	adds	r5, #8
 800dd2c:	2d0c      	cmp	r5, #12
 800dd2e:	bf38      	it	cc
 800dd30:	250c      	movcc	r5, #12
 800dd32:	4629      	mov	r1, r5
 800dd34:	4638      	mov	r0, r7
 800dd36:	f7ff ffa5 	bl	800dc84 <sbrk_aligned>
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	d02b      	beq.n	800dd96 <_malloc_r+0xd2>
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	442b      	add	r3, r5
 800dd42:	6023      	str	r3, [r4, #0]
 800dd44:	e00e      	b.n	800dd64 <_malloc_r+0xa0>
 800dd46:	6822      	ldr	r2, [r4, #0]
 800dd48:	1b52      	subs	r2, r2, r5
 800dd4a:	d41e      	bmi.n	800dd8a <_malloc_r+0xc6>
 800dd4c:	2a0b      	cmp	r2, #11
 800dd4e:	d916      	bls.n	800dd7e <_malloc_r+0xba>
 800dd50:	1961      	adds	r1, r4, r5
 800dd52:	42a3      	cmp	r3, r4
 800dd54:	6025      	str	r5, [r4, #0]
 800dd56:	bf18      	it	ne
 800dd58:	6059      	strne	r1, [r3, #4]
 800dd5a:	6863      	ldr	r3, [r4, #4]
 800dd5c:	bf08      	it	eq
 800dd5e:	6031      	streq	r1, [r6, #0]
 800dd60:	5162      	str	r2, [r4, r5]
 800dd62:	604b      	str	r3, [r1, #4]
 800dd64:	4638      	mov	r0, r7
 800dd66:	f104 060b 	add.w	r6, r4, #11
 800dd6a:	f001 f887 	bl	800ee7c <__malloc_unlock>
 800dd6e:	f026 0607 	bic.w	r6, r6, #7
 800dd72:	1d23      	adds	r3, r4, #4
 800dd74:	1af2      	subs	r2, r6, r3
 800dd76:	d0b6      	beq.n	800dce6 <_malloc_r+0x22>
 800dd78:	1b9b      	subs	r3, r3, r6
 800dd7a:	50a3      	str	r3, [r4, r2]
 800dd7c:	e7b3      	b.n	800dce6 <_malloc_r+0x22>
 800dd7e:	6862      	ldr	r2, [r4, #4]
 800dd80:	42a3      	cmp	r3, r4
 800dd82:	bf0c      	ite	eq
 800dd84:	6032      	streq	r2, [r6, #0]
 800dd86:	605a      	strne	r2, [r3, #4]
 800dd88:	e7ec      	b.n	800dd64 <_malloc_r+0xa0>
 800dd8a:	4623      	mov	r3, r4
 800dd8c:	6864      	ldr	r4, [r4, #4]
 800dd8e:	e7b2      	b.n	800dcf6 <_malloc_r+0x32>
 800dd90:	4634      	mov	r4, r6
 800dd92:	6876      	ldr	r6, [r6, #4]
 800dd94:	e7b9      	b.n	800dd0a <_malloc_r+0x46>
 800dd96:	230c      	movs	r3, #12
 800dd98:	603b      	str	r3, [r7, #0]
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	f001 f86e 	bl	800ee7c <__malloc_unlock>
 800dda0:	e7a1      	b.n	800dce6 <_malloc_r+0x22>
 800dda2:	6025      	str	r5, [r4, #0]
 800dda4:	e7de      	b.n	800dd64 <_malloc_r+0xa0>
 800dda6:	bf00      	nop
 800dda8:	20000b14 	.word	0x20000b14

0800ddac <_sbrk_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d06      	ldr	r5, [pc, #24]	; (800ddc8 <_sbrk_r+0x1c>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	602b      	str	r3, [r5, #0]
 800ddb8:	f7f8 fd02 	bl	80067c0 <_sbrk>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_sbrk_r+0x1a>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_sbrk_r+0x1a>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20000b1c 	.word	0x20000b1c

0800ddcc <siprintf>:
 800ddcc:	b40e      	push	{r1, r2, r3}
 800ddce:	b500      	push	{lr}
 800ddd0:	b09c      	sub	sp, #112	; 0x70
 800ddd2:	ab1d      	add	r3, sp, #116	; 0x74
 800ddd4:	9002      	str	r0, [sp, #8]
 800ddd6:	9006      	str	r0, [sp, #24]
 800ddd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dddc:	4809      	ldr	r0, [pc, #36]	; (800de04 <siprintf+0x38>)
 800ddde:	9107      	str	r1, [sp, #28]
 800dde0:	9104      	str	r1, [sp, #16]
 800dde2:	4909      	ldr	r1, [pc, #36]	; (800de08 <siprintf+0x3c>)
 800dde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dde8:	9105      	str	r1, [sp, #20]
 800ddea:	6800      	ldr	r0, [r0, #0]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	a902      	add	r1, sp, #8
 800ddf0:	f001 f8a6 	bl	800ef40 <_svfiprintf_r>
 800ddf4:	9b02      	ldr	r3, [sp, #8]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	701a      	strb	r2, [r3, #0]
 800ddfa:	b01c      	add	sp, #112	; 0x70
 800ddfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800de00:	b003      	add	sp, #12
 800de02:	4770      	bx	lr
 800de04:	20000104 	.word	0x20000104
 800de08:	ffff0208 	.word	0xffff0208

0800de0c <__seofread>:
 800de0c:	2000      	movs	r0, #0
 800de0e:	4770      	bx	lr

0800de10 <iso_year_adjust>:
 800de10:	6942      	ldr	r2, [r0, #20]
 800de12:	2a00      	cmp	r2, #0
 800de14:	f240 736c 	movw	r3, #1900	; 0x76c
 800de18:	bfa8      	it	ge
 800de1a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800de1e:	4413      	add	r3, r2
 800de20:	0792      	lsls	r2, r2, #30
 800de22:	d105      	bne.n	800de30 <iso_year_adjust+0x20>
 800de24:	2164      	movs	r1, #100	; 0x64
 800de26:	fb93 f2f1 	sdiv	r2, r3, r1
 800de2a:	fb01 3212 	mls	r2, r1, r2, r3
 800de2e:	b9da      	cbnz	r2, 800de68 <iso_year_adjust+0x58>
 800de30:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800de34:	fb93 f1f2 	sdiv	r1, r3, r2
 800de38:	fb02 3311 	mls	r3, r2, r1, r3
 800de3c:	fab3 f383 	clz	r3, r3
 800de40:	095b      	lsrs	r3, r3, #5
 800de42:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800de46:	0040      	lsls	r0, r0, #1
 800de48:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800de4c:	4418      	add	r0, r3
 800de4e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800de52:	4298      	cmp	r0, r3
 800de54:	d03a      	beq.n	800decc <iso_year_adjust+0xbc>
 800de56:	dc21      	bgt.n	800de9c <iso_year_adjust+0x8c>
 800de58:	2801      	cmp	r0, #1
 800de5a:	dc1a      	bgt.n	800de92 <iso_year_adjust+0x82>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	bfb4      	ite	lt
 800de60:	2000      	movlt	r0, #0
 800de62:	f04f 30ff 	movge.w	r0, #4294967295
 800de66:	4770      	bx	lr
 800de68:	2301      	movs	r3, #1
 800de6a:	e7ea      	b.n	800de42 <iso_year_adjust+0x32>
 800de6c:	2817      	cmp	r0, #23
 800de6e:	d813      	bhi.n	800de98 <iso_year_adjust+0x88>
 800de70:	e8df f000 	tbb	[pc, r0]
 800de74:	0c0c0c0c 	.word	0x0c0c0c0c
 800de78:	0c0c1212 	.word	0x0c0c1212
 800de7c:	12121212 	.word	0x12121212
 800de80:	12121212 	.word	0x12121212
 800de84:	0c0c1212 	.word	0x0c0c1212
 800de88:	0c0c1212 	.word	0x0c0c1212
 800de8c:	f04f 30ff 	mov.w	r0, #4294967295
 800de90:	4770      	bx	lr
 800de92:	380a      	subs	r0, #10
 800de94:	2817      	cmp	r0, #23
 800de96:	d9e9      	bls.n	800de6c <iso_year_adjust+0x5c>
 800de98:	2000      	movs	r0, #0
 800de9a:	4770      	bx	lr
 800de9c:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800dea0:	4298      	cmp	r0, r3
 800dea2:	dc06      	bgt.n	800deb2 <iso_year_adjust+0xa2>
 800dea4:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800dea8:	4298      	cmp	r0, r3
 800deaa:	bfd4      	ite	le
 800deac:	2000      	movle	r0, #0
 800deae:	2001      	movgt	r0, #1
 800deb0:	4770      	bx	lr
 800deb2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800deb6:	3802      	subs	r0, #2
 800deb8:	2815      	cmp	r0, #21
 800deba:	d8ed      	bhi.n	800de98 <iso_year_adjust+0x88>
 800debc:	2301      	movs	r3, #1
 800debe:	4083      	lsls	r3, r0
 800dec0:	4803      	ldr	r0, [pc, #12]	; (800ded0 <iso_year_adjust+0xc0>)
 800dec2:	4018      	ands	r0, r3
 800dec4:	3800      	subs	r0, #0
 800dec6:	bf18      	it	ne
 800dec8:	2001      	movne	r0, #1
 800deca:	4770      	bx	lr
 800decc:	2001      	movs	r0, #1
 800dece:	4770      	bx	lr
 800ded0:	002a001f 	.word	0x002a001f

0800ded4 <__strftime.isra.0>:
 800ded4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	b08f      	sub	sp, #60	; 0x3c
 800deda:	461e      	mov	r6, r3
 800dedc:	2300      	movs	r3, #0
 800dede:	4607      	mov	r7, r0
 800dee0:	460d      	mov	r5, r1
 800dee2:	9302      	str	r3, [sp, #8]
 800dee4:	461c      	mov	r4, r3
 800dee6:	7813      	ldrb	r3, [r2, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 84ba 	beq.w	800e862 <__strftime.isra.0+0x98e>
 800deee:	2b25      	cmp	r3, #37	; 0x25
 800def0:	d11f      	bne.n	800df32 <__strftime.isra.0+0x5e>
 800def2:	f892 b001 	ldrb.w	fp, [r2, #1]
 800def6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800defa:	d024      	beq.n	800df46 <__strftime.isra.0+0x72>
 800defc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800df00:	d021      	beq.n	800df46 <__strftime.isra.0+0x72>
 800df02:	f102 0801 	add.w	r8, r2, #1
 800df06:	f04f 0b00 	mov.w	fp, #0
 800df0a:	f898 2000 	ldrb.w	r2, [r8]
 800df0e:	3a31      	subs	r2, #49	; 0x31
 800df10:	2a08      	cmp	r2, #8
 800df12:	d81b      	bhi.n	800df4c <__strftime.isra.0+0x78>
 800df14:	4640      	mov	r0, r8
 800df16:	220a      	movs	r2, #10
 800df18:	a906      	add	r1, sp, #24
 800df1a:	f000 fdb5 	bl	800ea88 <strtoul>
 800df1e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800df22:	4681      	mov	r9, r0
 800df24:	f898 2000 	ldrb.w	r2, [r8]
 800df28:	2a45      	cmp	r2, #69	; 0x45
 800df2a:	d112      	bne.n	800df52 <__strftime.isra.0+0x7e>
 800df2c:	f108 0801 	add.w	r8, r8, #1
 800df30:	e011      	b.n	800df56 <__strftime.isra.0+0x82>
 800df32:	1e69      	subs	r1, r5, #1
 800df34:	42a1      	cmp	r1, r4
 800df36:	d802      	bhi.n	800df3e <__strftime.isra.0+0x6a>
 800df38:	2400      	movs	r4, #0
 800df3a:	f000 bc95 	b.w	800e868 <__strftime.isra.0+0x994>
 800df3e:	553b      	strb	r3, [r7, r4]
 800df40:	3201      	adds	r2, #1
 800df42:	3401      	adds	r4, #1
 800df44:	e7cf      	b.n	800dee6 <__strftime.isra.0+0x12>
 800df46:	f102 0802 	add.w	r8, r2, #2
 800df4a:	e7de      	b.n	800df0a <__strftime.isra.0+0x36>
 800df4c:	f04f 0900 	mov.w	r9, #0
 800df50:	e7e8      	b.n	800df24 <__strftime.isra.0+0x50>
 800df52:	2a4f      	cmp	r2, #79	; 0x4f
 800df54:	d0ea      	beq.n	800df2c <__strftime.isra.0+0x58>
 800df56:	f898 0000 	ldrb.w	r0, [r8]
 800df5a:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800df5e:	2a55      	cmp	r2, #85	; 0x55
 800df60:	d8ea      	bhi.n	800df38 <__strftime.isra.0+0x64>
 800df62:	a301      	add	r3, pc, #4	; (adr r3, 800df68 <__strftime.isra.0+0x94>)
 800df64:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800df68:	0800e857 	.word	0x0800e857
 800df6c:	0800df39 	.word	0x0800df39
 800df70:	0800df39 	.word	0x0800df39
 800df74:	0800df39 	.word	0x0800df39
 800df78:	0800df39 	.word	0x0800df39
 800df7c:	0800df39 	.word	0x0800df39
 800df80:	0800df39 	.word	0x0800df39
 800df84:	0800df39 	.word	0x0800df39
 800df88:	0800df39 	.word	0x0800df39
 800df8c:	0800df39 	.word	0x0800df39
 800df90:	0800df39 	.word	0x0800df39
 800df94:	0800df39 	.word	0x0800df39
 800df98:	0800df39 	.word	0x0800df39
 800df9c:	0800df39 	.word	0x0800df39
 800dfa0:	0800df39 	.word	0x0800df39
 800dfa4:	0800df39 	.word	0x0800df39
 800dfa8:	0800df39 	.word	0x0800df39
 800dfac:	0800df39 	.word	0x0800df39
 800dfb0:	0800df39 	.word	0x0800df39
 800dfb4:	0800df39 	.word	0x0800df39
 800dfb8:	0800df39 	.word	0x0800df39
 800dfbc:	0800df39 	.word	0x0800df39
 800dfc0:	0800df39 	.word	0x0800df39
 800dfc4:	0800df39 	.word	0x0800df39
 800dfc8:	0800df39 	.word	0x0800df39
 800dfcc:	0800df39 	.word	0x0800df39
 800dfd0:	0800df39 	.word	0x0800df39
 800dfd4:	0800df39 	.word	0x0800df39
 800dfd8:	0800e0fd 	.word	0x0800e0fd
 800dfdc:	0800e155 	.word	0x0800e155
 800dfe0:	0800e1c3 	.word	0x0800e1c3
 800dfe4:	0800e261 	.word	0x0800e261
 800dfe8:	0800df39 	.word	0x0800df39
 800dfec:	0800e2ad 	.word	0x0800e2ad
 800dff0:	0800e399 	.word	0x0800e399
 800dff4:	0800e473 	.word	0x0800e473
 800dff8:	0800e481 	.word	0x0800e481
 800dffc:	0800df39 	.word	0x0800df39
 800e000:	0800df39 	.word	0x0800df39
 800e004:	0800df39 	.word	0x0800df39
 800e008:	0800e4b1 	.word	0x0800e4b1
 800e00c:	0800df39 	.word	0x0800df39
 800e010:	0800df39 	.word	0x0800df39
 800e014:	0800e4c5 	.word	0x0800e4c5
 800e018:	0800df39 	.word	0x0800df39
 800e01c:	0800e517 	.word	0x0800e517
 800e020:	0800e62b 	.word	0x0800e62b
 800e024:	0800e63b 	.word	0x0800e63b
 800e028:	0800e663 	.word	0x0800e663
 800e02c:	0800e69d 	.word	0x0800e69d
 800e030:	0800e711 	.word	0x0800e711
 800e034:	0800e1bb 	.word	0x0800e1bb
 800e038:	0800e73d 	.word	0x0800e73d
 800e03c:	0800e805 	.word	0x0800e805
 800e040:	0800df39 	.word	0x0800df39
 800e044:	0800df39 	.word	0x0800df39
 800e048:	0800df39 	.word	0x0800df39
 800e04c:	0800df39 	.word	0x0800df39
 800e050:	0800df39 	.word	0x0800df39
 800e054:	0800df39 	.word	0x0800df39
 800e058:	0800e0c1 	.word	0x0800e0c1
 800e05c:	0800e12b 	.word	0x0800e12b
 800e060:	0800e181 	.word	0x0800e181
 800e064:	0800e23d 	.word	0x0800e23d
 800e068:	0800e23d 	.word	0x0800e23d
 800e06c:	0800df39 	.word	0x0800df39
 800e070:	0800e2ff 	.word	0x0800e2ff
 800e074:	0800e12b 	.word	0x0800e12b
 800e078:	0800df39 	.word	0x0800df39
 800e07c:	0800e4a3 	.word	0x0800e4a3
 800e080:	0800e473 	.word	0x0800e473
 800e084:	0800e481 	.word	0x0800e481
 800e088:	0800e4ab 	.word	0x0800e4ab
 800e08c:	0800e4b5 	.word	0x0800e4b5
 800e090:	0800df39 	.word	0x0800df39
 800e094:	0800e4c5 	.word	0x0800e4c5
 800e098:	0800df39 	.word	0x0800df39
 800e09c:	0800e1ab 	.word	0x0800e1ab
 800e0a0:	0800e529 	.word	0x0800e529
 800e0a4:	0800e62f 	.word	0x0800e62f
 800e0a8:	0800e649 	.word	0x0800e649
 800e0ac:	0800df39 	.word	0x0800df39
 800e0b0:	0800e703 	.word	0x0800e703
 800e0b4:	0800e1b3 	.word	0x0800e1b3
 800e0b8:	0800e721 	.word	0x0800e721
 800e0bc:	0800e78f 	.word	0x0800e78f
 800e0c0:	69b3      	ldr	r3, [r6, #24]
 800e0c2:	4aa9      	ldr	r2, [pc, #676]	; (800e368 <__strftime.isra.0+0x494>)
 800e0c4:	3318      	adds	r3, #24
 800e0c6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800e0ca:	4648      	mov	r0, r9
 800e0cc:	f7f2 f888 	bl	80001e0 <strlen>
 800e0d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e0d4:	4420      	add	r0, r4
 800e0d6:	1e6b      	subs	r3, r5, #1
 800e0d8:	42a0      	cmp	r0, r4
 800e0da:	d107      	bne.n	800e0ec <__strftime.isra.0+0x218>
 800e0dc:	f898 3000 	ldrb.w	r3, [r8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 83be 	beq.w	800e862 <__strftime.isra.0+0x98e>
 800e0e6:	f108 0201 	add.w	r2, r8, #1
 800e0ea:	e6fc      	b.n	800dee6 <__strftime.isra.0+0x12>
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	f67f af23 	bls.w	800df38 <__strftime.isra.0+0x64>
 800e0f2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e0f6:	553a      	strb	r2, [r7, r4]
 800e0f8:	3401      	adds	r4, #1
 800e0fa:	e7ed      	b.n	800e0d8 <__strftime.isra.0+0x204>
 800e0fc:	69b2      	ldr	r2, [r6, #24]
 800e0fe:	4b9a      	ldr	r3, [pc, #616]	; (800e368 <__strftime.isra.0+0x494>)
 800e100:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e104:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800e108:	4648      	mov	r0, r9
 800e10a:	f7f2 f869 	bl	80001e0 <strlen>
 800e10e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e112:	4420      	add	r0, r4
 800e114:	1e6b      	subs	r3, r5, #1
 800e116:	42a0      	cmp	r0, r4
 800e118:	d0e0      	beq.n	800e0dc <__strftime.isra.0+0x208>
 800e11a:	42a3      	cmp	r3, r4
 800e11c:	f67f af0c 	bls.w	800df38 <__strftime.isra.0+0x64>
 800e120:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e124:	553a      	strb	r2, [r7, r4]
 800e126:	3401      	adds	r4, #1
 800e128:	e7f5      	b.n	800e116 <__strftime.isra.0+0x242>
 800e12a:	4b8f      	ldr	r3, [pc, #572]	; (800e368 <__strftime.isra.0+0x494>)
 800e12c:	6932      	ldr	r2, [r6, #16]
 800e12e:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800e132:	4648      	mov	r0, r9
 800e134:	f7f2 f854 	bl	80001e0 <strlen>
 800e138:	f109 39ff 	add.w	r9, r9, #4294967295
 800e13c:	4420      	add	r0, r4
 800e13e:	1e6b      	subs	r3, r5, #1
 800e140:	42a0      	cmp	r0, r4
 800e142:	d0cb      	beq.n	800e0dc <__strftime.isra.0+0x208>
 800e144:	42a3      	cmp	r3, r4
 800e146:	f67f aef7 	bls.w	800df38 <__strftime.isra.0+0x64>
 800e14a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e14e:	553a      	strb	r2, [r7, r4]
 800e150:	3401      	adds	r4, #1
 800e152:	e7f5      	b.n	800e140 <__strftime.isra.0+0x26c>
 800e154:	6933      	ldr	r3, [r6, #16]
 800e156:	4a84      	ldr	r2, [pc, #528]	; (800e368 <__strftime.isra.0+0x494>)
 800e158:	330c      	adds	r3, #12
 800e15a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800e15e:	4648      	mov	r0, r9
 800e160:	f7f2 f83e 	bl	80001e0 <strlen>
 800e164:	f109 39ff 	add.w	r9, r9, #4294967295
 800e168:	4420      	add	r0, r4
 800e16a:	1e6b      	subs	r3, r5, #1
 800e16c:	42a0      	cmp	r0, r4
 800e16e:	d0b5      	beq.n	800e0dc <__strftime.isra.0+0x208>
 800e170:	42a3      	cmp	r3, r4
 800e172:	f67f aee1 	bls.w	800df38 <__strftime.isra.0+0x64>
 800e176:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e17a:	553a      	strb	r2, [r7, r4]
 800e17c:	3401      	adds	r4, #1
 800e17e:	e7f5      	b.n	800e16c <__strftime.isra.0+0x298>
 800e180:	4b79      	ldr	r3, [pc, #484]	; (800e368 <__strftime.isra.0+0x494>)
 800e182:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800e186:	4648      	mov	r0, r9
 800e188:	f7f2 f82a 	bl	80001e0 <strlen>
 800e18c:	f899 3000 	ldrb.w	r3, [r9]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d0a3      	beq.n	800e0dc <__strftime.isra.0+0x208>
 800e194:	4633      	mov	r3, r6
 800e196:	464a      	mov	r2, r9
 800e198:	1b29      	subs	r1, r5, r4
 800e19a:	1938      	adds	r0, r7, r4
 800e19c:	f7ff fe9a 	bl	800ded4 <__strftime.isra.0>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	f77f aec9 	ble.w	800df38 <__strftime.isra.0+0x64>
 800e1a6:	4404      	add	r4, r0
 800e1a8:	e798      	b.n	800e0dc <__strftime.isra.0+0x208>
 800e1aa:	4b6f      	ldr	r3, [pc, #444]	; (800e368 <__strftime.isra.0+0x494>)
 800e1ac:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800e1b0:	e7e9      	b.n	800e186 <__strftime.isra.0+0x2b2>
 800e1b2:	4b6d      	ldr	r3, [pc, #436]	; (800e368 <__strftime.isra.0+0x494>)
 800e1b4:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800e1b8:	e7e5      	b.n	800e186 <__strftime.isra.0+0x2b2>
 800e1ba:	4b6b      	ldr	r3, [pc, #428]	; (800e368 <__strftime.isra.0+0x494>)
 800e1bc:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800e1c0:	e7e1      	b.n	800e186 <__strftime.isra.0+0x2b2>
 800e1c2:	496a      	ldr	r1, [pc, #424]	; (800e36c <__strftime.isra.0+0x498>)
 800e1c4:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800e1c8:	458a      	cmp	sl, r1
 800e1ca:	bfac      	ite	ge
 800e1cc:	2100      	movge	r1, #0
 800e1ce:	2101      	movlt	r1, #1
 800e1d0:	f1ba 0f00 	cmp.w	sl, #0
 800e1d4:	db11      	blt.n	800e1fa <__strftime.isra.0+0x326>
 800e1d6:	2064      	movs	r0, #100	; 0x64
 800e1d8:	fb9a f0f0 	sdiv	r0, sl, r0
 800e1dc:	3013      	adds	r0, #19
 800e1de:	f1bb 0f00 	cmp.w	fp, #0
 800e1e2:	d014      	beq.n	800e20e <__strftime.isra.0+0x33a>
 800e1e4:	2863      	cmp	r0, #99	; 0x63
 800e1e6:	dd27      	ble.n	800e238 <__strftime.isra.0+0x364>
 800e1e8:	4b61      	ldr	r3, [pc, #388]	; (800e370 <__strftime.isra.0+0x49c>)
 800e1ea:	4a62      	ldr	r2, [pc, #392]	; (800e374 <__strftime.isra.0+0x4a0>)
 800e1ec:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800e1f0:	bf18      	it	ne
 800e1f2:	461a      	movne	r2, r3
 800e1f4:	f8df c198 	ldr.w	ip, [pc, #408]	; 800e390 <__strftime.isra.0+0x4bc>
 800e1f8:	e00c      	b.n	800e214 <__strftime.isra.0+0x340>
 800e1fa:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800e1fe:	9103      	str	r1, [sp, #12]
 800e200:	f000 fdde 	bl	800edc0 <abs>
 800e204:	2264      	movs	r2, #100	; 0x64
 800e206:	9903      	ldr	r1, [sp, #12]
 800e208:	fb90 f0f2 	sdiv	r0, r0, r2
 800e20c:	e7e7      	b.n	800e1de <__strftime.isra.0+0x30a>
 800e20e:	4a58      	ldr	r2, [pc, #352]	; (800e370 <__strftime.isra.0+0x49c>)
 800e210:	f8df c180 	ldr.w	ip, [pc, #384]	; 800e394 <__strftime.isra.0+0x4c0>
 800e214:	4b58      	ldr	r3, [pc, #352]	; (800e378 <__strftime.isra.0+0x4a4>)
 800e216:	9001      	str	r0, [sp, #4]
 800e218:	f1b9 0f02 	cmp.w	r9, #2
 800e21c:	bf2c      	ite	cs
 800e21e:	ebc1 0109 	rsbcs	r1, r1, r9
 800e222:	f1c1 0102 	rsbcc	r1, r1, #2
 800e226:	9100      	str	r1, [sp, #0]
 800e228:	4950      	ldr	r1, [pc, #320]	; (800e36c <__strftime.isra.0+0x498>)
 800e22a:	458a      	cmp	sl, r1
 800e22c:	bfa8      	it	ge
 800e22e:	4613      	movge	r3, r2
 800e230:	4662      	mov	r2, ip
 800e232:	1b29      	subs	r1, r5, r4
 800e234:	1938      	adds	r0, r7, r4
 800e236:	e028      	b.n	800e28a <__strftime.isra.0+0x3b6>
 800e238:	4a4d      	ldr	r2, [pc, #308]	; (800e370 <__strftime.isra.0+0x49c>)
 800e23a:	e7db      	b.n	800e1f4 <__strftime.isra.0+0x320>
 800e23c:	494f      	ldr	r1, [pc, #316]	; (800e37c <__strftime.isra.0+0x4a8>)
 800e23e:	4a50      	ldr	r2, [pc, #320]	; (800e380 <__strftime.isra.0+0x4ac>)
 800e240:	68f3      	ldr	r3, [r6, #12]
 800e242:	2864      	cmp	r0, #100	; 0x64
 800e244:	bf08      	it	eq
 800e246:	460a      	moveq	r2, r1
 800e248:	1b29      	subs	r1, r5, r4
 800e24a:	1938      	adds	r0, r7, r4
 800e24c:	f001 f90c 	bl	800f468 <sniprintf>
 800e250:	2800      	cmp	r0, #0
 800e252:	f6ff ae71 	blt.w	800df38 <__strftime.isra.0+0x64>
 800e256:	4404      	add	r4, r0
 800e258:	42a5      	cmp	r5, r4
 800e25a:	f63f af3f 	bhi.w	800e0dc <__strftime.isra.0+0x208>
 800e25e:	e66b      	b.n	800df38 <__strftime.isra.0+0x64>
 800e260:	6970      	ldr	r0, [r6, #20]
 800e262:	6933      	ldr	r3, [r6, #16]
 800e264:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800e268:	2800      	cmp	r0, #0
 800e26a:	eb07 0904 	add.w	r9, r7, r4
 800e26e:	eba5 0104 	sub.w	r1, r5, r4
 800e272:	f103 0301 	add.w	r3, r3, #1
 800e276:	db0b      	blt.n	800e290 <__strftime.isra.0+0x3bc>
 800e278:	2264      	movs	r2, #100	; 0x64
 800e27a:	fb90 fcf2 	sdiv	ip, r0, r2
 800e27e:	fb02 001c 	mls	r0, r2, ip, r0
 800e282:	4a40      	ldr	r2, [pc, #256]	; (800e384 <__strftime.isra.0+0x4b0>)
 800e284:	e9cd a000 	strd	sl, r0, [sp]
 800e288:	4648      	mov	r0, r9
 800e28a:	f001 f8ed 	bl	800f468 <sniprintf>
 800e28e:	e7df      	b.n	800e250 <__strftime.isra.0+0x37c>
 800e290:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e294:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800e298:	f000 fd92 	bl	800edc0 <abs>
 800e29c:	2264      	movs	r2, #100	; 0x64
 800e29e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800e2a2:	fb90 fcf2 	sdiv	ip, r0, r2
 800e2a6:	fb0c 0012 	mls	r0, ip, r2, r0
 800e2aa:	e7ea      	b.n	800e282 <__strftime.isra.0+0x3ae>
 800e2ac:	2225      	movs	r2, #37	; 0x25
 800e2ae:	f88d 2018 	strb.w	r2, [sp, #24]
 800e2b2:	f1bb 0f00 	cmp.w	fp, #0
 800e2b6:	d011      	beq.n	800e2dc <__strftime.isra.0+0x408>
 800e2b8:	f1b9 0f06 	cmp.w	r9, #6
 800e2bc:	bf38      	it	cc
 800e2be:	f04f 0906 	movcc.w	r9, #6
 800e2c2:	f1b9 0306 	subs.w	r3, r9, #6
 800e2c6:	f88d b019 	strb.w	fp, [sp, #25]
 800e2ca:	d10c      	bne.n	800e2e6 <__strftime.isra.0+0x412>
 800e2cc:	f10d 001a 	add.w	r0, sp, #26
 800e2d0:	492d      	ldr	r1, [pc, #180]	; (800e388 <__strftime.isra.0+0x4b4>)
 800e2d2:	f001 f929 	bl	800f528 <strcpy>
 800e2d6:	4633      	mov	r3, r6
 800e2d8:	aa06      	add	r2, sp, #24
 800e2da:	e75d      	b.n	800e198 <__strftime.isra.0+0x2c4>
 800e2dc:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800e2e0:	f04f 090a 	mov.w	r9, #10
 800e2e4:	e7ed      	b.n	800e2c2 <__strftime.isra.0+0x3ee>
 800e2e6:	4a29      	ldr	r2, [pc, #164]	; (800e38c <__strftime.isra.0+0x4b8>)
 800e2e8:	211e      	movs	r1, #30
 800e2ea:	f10d 001a 	add.w	r0, sp, #26
 800e2ee:	f001 f8bb 	bl	800f468 <sniprintf>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	ddea      	ble.n	800e2cc <__strftime.isra.0+0x3f8>
 800e2f6:	f10d 031a 	add.w	r3, sp, #26
 800e2fa:	4418      	add	r0, r3
 800e2fc:	e7e8      	b.n	800e2d0 <__strftime.isra.0+0x3fc>
 800e2fe:	4630      	mov	r0, r6
 800e300:	f7ff fd86 	bl	800de10 <iso_year_adjust>
 800e304:	4681      	mov	r9, r0
 800e306:	6970      	ldr	r0, [r6, #20]
 800e308:	2800      	cmp	r0, #0
 800e30a:	db11      	blt.n	800e330 <__strftime.isra.0+0x45c>
 800e30c:	2364      	movs	r3, #100	; 0x64
 800e30e:	fb90 f2f3 	sdiv	r2, r0, r3
 800e312:	fb03 0012 	mls	r0, r3, r2, r0
 800e316:	2264      	movs	r2, #100	; 0x64
 800e318:	4481      	add	r9, r0
 800e31a:	fb99 f3f2 	sdiv	r3, r9, r2
 800e31e:	fb02 9913 	mls	r9, r2, r3, r9
 800e322:	4491      	add	r9, r2
 800e324:	fbb9 f3f2 	udiv	r3, r9, r2
 800e328:	fb02 9313 	mls	r3, r2, r3, r9
 800e32c:	4a13      	ldr	r2, [pc, #76]	; (800e37c <__strftime.isra.0+0x4a8>)
 800e32e:	e78b      	b.n	800e248 <__strftime.isra.0+0x374>
 800e330:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e334:	f000 fd44 	bl	800edc0 <abs>
 800e338:	2364      	movs	r3, #100	; 0x64
 800e33a:	f1b9 0f00 	cmp.w	r9, #0
 800e33e:	fb90 f2f3 	sdiv	r2, r0, r3
 800e342:	fb02 0013 	mls	r0, r2, r3, r0
 800e346:	da07      	bge.n	800e358 <__strftime.isra.0+0x484>
 800e348:	6972      	ldr	r2, [r6, #20]
 800e34a:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800e34e:	429a      	cmp	r2, r3
 800e350:	bfb8      	it	lt
 800e352:	f04f 0901 	movlt.w	r9, #1
 800e356:	e7de      	b.n	800e316 <__strftime.isra.0+0x442>
 800e358:	d0dd      	beq.n	800e316 <__strftime.isra.0+0x442>
 800e35a:	6972      	ldr	r2, [r6, #20]
 800e35c:	4b03      	ldr	r3, [pc, #12]	; (800e36c <__strftime.isra.0+0x498>)
 800e35e:	429a      	cmp	r2, r3
 800e360:	bfb8      	it	lt
 800e362:	f04f 39ff 	movlt.w	r9, #4294967295
 800e366:	e7d6      	b.n	800e316 <__strftime.isra.0+0x442>
 800e368:	08010ad4 	.word	0x08010ad4
 800e36c:	fffff894 	.word	0xfffff894
 800e370:	08010d12 	.word	0x08010d12
 800e374:	0801095f 	.word	0x0801095f
 800e378:	08010da1 	.word	0x08010da1
 800e37c:	0801096f 	.word	0x0801096f
 800e380:	08010961 	.word	0x08010961
 800e384:	08010965 	.word	0x08010965
 800e388:	08010978 	.word	0x08010978
 800e38c:	08010974 	.word	0x08010974
 800e390:	08010957 	.word	0x08010957
 800e394:	08010950 	.word	0x08010950
 800e398:	6971      	ldr	r1, [r6, #20]
 800e39a:	4ab6      	ldr	r2, [pc, #728]	; (800e674 <__strftime.isra.0+0x7a0>)
 800e39c:	4291      	cmp	r1, r2
 800e39e:	bfac      	ite	ge
 800e3a0:	2300      	movge	r3, #0
 800e3a2:	2301      	movlt	r3, #1
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800e3aa:	f7ff fd31 	bl	800de10 <iso_year_adjust>
 800e3ae:	9904      	ldr	r1, [sp, #16]
 800e3b0:	2900      	cmp	r1, #0
 800e3b2:	4682      	mov	sl, r0
 800e3b4:	db2c      	blt.n	800e410 <__strftime.isra.0+0x53c>
 800e3b6:	2264      	movs	r2, #100	; 0x64
 800e3b8:	fb91 f2f2 	sdiv	r2, r1, r2
 800e3bc:	3213      	adds	r2, #19
 800e3be:	6970      	ldr	r0, [r6, #20]
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	db30      	blt.n	800e426 <__strftime.isra.0+0x552>
 800e3c4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e3c8:	fb90 fefc 	sdiv	lr, r0, ip
 800e3cc:	fb0c 001e 	mls	r0, ip, lr, r0
 800e3d0:	f1ba 0f00 	cmp.w	sl, #0
 800e3d4:	da36      	bge.n	800e444 <__strftime.isra.0+0x570>
 800e3d6:	6971      	ldr	r1, [r6, #20]
 800e3d8:	4ba7      	ldr	r3, [pc, #668]	; (800e678 <__strftime.isra.0+0x7a4>)
 800e3da:	4299      	cmp	r1, r3
 800e3dc:	db3d      	blt.n	800e45a <__strftime.isra.0+0x586>
 800e3de:	4482      	add	sl, r0
 800e3e0:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e3e4:	d13e      	bne.n	800e464 <__strftime.isra.0+0x590>
 800e3e6:	3a01      	subs	r2, #1
 800e3e8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800e3ec:	9b03      	ldr	r3, [sp, #12]
 800e3ee:	2064      	movs	r0, #100	; 0x64
 800e3f0:	fb00 aa02 	mla	sl, r0, r2, sl
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 81ad 	beq.w	800e754 <__strftime.isra.0+0x880>
 800e3fa:	222d      	movs	r2, #45	; 0x2d
 800e3fc:	f88d 2018 	strb.w	r2, [sp, #24]
 800e400:	f1b9 0f00 	cmp.w	r9, #0
 800e404:	d001      	beq.n	800e40a <__strftime.isra.0+0x536>
 800e406:	f109 39ff 	add.w	r9, r9, #4294967295
 800e40a:	f10d 0219 	add.w	r2, sp, #25
 800e40e:	e1ac      	b.n	800e76a <__strftime.isra.0+0x896>
 800e410:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800e414:	9104      	str	r1, [sp, #16]
 800e416:	f000 fcd3 	bl	800edc0 <abs>
 800e41a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e41e:	9904      	ldr	r1, [sp, #16]
 800e420:	fb90 f2fc 	sdiv	r2, r0, ip
 800e424:	e7cb      	b.n	800e3be <__strftime.isra.0+0x4ea>
 800e426:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e42a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e42e:	f000 fcc7 	bl	800edc0 <abs>
 800e432:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e436:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800e43a:	fb90 fefc 	sdiv	lr, r0, ip
 800e43e:	fb0e 001c 	mls	r0, lr, ip, r0
 800e442:	e7c5      	b.n	800e3d0 <__strftime.isra.0+0x4fc>
 800e444:	d0cb      	beq.n	800e3de <__strftime.isra.0+0x50a>
 800e446:	4b8b      	ldr	r3, [pc, #556]	; (800e674 <__strftime.isra.0+0x7a0>)
 800e448:	4299      	cmp	r1, r3
 800e44a:	bfb4      	ite	lt
 800e44c:	2301      	movlt	r3, #1
 800e44e:	2300      	movge	r3, #0
 800e450:	9303      	str	r3, [sp, #12]
 800e452:	bfb8      	it	lt
 800e454:	f04f 3aff 	movlt.w	sl, #4294967295
 800e458:	e7c1      	b.n	800e3de <__strftime.isra.0+0x50a>
 800e45a:	f04f 0a01 	mov.w	sl, #1
 800e45e:	f8cd a00c 	str.w	sl, [sp, #12]
 800e462:	e7bc      	b.n	800e3de <__strftime.isra.0+0x50a>
 800e464:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800e468:	bf04      	itt	eq
 800e46a:	3201      	addeq	r2, #1
 800e46c:	f04f 0a00 	moveq.w	sl, #0
 800e470:	e7bc      	b.n	800e3ec <__strftime.isra.0+0x518>
 800e472:	4982      	ldr	r1, [pc, #520]	; (800e67c <__strftime.isra.0+0x7a8>)
 800e474:	4a82      	ldr	r2, [pc, #520]	; (800e680 <__strftime.isra.0+0x7ac>)
 800e476:	68b3      	ldr	r3, [r6, #8]
 800e478:	286b      	cmp	r0, #107	; 0x6b
 800e47a:	bf08      	it	eq
 800e47c:	460a      	moveq	r2, r1
 800e47e:	e6e3      	b.n	800e248 <__strftime.isra.0+0x374>
 800e480:	68b3      	ldr	r3, [r6, #8]
 800e482:	b163      	cbz	r3, 800e49e <__strftime.isra.0+0x5ca>
 800e484:	2b0c      	cmp	r3, #12
 800e486:	d004      	beq.n	800e492 <__strftime.isra.0+0x5be>
 800e488:	210c      	movs	r1, #12
 800e48a:	fb93 f2f1 	sdiv	r2, r3, r1
 800e48e:	fb01 3312 	mls	r3, r1, r2, r3
 800e492:	497b      	ldr	r1, [pc, #492]	; (800e680 <__strftime.isra.0+0x7ac>)
 800e494:	4a79      	ldr	r2, [pc, #484]	; (800e67c <__strftime.isra.0+0x7a8>)
 800e496:	2849      	cmp	r0, #73	; 0x49
 800e498:	bf08      	it	eq
 800e49a:	460a      	moveq	r2, r1
 800e49c:	e6d4      	b.n	800e248 <__strftime.isra.0+0x374>
 800e49e:	230c      	movs	r3, #12
 800e4a0:	e7f7      	b.n	800e492 <__strftime.isra.0+0x5be>
 800e4a2:	69f3      	ldr	r3, [r6, #28]
 800e4a4:	4a77      	ldr	r2, [pc, #476]	; (800e684 <__strftime.isra.0+0x7b0>)
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	e6ce      	b.n	800e248 <__strftime.isra.0+0x374>
 800e4aa:	6933      	ldr	r3, [r6, #16]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	e73d      	b.n	800e32c <__strftime.isra.0+0x458>
 800e4b0:	6873      	ldr	r3, [r6, #4]
 800e4b2:	e73b      	b.n	800e32c <__strftime.isra.0+0x458>
 800e4b4:	1e6b      	subs	r3, r5, #1
 800e4b6:	429c      	cmp	r4, r3
 800e4b8:	f4bf ad3e 	bcs.w	800df38 <__strftime.isra.0+0x64>
 800e4bc:	230a      	movs	r3, #10
 800e4be:	553b      	strb	r3, [r7, r4]
 800e4c0:	3401      	adds	r4, #1
 800e4c2:	e60b      	b.n	800e0dc <__strftime.isra.0+0x208>
 800e4c4:	68b3      	ldr	r3, [r6, #8]
 800e4c6:	2b0b      	cmp	r3, #11
 800e4c8:	4b6f      	ldr	r3, [pc, #444]	; (800e688 <__strftime.isra.0+0x7b4>)
 800e4ca:	bfd4      	ite	le
 800e4cc:	2200      	movle	r2, #0
 800e4ce:	2201      	movgt	r2, #1
 800e4d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e4d4:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800e4d8:	4648      	mov	r0, r9
 800e4da:	f7f1 fe81 	bl	80001e0 <strlen>
 800e4de:	f109 32ff 	add.w	r2, r9, #4294967295
 800e4e2:	4420      	add	r0, r4
 800e4e4:	f105 3cff 	add.w	ip, r5, #4294967295
 800e4e8:	42a0      	cmp	r0, r4
 800e4ea:	f43f adf7 	beq.w	800e0dc <__strftime.isra.0+0x208>
 800e4ee:	45a4      	cmp	ip, r4
 800e4f0:	f67f ad22 	bls.w	800df38 <__strftime.isra.0+0x64>
 800e4f4:	f898 1000 	ldrb.w	r1, [r8]
 800e4f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e4fc:	2950      	cmp	r1, #80	; 0x50
 800e4fe:	d107      	bne.n	800e510 <__strftime.isra.0+0x63c>
 800e500:	4962      	ldr	r1, [pc, #392]	; (800e68c <__strftime.isra.0+0x7b8>)
 800e502:	5cc9      	ldrb	r1, [r1, r3]
 800e504:	f001 0103 	and.w	r1, r1, #3
 800e508:	2901      	cmp	r1, #1
 800e50a:	bf08      	it	eq
 800e50c:	3320      	addeq	r3, #32
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	553b      	strb	r3, [r7, r4]
 800e512:	3401      	adds	r4, #1
 800e514:	e7e8      	b.n	800e4e8 <__strftime.isra.0+0x614>
 800e516:	6873      	ldr	r3, [r6, #4]
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	4a5d      	ldr	r2, [pc, #372]	; (800e690 <__strftime.isra.0+0x7bc>)
 800e51c:	68b3      	ldr	r3, [r6, #8]
 800e51e:	1b29      	subs	r1, r5, r4
 800e520:	1938      	adds	r0, r7, r4
 800e522:	f000 ffa1 	bl	800f468 <sniprintf>
 800e526:	e693      	b.n	800e250 <__strftime.isra.0+0x37c>
 800e528:	6a33      	ldr	r3, [r6, #32]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	db7a      	blt.n	800e624 <__strftime.isra.0+0x750>
 800e52e:	f000 fab5 	bl	800ea9c <__tz_lock>
 800e532:	9b02      	ldr	r3, [sp, #8]
 800e534:	b90b      	cbnz	r3, 800e53a <__strftime.isra.0+0x666>
 800e536:	f000 fabd 	bl	800eab4 <_tzset_unlocked>
 800e53a:	f000 fc89 	bl	800ee50 <__gettzinfo>
 800e53e:	6a33      	ldr	r3, [r6, #32]
 800e540:	2b00      	cmp	r3, #0
 800e542:	bfd4      	ite	le
 800e544:	2200      	movle	r2, #0
 800e546:	2201      	movgt	r2, #1
 800e548:	2328      	movs	r3, #40	; 0x28
 800e54a:	fb02 3303 	mla	r3, r2, r3, r3
 800e54e:	58c3      	ldr	r3, [r0, r3]
 800e550:	f1c3 0900 	rsb	r9, r3, #0
 800e554:	f000 faa8 	bl	800eaa8 <__tz_unlock>
 800e558:	2301      	movs	r3, #1
 800e55a:	9302      	str	r3, [sp, #8]
 800e55c:	6972      	ldr	r2, [r6, #20]
 800e55e:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800e562:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800e566:	f16c 0c00 	sbc.w	ip, ip, #0
 800e56a:	f1bc 0f00 	cmp.w	ip, #0
 800e56e:	eba5 0104 	sub.w	r1, r5, r4
 800e572:	eb07 0004 	add.w	r0, r7, r4
 800e576:	da02      	bge.n	800e57e <__strftime.isra.0+0x6aa>
 800e578:	3303      	adds	r3, #3
 800e57a:	f14c 0c00 	adc.w	ip, ip, #0
 800e57e:	089b      	lsrs	r3, r3, #2
 800e580:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800e584:	f102 3aff 	add.w	sl, r2, #4294967295
 800e588:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800e58c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800e590:	fb9a fefe 	sdiv	lr, sl, lr
 800e594:	ebb3 030e 	subs.w	r3, r3, lr
 800e598:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800e59c:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800e5a0:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800e5a4:	fb9a fefe 	sdiv	lr, sl, lr
 800e5a8:	eb13 030e 	adds.w	r3, r3, lr
 800e5ac:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800e5b0:	3a46      	subs	r2, #70	; 0x46
 800e5b2:	f240 1c6d 	movw	ip, #365	; 0x16d
 800e5b6:	fb0c f202 	mul.w	r2, ip, r2
 800e5ba:	189b      	adds	r3, r3, r2
 800e5bc:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800e5c0:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800e5c4:	f04f 0c18 	mov.w	ip, #24
 800e5c8:	eb13 030e 	adds.w	r3, r3, lr
 800e5cc:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e5d0:	fba3 3e0c 	umull	r3, lr, r3, ip
 800e5d4:	fb0c e202 	mla	r2, ip, r2, lr
 800e5d8:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800e5dc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800e5e0:	eb13 030e 	adds.w	r3, r3, lr
 800e5e4:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800e5e8:	fba3 320c 	umull	r3, r2, r3, ip
 800e5ec:	fb0c 220e 	mla	r2, ip, lr, r2
 800e5f0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800e5f4:	eb13 030e 	adds.w	r3, r3, lr
 800e5f8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e5fc:	fba3 3e0c 	umull	r3, lr, r3, ip
 800e600:	fb0c e202 	mla	r2, ip, r2, lr
 800e604:	f8d6 e000 	ldr.w	lr, [r6]
 800e608:	eb13 030e 	adds.w	r3, r3, lr
 800e60c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e610:	ebb3 0309 	subs.w	r3, r3, r9
 800e614:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800e618:	e9cd 3200 	strd	r3, r2, [sp]
 800e61c:	4a1d      	ldr	r2, [pc, #116]	; (800e694 <__strftime.isra.0+0x7c0>)
 800e61e:	f000 ff23 	bl	800f468 <sniprintf>
 800e622:	e615      	b.n	800e250 <__strftime.isra.0+0x37c>
 800e624:	f04f 0900 	mov.w	r9, #0
 800e628:	e798      	b.n	800e55c <__strftime.isra.0+0x688>
 800e62a:	6833      	ldr	r3, [r6, #0]
 800e62c:	e67e      	b.n	800e32c <__strftime.isra.0+0x458>
 800e62e:	1e6b      	subs	r3, r5, #1
 800e630:	429c      	cmp	r4, r3
 800e632:	f4bf ac81 	bcs.w	800df38 <__strftime.isra.0+0x64>
 800e636:	2309      	movs	r3, #9
 800e638:	e741      	b.n	800e4be <__strftime.isra.0+0x5ea>
 800e63a:	6833      	ldr	r3, [r6, #0]
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	6873      	ldr	r3, [r6, #4]
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	4a15      	ldr	r2, [pc, #84]	; (800e698 <__strftime.isra.0+0x7c4>)
 800e644:	68b3      	ldr	r3, [r6, #8]
 800e646:	e5f4      	b.n	800e232 <__strftime.isra.0+0x35e>
 800e648:	1e6b      	subs	r3, r5, #1
 800e64a:	429c      	cmp	r4, r3
 800e64c:	f4bf ac74 	bcs.w	800df38 <__strftime.isra.0+0x64>
 800e650:	69b3      	ldr	r3, [r6, #24]
 800e652:	1c62      	adds	r2, r4, #1
 800e654:	b91b      	cbnz	r3, 800e65e <__strftime.isra.0+0x78a>
 800e656:	2337      	movs	r3, #55	; 0x37
 800e658:	553b      	strb	r3, [r7, r4]
 800e65a:	4614      	mov	r4, r2
 800e65c:	e53e      	b.n	800e0dc <__strftime.isra.0+0x208>
 800e65e:	3330      	adds	r3, #48	; 0x30
 800e660:	e7fa      	b.n	800e658 <__strftime.isra.0+0x784>
 800e662:	69f3      	ldr	r3, [r6, #28]
 800e664:	69b2      	ldr	r2, [r6, #24]
 800e666:	3307      	adds	r3, #7
 800e668:	1a9b      	subs	r3, r3, r2
 800e66a:	2207      	movs	r2, #7
 800e66c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e670:	e65c      	b.n	800e32c <__strftime.isra.0+0x458>
 800e672:	bf00      	nop
 800e674:	fffff894 	.word	0xfffff894
 800e678:	fffff895 	.word	0xfffff895
 800e67c:	08010961 	.word	0x08010961
 800e680:	0801096f 	.word	0x0801096f
 800e684:	08010984 	.word	0x08010984
 800e688:	08010ad4 	.word	0x08010ad4
 800e68c:	08010c0d 	.word	0x08010c0d
 800e690:	08010993 	.word	0x08010993
 800e694:	08010989 	.word	0x08010989
 800e698:	0801098e 	.word	0x0801098e
 800e69c:	4630      	mov	r0, r6
 800e69e:	f7ff fbb7 	bl	800de10 <iso_year_adjust>
 800e6a2:	69b2      	ldr	r2, [r6, #24]
 800e6a4:	b132      	cbz	r2, 800e6b4 <__strftime.isra.0+0x7e0>
 800e6a6:	3a01      	subs	r2, #1
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	dc28      	bgt.n	800e6fe <__strftime.isra.0+0x82a>
 800e6ac:	69f3      	ldr	r3, [r6, #28]
 800e6ae:	d103      	bne.n	800e6b8 <__strftime.isra.0+0x7e4>
 800e6b0:	330a      	adds	r3, #10
 800e6b2:	e7d9      	b.n	800e668 <__strftime.isra.0+0x794>
 800e6b4:	2206      	movs	r2, #6
 800e6b6:	e7f7      	b.n	800e6a8 <__strftime.isra.0+0x7d4>
 800e6b8:	6971      	ldr	r1, [r6, #20]
 800e6ba:	2900      	cmp	r1, #0
 800e6bc:	eba2 0203 	sub.w	r2, r2, r3
 800e6c0:	f240 736b 	movw	r3, #1899	; 0x76b
 800e6c4:	bfa8      	it	ge
 800e6c6:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800e6ca:	440b      	add	r3, r1
 800e6cc:	0799      	lsls	r1, r3, #30
 800e6ce:	d105      	bne.n	800e6dc <__strftime.isra.0+0x808>
 800e6d0:	2064      	movs	r0, #100	; 0x64
 800e6d2:	fb93 f1f0 	sdiv	r1, r3, r0
 800e6d6:	fb00 3111 	mls	r1, r0, r1, r3
 800e6da:	b971      	cbnz	r1, 800e6fa <__strftime.isra.0+0x826>
 800e6dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800e6e0:	fb93 f0f1 	sdiv	r0, r3, r1
 800e6e4:	fb01 3310 	mls	r3, r1, r0, r3
 800e6e8:	fab3 f383 	clz	r3, r3
 800e6ec:	095b      	lsrs	r3, r3, #5
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	2b05      	cmp	r3, #5
 800e6f2:	bfb4      	ite	lt
 800e6f4:	2335      	movlt	r3, #53	; 0x35
 800e6f6:	2334      	movge	r3, #52	; 0x34
 800e6f8:	e618      	b.n	800e32c <__strftime.isra.0+0x458>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e7f7      	b.n	800e6ee <__strftime.isra.0+0x81a>
 800e6fe:	2301      	movs	r3, #1
 800e700:	e614      	b.n	800e32c <__strftime.isra.0+0x458>
 800e702:	1e6b      	subs	r3, r5, #1
 800e704:	429c      	cmp	r4, r3
 800e706:	f4bf ac17 	bcs.w	800df38 <__strftime.isra.0+0x64>
 800e70a:	69b3      	ldr	r3, [r6, #24]
 800e70c:	3330      	adds	r3, #48	; 0x30
 800e70e:	e6d6      	b.n	800e4be <__strftime.isra.0+0x5ea>
 800e710:	69b2      	ldr	r2, [r6, #24]
 800e712:	b11a      	cbz	r2, 800e71c <__strftime.isra.0+0x848>
 800e714:	3a01      	subs	r2, #1
 800e716:	69f3      	ldr	r3, [r6, #28]
 800e718:	3307      	adds	r3, #7
 800e71a:	e7a5      	b.n	800e668 <__strftime.isra.0+0x794>
 800e71c:	2206      	movs	r2, #6
 800e71e:	e7fa      	b.n	800e716 <__strftime.isra.0+0x842>
 800e720:	6970      	ldr	r0, [r6, #20]
 800e722:	2800      	cmp	r0, #0
 800e724:	db05      	blt.n	800e732 <__strftime.isra.0+0x85e>
 800e726:	2364      	movs	r3, #100	; 0x64
 800e728:	fb90 f2f3 	sdiv	r2, r0, r3
 800e72c:	fb02 0313 	mls	r3, r2, r3, r0
 800e730:	e5fc      	b.n	800e32c <__strftime.isra.0+0x458>
 800e732:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e736:	f000 fb43 	bl	800edc0 <abs>
 800e73a:	e7f4      	b.n	800e726 <__strftime.isra.0+0x852>
 800e73c:	6972      	ldr	r2, [r6, #20]
 800e73e:	494c      	ldr	r1, [pc, #304]	; (800e870 <__strftime.isra.0+0x99c>)
 800e740:	428a      	cmp	r2, r1
 800e742:	da05      	bge.n	800e750 <__strftime.isra.0+0x87c>
 800e744:	202d      	movs	r0, #45	; 0x2d
 800e746:	f88d 0018 	strb.w	r0, [sp, #24]
 800e74a:	eba1 0a02 	sub.w	sl, r1, r2
 800e74e:	e657      	b.n	800e400 <__strftime.isra.0+0x52c>
 800e750:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800e754:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800e758:	d106      	bne.n	800e768 <__strftime.isra.0+0x894>
 800e75a:	f242 720f 	movw	r2, #9999	; 0x270f
 800e75e:	4592      	cmp	sl, r2
 800e760:	d902      	bls.n	800e768 <__strftime.isra.0+0x894>
 800e762:	f88d b018 	strb.w	fp, [sp, #24]
 800e766:	e64b      	b.n	800e400 <__strftime.isra.0+0x52c>
 800e768:	aa06      	add	r2, sp, #24
 800e76a:	2125      	movs	r1, #37	; 0x25
 800e76c:	7011      	strb	r1, [r2, #0]
 800e76e:	f1bb 0f00 	cmp.w	fp, #0
 800e772:	d108      	bne.n	800e786 <__strftime.isra.0+0x8b2>
 800e774:	1c50      	adds	r0, r2, #1
 800e776:	493f      	ldr	r1, [pc, #252]	; (800e874 <__strftime.isra.0+0x9a0>)
 800e778:	f000 fed6 	bl	800f528 <strcpy>
 800e77c:	f8cd a000 	str.w	sl, [sp]
 800e780:	464b      	mov	r3, r9
 800e782:	aa06      	add	r2, sp, #24
 800e784:	e6cb      	b.n	800e51e <__strftime.isra.0+0x64a>
 800e786:	2330      	movs	r3, #48	; 0x30
 800e788:	1c90      	adds	r0, r2, #2
 800e78a:	7053      	strb	r3, [r2, #1]
 800e78c:	e7f3      	b.n	800e776 <__strftime.isra.0+0x8a2>
 800e78e:	6a33      	ldr	r3, [r6, #32]
 800e790:	2b00      	cmp	r3, #0
 800e792:	f6ff aca3 	blt.w	800e0dc <__strftime.isra.0+0x208>
 800e796:	f000 f981 	bl	800ea9c <__tz_lock>
 800e79a:	9b02      	ldr	r3, [sp, #8]
 800e79c:	b90b      	cbnz	r3, 800e7a2 <__strftime.isra.0+0x8ce>
 800e79e:	f000 f989 	bl	800eab4 <_tzset_unlocked>
 800e7a2:	f000 fb55 	bl	800ee50 <__gettzinfo>
 800e7a6:	6a33      	ldr	r3, [r6, #32]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	bfd4      	ite	le
 800e7ac:	2200      	movle	r2, #0
 800e7ae:	2201      	movgt	r2, #1
 800e7b0:	2328      	movs	r3, #40	; 0x28
 800e7b2:	fb02 3303 	mla	r3, r2, r3, r3
 800e7b6:	eb07 0a04 	add.w	sl, r7, r4
 800e7ba:	58c3      	ldr	r3, [r0, r3]
 800e7bc:	f1c3 0900 	rsb	r9, r3, #0
 800e7c0:	f000 f972 	bl	800eaa8 <__tz_unlock>
 800e7c4:	233c      	movs	r3, #60	; 0x3c
 800e7c6:	fb99 f0f3 	sdiv	r0, r9, r3
 800e7ca:	f000 fb45 	bl	800ee58 <labs>
 800e7ce:	233c      	movs	r3, #60	; 0x3c
 800e7d0:	eba5 0b04 	sub.w	fp, r5, r4
 800e7d4:	fb90 f2f3 	sdiv	r2, r0, r3
 800e7d8:	fb02 0013 	mls	r0, r2, r3, r0
 800e7dc:	9000      	str	r0, [sp, #0]
 800e7de:	4a26      	ldr	r2, [pc, #152]	; (800e878 <__strftime.isra.0+0x9a4>)
 800e7e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e7e4:	4659      	mov	r1, fp
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	fb99 f3f3 	sdiv	r3, r9, r3
 800e7ec:	f000 fe3c 	bl	800f468 <sniprintf>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	f6ff aba1 	blt.w	800df38 <__strftime.isra.0+0x64>
 800e7f6:	4404      	add	r4, r0
 800e7f8:	42a5      	cmp	r5, r4
 800e7fa:	f67f ab9d 	bls.w	800df38 <__strftime.isra.0+0x64>
 800e7fe:	2301      	movs	r3, #1
 800e800:	9302      	str	r3, [sp, #8]
 800e802:	e46b      	b.n	800e0dc <__strftime.isra.0+0x208>
 800e804:	6a33      	ldr	r3, [r6, #32]
 800e806:	2b00      	cmp	r3, #0
 800e808:	f6ff ac68 	blt.w	800e0dc <__strftime.isra.0+0x208>
 800e80c:	f000 f946 	bl	800ea9c <__tz_lock>
 800e810:	9b02      	ldr	r3, [sp, #8]
 800e812:	b90b      	cbnz	r3, 800e818 <__strftime.isra.0+0x944>
 800e814:	f000 f94e 	bl	800eab4 <_tzset_unlocked>
 800e818:	6a33      	ldr	r3, [r6, #32]
 800e81a:	4a18      	ldr	r2, [pc, #96]	; (800e87c <__strftime.isra.0+0x9a8>)
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bfd4      	ite	le
 800e820:	2300      	movle	r3, #0
 800e822:	2301      	movgt	r3, #1
 800e824:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800e828:	4648      	mov	r0, r9
 800e82a:	f7f1 fcd9 	bl	80001e0 <strlen>
 800e82e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e832:	4420      	add	r0, r4
 800e834:	1e6b      	subs	r3, r5, #1
 800e836:	42a0      	cmp	r0, r4
 800e838:	d102      	bne.n	800e840 <__strftime.isra.0+0x96c>
 800e83a:	f000 f935 	bl	800eaa8 <__tz_unlock>
 800e83e:	e7de      	b.n	800e7fe <__strftime.isra.0+0x92a>
 800e840:	42a3      	cmp	r3, r4
 800e842:	d904      	bls.n	800e84e <__strftime.isra.0+0x97a>
 800e844:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e848:	553a      	strb	r2, [r7, r4]
 800e84a:	3401      	adds	r4, #1
 800e84c:	e7f3      	b.n	800e836 <__strftime.isra.0+0x962>
 800e84e:	f000 f92b 	bl	800eaa8 <__tz_unlock>
 800e852:	f7ff bb71 	b.w	800df38 <__strftime.isra.0+0x64>
 800e856:	1e6b      	subs	r3, r5, #1
 800e858:	429c      	cmp	r4, r3
 800e85a:	f4bf ab6d 	bcs.w	800df38 <__strftime.isra.0+0x64>
 800e85e:	2325      	movs	r3, #37	; 0x25
 800e860:	e62d      	b.n	800e4be <__strftime.isra.0+0x5ea>
 800e862:	b10d      	cbz	r5, 800e868 <__strftime.isra.0+0x994>
 800e864:	2300      	movs	r3, #0
 800e866:	553b      	strb	r3, [r7, r4]
 800e868:	4620      	mov	r0, r4
 800e86a:	b00f      	add	sp, #60	; 0x3c
 800e86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e870:	fffff894 	.word	0xfffff894
 800e874:	08010980 	.word	0x08010980
 800e878:	0801099d 	.word	0x0801099d
 800e87c:	20000168 	.word	0x20000168

0800e880 <strftime>:
 800e880:	f7ff bb28 	b.w	800ded4 <__strftime.isra.0>

0800e884 <_strtol_l.constprop.0>:
 800e884:	2b01      	cmp	r3, #1
 800e886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e88a:	d001      	beq.n	800e890 <_strtol_l.constprop.0+0xc>
 800e88c:	2b24      	cmp	r3, #36	; 0x24
 800e88e:	d906      	bls.n	800e89e <_strtol_l.constprop.0+0x1a>
 800e890:	f7ff f968 	bl	800db64 <__errno>
 800e894:	2316      	movs	r3, #22
 800e896:	6003      	str	r3, [r0, #0]
 800e898:	2000      	movs	r0, #0
 800e89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e89e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e984 <_strtol_l.constprop.0+0x100>
 800e8a2:	460d      	mov	r5, r1
 800e8a4:	462e      	mov	r6, r5
 800e8a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e8ae:	f017 0708 	ands.w	r7, r7, #8
 800e8b2:	d1f7      	bne.n	800e8a4 <_strtol_l.constprop.0+0x20>
 800e8b4:	2c2d      	cmp	r4, #45	; 0x2d
 800e8b6:	d132      	bne.n	800e91e <_strtol_l.constprop.0+0x9a>
 800e8b8:	782c      	ldrb	r4, [r5, #0]
 800e8ba:	2701      	movs	r7, #1
 800e8bc:	1cb5      	adds	r5, r6, #2
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d05b      	beq.n	800e97a <_strtol_l.constprop.0+0xf6>
 800e8c2:	2b10      	cmp	r3, #16
 800e8c4:	d109      	bne.n	800e8da <_strtol_l.constprop.0+0x56>
 800e8c6:	2c30      	cmp	r4, #48	; 0x30
 800e8c8:	d107      	bne.n	800e8da <_strtol_l.constprop.0+0x56>
 800e8ca:	782c      	ldrb	r4, [r5, #0]
 800e8cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e8d0:	2c58      	cmp	r4, #88	; 0x58
 800e8d2:	d14d      	bne.n	800e970 <_strtol_l.constprop.0+0xec>
 800e8d4:	786c      	ldrb	r4, [r5, #1]
 800e8d6:	2310      	movs	r3, #16
 800e8d8:	3502      	adds	r5, #2
 800e8da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e8de:	f108 38ff 	add.w	r8, r8, #4294967295
 800e8e2:	f04f 0c00 	mov.w	ip, #0
 800e8e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e8ea:	4666      	mov	r6, ip
 800e8ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800e8f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e8f4:	f1be 0f09 	cmp.w	lr, #9
 800e8f8:	d816      	bhi.n	800e928 <_strtol_l.constprop.0+0xa4>
 800e8fa:	4674      	mov	r4, lr
 800e8fc:	42a3      	cmp	r3, r4
 800e8fe:	dd24      	ble.n	800e94a <_strtol_l.constprop.0+0xc6>
 800e900:	f1bc 0f00 	cmp.w	ip, #0
 800e904:	db1e      	blt.n	800e944 <_strtol_l.constprop.0+0xc0>
 800e906:	45b1      	cmp	r9, r6
 800e908:	d31c      	bcc.n	800e944 <_strtol_l.constprop.0+0xc0>
 800e90a:	d101      	bne.n	800e910 <_strtol_l.constprop.0+0x8c>
 800e90c:	45a2      	cmp	sl, r4
 800e90e:	db19      	blt.n	800e944 <_strtol_l.constprop.0+0xc0>
 800e910:	fb06 4603 	mla	r6, r6, r3, r4
 800e914:	f04f 0c01 	mov.w	ip, #1
 800e918:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e91c:	e7e8      	b.n	800e8f0 <_strtol_l.constprop.0+0x6c>
 800e91e:	2c2b      	cmp	r4, #43	; 0x2b
 800e920:	bf04      	itt	eq
 800e922:	782c      	ldrbeq	r4, [r5, #0]
 800e924:	1cb5      	addeq	r5, r6, #2
 800e926:	e7ca      	b.n	800e8be <_strtol_l.constprop.0+0x3a>
 800e928:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e92c:	f1be 0f19 	cmp.w	lr, #25
 800e930:	d801      	bhi.n	800e936 <_strtol_l.constprop.0+0xb2>
 800e932:	3c37      	subs	r4, #55	; 0x37
 800e934:	e7e2      	b.n	800e8fc <_strtol_l.constprop.0+0x78>
 800e936:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e93a:	f1be 0f19 	cmp.w	lr, #25
 800e93e:	d804      	bhi.n	800e94a <_strtol_l.constprop.0+0xc6>
 800e940:	3c57      	subs	r4, #87	; 0x57
 800e942:	e7db      	b.n	800e8fc <_strtol_l.constprop.0+0x78>
 800e944:	f04f 3cff 	mov.w	ip, #4294967295
 800e948:	e7e6      	b.n	800e918 <_strtol_l.constprop.0+0x94>
 800e94a:	f1bc 0f00 	cmp.w	ip, #0
 800e94e:	da05      	bge.n	800e95c <_strtol_l.constprop.0+0xd8>
 800e950:	2322      	movs	r3, #34	; 0x22
 800e952:	6003      	str	r3, [r0, #0]
 800e954:	4646      	mov	r6, r8
 800e956:	b942      	cbnz	r2, 800e96a <_strtol_l.constprop.0+0xe6>
 800e958:	4630      	mov	r0, r6
 800e95a:	e79e      	b.n	800e89a <_strtol_l.constprop.0+0x16>
 800e95c:	b107      	cbz	r7, 800e960 <_strtol_l.constprop.0+0xdc>
 800e95e:	4276      	negs	r6, r6
 800e960:	2a00      	cmp	r2, #0
 800e962:	d0f9      	beq.n	800e958 <_strtol_l.constprop.0+0xd4>
 800e964:	f1bc 0f00 	cmp.w	ip, #0
 800e968:	d000      	beq.n	800e96c <_strtol_l.constprop.0+0xe8>
 800e96a:	1e69      	subs	r1, r5, #1
 800e96c:	6011      	str	r1, [r2, #0]
 800e96e:	e7f3      	b.n	800e958 <_strtol_l.constprop.0+0xd4>
 800e970:	2430      	movs	r4, #48	; 0x30
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1b1      	bne.n	800e8da <_strtol_l.constprop.0+0x56>
 800e976:	2308      	movs	r3, #8
 800e978:	e7af      	b.n	800e8da <_strtol_l.constprop.0+0x56>
 800e97a:	2c30      	cmp	r4, #48	; 0x30
 800e97c:	d0a5      	beq.n	800e8ca <_strtol_l.constprop.0+0x46>
 800e97e:	230a      	movs	r3, #10
 800e980:	e7ab      	b.n	800e8da <_strtol_l.constprop.0+0x56>
 800e982:	bf00      	nop
 800e984:	08010c0d 	.word	0x08010c0d

0800e988 <_strtol_r>:
 800e988:	f7ff bf7c 	b.w	800e884 <_strtol_l.constprop.0>

0800e98c <strtol>:
 800e98c:	4613      	mov	r3, r2
 800e98e:	460a      	mov	r2, r1
 800e990:	4601      	mov	r1, r0
 800e992:	4802      	ldr	r0, [pc, #8]	; (800e99c <strtol+0x10>)
 800e994:	6800      	ldr	r0, [r0, #0]
 800e996:	f7ff bf75 	b.w	800e884 <_strtol_l.constprop.0>
 800e99a:	bf00      	nop
 800e99c:	20000104 	.word	0x20000104

0800e9a0 <_strtoul_l.constprop.0>:
 800e9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9a4:	4f36      	ldr	r7, [pc, #216]	; (800ea80 <_strtoul_l.constprop.0+0xe0>)
 800e9a6:	4686      	mov	lr, r0
 800e9a8:	460d      	mov	r5, r1
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9b0:	5de6      	ldrb	r6, [r4, r7]
 800e9b2:	f016 0608 	ands.w	r6, r6, #8
 800e9b6:	d1f8      	bne.n	800e9aa <_strtoul_l.constprop.0+0xa>
 800e9b8:	2c2d      	cmp	r4, #45	; 0x2d
 800e9ba:	d12f      	bne.n	800ea1c <_strtoul_l.constprop.0+0x7c>
 800e9bc:	782c      	ldrb	r4, [r5, #0]
 800e9be:	2601      	movs	r6, #1
 800e9c0:	1c85      	adds	r5, r0, #2
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d057      	beq.n	800ea76 <_strtoul_l.constprop.0+0xd6>
 800e9c6:	2b10      	cmp	r3, #16
 800e9c8:	d109      	bne.n	800e9de <_strtoul_l.constprop.0+0x3e>
 800e9ca:	2c30      	cmp	r4, #48	; 0x30
 800e9cc:	d107      	bne.n	800e9de <_strtoul_l.constprop.0+0x3e>
 800e9ce:	7828      	ldrb	r0, [r5, #0]
 800e9d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e9d4:	2858      	cmp	r0, #88	; 0x58
 800e9d6:	d149      	bne.n	800ea6c <_strtoul_l.constprop.0+0xcc>
 800e9d8:	786c      	ldrb	r4, [r5, #1]
 800e9da:	2310      	movs	r3, #16
 800e9dc:	3502      	adds	r5, #2
 800e9de:	f04f 38ff 	mov.w	r8, #4294967295
 800e9e2:	2700      	movs	r7, #0
 800e9e4:	fbb8 f8f3 	udiv	r8, r8, r3
 800e9e8:	fb03 f908 	mul.w	r9, r3, r8
 800e9ec:	ea6f 0909 	mvn.w	r9, r9
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e9f6:	f1bc 0f09 	cmp.w	ip, #9
 800e9fa:	d814      	bhi.n	800ea26 <_strtoul_l.constprop.0+0x86>
 800e9fc:	4664      	mov	r4, ip
 800e9fe:	42a3      	cmp	r3, r4
 800ea00:	dd22      	ble.n	800ea48 <_strtoul_l.constprop.0+0xa8>
 800ea02:	2f00      	cmp	r7, #0
 800ea04:	db1d      	blt.n	800ea42 <_strtoul_l.constprop.0+0xa2>
 800ea06:	4580      	cmp	r8, r0
 800ea08:	d31b      	bcc.n	800ea42 <_strtoul_l.constprop.0+0xa2>
 800ea0a:	d101      	bne.n	800ea10 <_strtoul_l.constprop.0+0x70>
 800ea0c:	45a1      	cmp	r9, r4
 800ea0e:	db18      	blt.n	800ea42 <_strtoul_l.constprop.0+0xa2>
 800ea10:	fb00 4003 	mla	r0, r0, r3, r4
 800ea14:	2701      	movs	r7, #1
 800ea16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea1a:	e7ea      	b.n	800e9f2 <_strtoul_l.constprop.0+0x52>
 800ea1c:	2c2b      	cmp	r4, #43	; 0x2b
 800ea1e:	bf04      	itt	eq
 800ea20:	782c      	ldrbeq	r4, [r5, #0]
 800ea22:	1c85      	addeq	r5, r0, #2
 800ea24:	e7cd      	b.n	800e9c2 <_strtoul_l.constprop.0+0x22>
 800ea26:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ea2a:	f1bc 0f19 	cmp.w	ip, #25
 800ea2e:	d801      	bhi.n	800ea34 <_strtoul_l.constprop.0+0x94>
 800ea30:	3c37      	subs	r4, #55	; 0x37
 800ea32:	e7e4      	b.n	800e9fe <_strtoul_l.constprop.0+0x5e>
 800ea34:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ea38:	f1bc 0f19 	cmp.w	ip, #25
 800ea3c:	d804      	bhi.n	800ea48 <_strtoul_l.constprop.0+0xa8>
 800ea3e:	3c57      	subs	r4, #87	; 0x57
 800ea40:	e7dd      	b.n	800e9fe <_strtoul_l.constprop.0+0x5e>
 800ea42:	f04f 37ff 	mov.w	r7, #4294967295
 800ea46:	e7e6      	b.n	800ea16 <_strtoul_l.constprop.0+0x76>
 800ea48:	2f00      	cmp	r7, #0
 800ea4a:	da07      	bge.n	800ea5c <_strtoul_l.constprop.0+0xbc>
 800ea4c:	2322      	movs	r3, #34	; 0x22
 800ea4e:	f8ce 3000 	str.w	r3, [lr]
 800ea52:	f04f 30ff 	mov.w	r0, #4294967295
 800ea56:	b932      	cbnz	r2, 800ea66 <_strtoul_l.constprop.0+0xc6>
 800ea58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea5c:	b106      	cbz	r6, 800ea60 <_strtoul_l.constprop.0+0xc0>
 800ea5e:	4240      	negs	r0, r0
 800ea60:	2a00      	cmp	r2, #0
 800ea62:	d0f9      	beq.n	800ea58 <_strtoul_l.constprop.0+0xb8>
 800ea64:	b107      	cbz	r7, 800ea68 <_strtoul_l.constprop.0+0xc8>
 800ea66:	1e69      	subs	r1, r5, #1
 800ea68:	6011      	str	r1, [r2, #0]
 800ea6a:	e7f5      	b.n	800ea58 <_strtoul_l.constprop.0+0xb8>
 800ea6c:	2430      	movs	r4, #48	; 0x30
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1b5      	bne.n	800e9de <_strtoul_l.constprop.0+0x3e>
 800ea72:	2308      	movs	r3, #8
 800ea74:	e7b3      	b.n	800e9de <_strtoul_l.constprop.0+0x3e>
 800ea76:	2c30      	cmp	r4, #48	; 0x30
 800ea78:	d0a9      	beq.n	800e9ce <_strtoul_l.constprop.0+0x2e>
 800ea7a:	230a      	movs	r3, #10
 800ea7c:	e7af      	b.n	800e9de <_strtoul_l.constprop.0+0x3e>
 800ea7e:	bf00      	nop
 800ea80:	08010c0d 	.word	0x08010c0d

0800ea84 <_strtoul_r>:
 800ea84:	f7ff bf8c 	b.w	800e9a0 <_strtoul_l.constprop.0>

0800ea88 <strtoul>:
 800ea88:	4613      	mov	r3, r2
 800ea8a:	460a      	mov	r2, r1
 800ea8c:	4601      	mov	r1, r0
 800ea8e:	4802      	ldr	r0, [pc, #8]	; (800ea98 <strtoul+0x10>)
 800ea90:	6800      	ldr	r0, [r0, #0]
 800ea92:	f7ff bf85 	b.w	800e9a0 <_strtoul_l.constprop.0>
 800ea96:	bf00      	nop
 800ea98:	20000104 	.word	0x20000104

0800ea9c <__tz_lock>:
 800ea9c:	4801      	ldr	r0, [pc, #4]	; (800eaa4 <__tz_lock+0x8>)
 800ea9e:	f7ff b88b 	b.w	800dbb8 <__retarget_lock_acquire>
 800eaa2:	bf00      	nop
 800eaa4:	20000b12 	.word	0x20000b12

0800eaa8 <__tz_unlock>:
 800eaa8:	4801      	ldr	r0, [pc, #4]	; (800eab0 <__tz_unlock+0x8>)
 800eaaa:	f7ff b887 	b.w	800dbbc <__retarget_lock_release>
 800eaae:	bf00      	nop
 800eab0:	20000b12 	.word	0x20000b12

0800eab4 <_tzset_unlocked>:
 800eab4:	4b01      	ldr	r3, [pc, #4]	; (800eabc <_tzset_unlocked+0x8>)
 800eab6:	6818      	ldr	r0, [r3, #0]
 800eab8:	f000 b802 	b.w	800eac0 <_tzset_unlocked_r>
 800eabc:	20000104 	.word	0x20000104

0800eac0 <_tzset_unlocked_r>:
 800eac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	b08d      	sub	sp, #52	; 0x34
 800eac6:	4607      	mov	r7, r0
 800eac8:	f000 f9c2 	bl	800ee50 <__gettzinfo>
 800eacc:	49b0      	ldr	r1, [pc, #704]	; (800ed90 <_tzset_unlocked_r+0x2d0>)
 800eace:	4eb1      	ldr	r6, [pc, #708]	; (800ed94 <_tzset_unlocked_r+0x2d4>)
 800ead0:	4605      	mov	r5, r0
 800ead2:	4638      	mov	r0, r7
 800ead4:	f000 f9b4 	bl	800ee40 <_getenv_r>
 800ead8:	4604      	mov	r4, r0
 800eada:	b970      	cbnz	r0, 800eafa <_tzset_unlocked_r+0x3a>
 800eadc:	4bae      	ldr	r3, [pc, #696]	; (800ed98 <_tzset_unlocked_r+0x2d8>)
 800eade:	4aaf      	ldr	r2, [pc, #700]	; (800ed9c <_tzset_unlocked_r+0x2dc>)
 800eae0:	6018      	str	r0, [r3, #0]
 800eae2:	4baf      	ldr	r3, [pc, #700]	; (800eda0 <_tzset_unlocked_r+0x2e0>)
 800eae4:	6018      	str	r0, [r3, #0]
 800eae6:	4baf      	ldr	r3, [pc, #700]	; (800eda4 <_tzset_unlocked_r+0x2e4>)
 800eae8:	6830      	ldr	r0, [r6, #0]
 800eaea:	e9c3 2200 	strd	r2, r2, [r3]
 800eaee:	f000 f9b7 	bl	800ee60 <free>
 800eaf2:	6034      	str	r4, [r6, #0]
 800eaf4:	b00d      	add	sp, #52	; 0x34
 800eaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafa:	6831      	ldr	r1, [r6, #0]
 800eafc:	2900      	cmp	r1, #0
 800eafe:	d162      	bne.n	800ebc6 <_tzset_unlocked_r+0x106>
 800eb00:	6830      	ldr	r0, [r6, #0]
 800eb02:	f000 f9ad 	bl	800ee60 <free>
 800eb06:	4620      	mov	r0, r4
 800eb08:	f7f1 fb6a 	bl	80001e0 <strlen>
 800eb0c:	1c41      	adds	r1, r0, #1
 800eb0e:	4638      	mov	r0, r7
 800eb10:	f7ff f8d8 	bl	800dcc4 <_malloc_r>
 800eb14:	6030      	str	r0, [r6, #0]
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d15a      	bne.n	800ebd0 <_tzset_unlocked_r+0x110>
 800eb1a:	7823      	ldrb	r3, [r4, #0]
 800eb1c:	4aa2      	ldr	r2, [pc, #648]	; (800eda8 <_tzset_unlocked_r+0x2e8>)
 800eb1e:	49a3      	ldr	r1, [pc, #652]	; (800edac <_tzset_unlocked_r+0x2ec>)
 800eb20:	2b3a      	cmp	r3, #58	; 0x3a
 800eb22:	bf08      	it	eq
 800eb24:	3401      	addeq	r4, #1
 800eb26:	ae0a      	add	r6, sp, #40	; 0x28
 800eb28:	4633      	mov	r3, r6
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f000 fcd0 	bl	800f4d0 <siscanf>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	dddf      	ble.n	800eaf4 <_tzset_unlocked_r+0x34>
 800eb34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb36:	18e7      	adds	r7, r4, r3
 800eb38:	5ce3      	ldrb	r3, [r4, r3]
 800eb3a:	2b2d      	cmp	r3, #45	; 0x2d
 800eb3c:	d14c      	bne.n	800ebd8 <_tzset_unlocked_r+0x118>
 800eb3e:	3701      	adds	r7, #1
 800eb40:	f04f 38ff 	mov.w	r8, #4294967295
 800eb44:	f10d 0a20 	add.w	sl, sp, #32
 800eb48:	f10d 0b1e 	add.w	fp, sp, #30
 800eb4c:	2400      	movs	r4, #0
 800eb4e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800eb52:	4997      	ldr	r1, [pc, #604]	; (800edb0 <_tzset_unlocked_r+0x2f0>)
 800eb54:	9603      	str	r6, [sp, #12]
 800eb56:	f8cd b000 	str.w	fp, [sp]
 800eb5a:	4633      	mov	r3, r6
 800eb5c:	aa07      	add	r2, sp, #28
 800eb5e:	4638      	mov	r0, r7
 800eb60:	f8ad 401e 	strh.w	r4, [sp, #30]
 800eb64:	f8ad 4020 	strh.w	r4, [sp, #32]
 800eb68:	f000 fcb2 	bl	800f4d0 <siscanf>
 800eb6c:	42a0      	cmp	r0, r4
 800eb6e:	ddc1      	ble.n	800eaf4 <_tzset_unlocked_r+0x34>
 800eb70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800eb74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800eb78:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800edbc <_tzset_unlocked_r+0x2fc>
 800eb7c:	213c      	movs	r1, #60	; 0x3c
 800eb7e:	fb01 3302 	mla	r3, r1, r2, r3
 800eb82:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800eb86:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800eb8a:	fb01 3302 	mla	r3, r1, r2, r3
 800eb8e:	fb08 f303 	mul.w	r3, r8, r3
 800eb92:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800eda4 <_tzset_unlocked_r+0x2e4>
 800eb96:	62ab      	str	r3, [r5, #40]	; 0x28
 800eb98:	4b83      	ldr	r3, [pc, #524]	; (800eda8 <_tzset_unlocked_r+0x2e8>)
 800eb9a:	f8c8 3000 	str.w	r3, [r8]
 800eb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eba0:	4982      	ldr	r1, [pc, #520]	; (800edac <_tzset_unlocked_r+0x2ec>)
 800eba2:	441f      	add	r7, r3
 800eba4:	464a      	mov	r2, r9
 800eba6:	4633      	mov	r3, r6
 800eba8:	4638      	mov	r0, r7
 800ebaa:	f000 fc91 	bl	800f4d0 <siscanf>
 800ebae:	42a0      	cmp	r0, r4
 800ebb0:	dc18      	bgt.n	800ebe4 <_tzset_unlocked_r+0x124>
 800ebb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebb6:	f8c8 3004 	str.w	r3, [r8, #4]
 800ebba:	4b77      	ldr	r3, [pc, #476]	; (800ed98 <_tzset_unlocked_r+0x2d8>)
 800ebbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ebbe:	601a      	str	r2, [r3, #0]
 800ebc0:	4b77      	ldr	r3, [pc, #476]	; (800eda0 <_tzset_unlocked_r+0x2e0>)
 800ebc2:	601c      	str	r4, [r3, #0]
 800ebc4:	e796      	b.n	800eaf4 <_tzset_unlocked_r+0x34>
 800ebc6:	f7f1 fb13 	bl	80001f0 <strcmp>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d198      	bne.n	800eb00 <_tzset_unlocked_r+0x40>
 800ebce:	e791      	b.n	800eaf4 <_tzset_unlocked_r+0x34>
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	f000 fca9 	bl	800f528 <strcpy>
 800ebd6:	e7a0      	b.n	800eb1a <_tzset_unlocked_r+0x5a>
 800ebd8:	2b2b      	cmp	r3, #43	; 0x2b
 800ebda:	bf08      	it	eq
 800ebdc:	3701      	addeq	r7, #1
 800ebde:	f04f 0801 	mov.w	r8, #1
 800ebe2:	e7af      	b.n	800eb44 <_tzset_unlocked_r+0x84>
 800ebe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe6:	f8c8 9004 	str.w	r9, [r8, #4]
 800ebea:	18fc      	adds	r4, r7, r3
 800ebec:	5cfb      	ldrb	r3, [r7, r3]
 800ebee:	2b2d      	cmp	r3, #45	; 0x2d
 800ebf0:	f040 808b 	bne.w	800ed0a <_tzset_unlocked_r+0x24a>
 800ebf4:	3401      	adds	r4, #1
 800ebf6:	f04f 37ff 	mov.w	r7, #4294967295
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec00:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ec04:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ec08:	930a      	str	r3, [sp, #40]	; 0x28
 800ec0a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ec0e:	e9cd b600 	strd	fp, r6, [sp]
 800ec12:	4967      	ldr	r1, [pc, #412]	; (800edb0 <_tzset_unlocked_r+0x2f0>)
 800ec14:	4633      	mov	r3, r6
 800ec16:	aa07      	add	r2, sp, #28
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f000 fc59 	bl	800f4d0 <siscanf>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	dc78      	bgt.n	800ed14 <_tzset_unlocked_r+0x254>
 800ec22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ec24:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ec28:	652b      	str	r3, [r5, #80]	; 0x50
 800ec2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2c:	462f      	mov	r7, r5
 800ec2e:	441c      	add	r4, r3
 800ec30:	f04f 0900 	mov.w	r9, #0
 800ec34:	7823      	ldrb	r3, [r4, #0]
 800ec36:	2b2c      	cmp	r3, #44	; 0x2c
 800ec38:	bf08      	it	eq
 800ec3a:	3401      	addeq	r4, #1
 800ec3c:	f894 8000 	ldrb.w	r8, [r4]
 800ec40:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800ec44:	d178      	bne.n	800ed38 <_tzset_unlocked_r+0x278>
 800ec46:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ec4a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ec4e:	ab09      	add	r3, sp, #36	; 0x24
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	4958      	ldr	r1, [pc, #352]	; (800edb4 <_tzset_unlocked_r+0x2f4>)
 800ec54:	9603      	str	r6, [sp, #12]
 800ec56:	4633      	mov	r3, r6
 800ec58:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f000 fc37 	bl	800f4d0 <siscanf>
 800ec62:	2803      	cmp	r0, #3
 800ec64:	f47f af46 	bne.w	800eaf4 <_tzset_unlocked_r+0x34>
 800ec68:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ec6c:	1e4b      	subs	r3, r1, #1
 800ec6e:	2b0b      	cmp	r3, #11
 800ec70:	f63f af40 	bhi.w	800eaf4 <_tzset_unlocked_r+0x34>
 800ec74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ec78:	1e53      	subs	r3, r2, #1
 800ec7a:	2b04      	cmp	r3, #4
 800ec7c:	f63f af3a 	bhi.w	800eaf4 <_tzset_unlocked_r+0x34>
 800ec80:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ec84:	2b06      	cmp	r3, #6
 800ec86:	f63f af35 	bhi.w	800eaf4 <_tzset_unlocked_r+0x34>
 800ec8a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ec8e:	f887 8008 	strb.w	r8, [r7, #8]
 800ec92:	617b      	str	r3, [r7, #20]
 800ec94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec96:	eb04 0803 	add.w	r8, r4, r3
 800ec9a:	2302      	movs	r3, #2
 800ec9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eca0:	2300      	movs	r3, #0
 800eca2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eca6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ecaa:	930a      	str	r3, [sp, #40]	; 0x28
 800ecac:	f898 3000 	ldrb.w	r3, [r8]
 800ecb0:	2b2f      	cmp	r3, #47	; 0x2f
 800ecb2:	d109      	bne.n	800ecc8 <_tzset_unlocked_r+0x208>
 800ecb4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ecb8:	e9cd b600 	strd	fp, r6, [sp]
 800ecbc:	493e      	ldr	r1, [pc, #248]	; (800edb8 <_tzset_unlocked_r+0x2f8>)
 800ecbe:	4633      	mov	r3, r6
 800ecc0:	aa07      	add	r2, sp, #28
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	f000 fc04 	bl	800f4d0 <siscanf>
 800ecc8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800eccc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ecd0:	213c      	movs	r1, #60	; 0x3c
 800ecd2:	fb01 3302 	mla	r3, r1, r2, r3
 800ecd6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ecda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ecde:	fb01 3302 	mla	r3, r1, r2, r3
 800ece2:	61bb      	str	r3, [r7, #24]
 800ece4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ece6:	3728      	adds	r7, #40	; 0x28
 800ece8:	4444      	add	r4, r8
 800ecea:	f1b9 0f00 	cmp.w	r9, #0
 800ecee:	d020      	beq.n	800ed32 <_tzset_unlocked_r+0x272>
 800ecf0:	6868      	ldr	r0, [r5, #4]
 800ecf2:	f000 fc35 	bl	800f560 <__tzcalc_limits>
 800ecf6:	4b28      	ldr	r3, [pc, #160]	; (800ed98 <_tzset_unlocked_r+0x2d8>)
 800ecf8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ecfa:	601a      	str	r2, [r3, #0]
 800ecfc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ecfe:	1a9b      	subs	r3, r3, r2
 800ed00:	4a27      	ldr	r2, [pc, #156]	; (800eda0 <_tzset_unlocked_r+0x2e0>)
 800ed02:	bf18      	it	ne
 800ed04:	2301      	movne	r3, #1
 800ed06:	6013      	str	r3, [r2, #0]
 800ed08:	e6f4      	b.n	800eaf4 <_tzset_unlocked_r+0x34>
 800ed0a:	2b2b      	cmp	r3, #43	; 0x2b
 800ed0c:	bf08      	it	eq
 800ed0e:	3401      	addeq	r4, #1
 800ed10:	2701      	movs	r7, #1
 800ed12:	e772      	b.n	800ebfa <_tzset_unlocked_r+0x13a>
 800ed14:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ed18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ed1c:	213c      	movs	r1, #60	; 0x3c
 800ed1e:	fb01 3302 	mla	r3, r1, r2, r3
 800ed22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ed26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ed2a:	fb01 3302 	mla	r3, r1, r2, r3
 800ed2e:	437b      	muls	r3, r7
 800ed30:	e77a      	b.n	800ec28 <_tzset_unlocked_r+0x168>
 800ed32:	f04f 0901 	mov.w	r9, #1
 800ed36:	e77d      	b.n	800ec34 <_tzset_unlocked_r+0x174>
 800ed38:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800ed3c:	bf06      	itte	eq
 800ed3e:	3401      	addeq	r4, #1
 800ed40:	4643      	moveq	r3, r8
 800ed42:	2344      	movne	r3, #68	; 0x44
 800ed44:	220a      	movs	r2, #10
 800ed46:	a90b      	add	r1, sp, #44	; 0x2c
 800ed48:	4620      	mov	r0, r4
 800ed4a:	9305      	str	r3, [sp, #20]
 800ed4c:	f7ff fe9c 	bl	800ea88 <strtoul>
 800ed50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ed54:	9b05      	ldr	r3, [sp, #20]
 800ed56:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800ed5a:	45a0      	cmp	r8, r4
 800ed5c:	d114      	bne.n	800ed88 <_tzset_unlocked_r+0x2c8>
 800ed5e:	234d      	movs	r3, #77	; 0x4d
 800ed60:	f1b9 0f00 	cmp.w	r9, #0
 800ed64:	d107      	bne.n	800ed76 <_tzset_unlocked_r+0x2b6>
 800ed66:	722b      	strb	r3, [r5, #8]
 800ed68:	2103      	movs	r1, #3
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800ed70:	f8c5 9014 	str.w	r9, [r5, #20]
 800ed74:	e791      	b.n	800ec9a <_tzset_unlocked_r+0x1da>
 800ed76:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800ed7a:	220b      	movs	r2, #11
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800ed82:	2300      	movs	r3, #0
 800ed84:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ed86:	e788      	b.n	800ec9a <_tzset_unlocked_r+0x1da>
 800ed88:	b280      	uxth	r0, r0
 800ed8a:	723b      	strb	r3, [r7, #8]
 800ed8c:	6178      	str	r0, [r7, #20]
 800ed8e:	e784      	b.n	800ec9a <_tzset_unlocked_r+0x1da>
 800ed90:	08010bd0 	.word	0x08010bd0
 800ed94:	20000b38 	.word	0x20000b38
 800ed98:	20000b40 	.word	0x20000b40
 800ed9c:	08010bd3 	.word	0x08010bd3
 800eda0:	20000b3c 	.word	0x20000b3c
 800eda4:	20000168 	.word	0x20000168
 800eda8:	20000b2b 	.word	0x20000b2b
 800edac:	08010bd7 	.word	0x08010bd7
 800edb0:	08010bfa 	.word	0x08010bfa
 800edb4:	08010be6 	.word	0x08010be6
 800edb8:	08010bf9 	.word	0x08010bf9
 800edbc:	20000b20 	.word	0x20000b20

0800edc0 <abs>:
 800edc0:	2800      	cmp	r0, #0
 800edc2:	bfb8      	it	lt
 800edc4:	4240      	neglt	r0, r0
 800edc6:	4770      	bx	lr

0800edc8 <_findenv_r>:
 800edc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800ee3c <_findenv_r+0x74>
 800edd0:	4607      	mov	r7, r0
 800edd2:	4689      	mov	r9, r1
 800edd4:	4616      	mov	r6, r2
 800edd6:	f000 fc6d 	bl	800f6b4 <__env_lock>
 800edda:	f8da 4000 	ldr.w	r4, [sl]
 800edde:	b134      	cbz	r4, 800edee <_findenv_r+0x26>
 800ede0:	464b      	mov	r3, r9
 800ede2:	4698      	mov	r8, r3
 800ede4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede8:	b13a      	cbz	r2, 800edfa <_findenv_r+0x32>
 800edea:	2a3d      	cmp	r2, #61	; 0x3d
 800edec:	d1f9      	bne.n	800ede2 <_findenv_r+0x1a>
 800edee:	4638      	mov	r0, r7
 800edf0:	f000 fc66 	bl	800f6c0 <__env_unlock>
 800edf4:	2000      	movs	r0, #0
 800edf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfa:	eba8 0809 	sub.w	r8, r8, r9
 800edfe:	46a3      	mov	fp, r4
 800ee00:	f854 0b04 	ldr.w	r0, [r4], #4
 800ee04:	2800      	cmp	r0, #0
 800ee06:	d0f2      	beq.n	800edee <_findenv_r+0x26>
 800ee08:	4642      	mov	r2, r8
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	f000 fb94 	bl	800f538 <strncmp>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d1f4      	bne.n	800edfe <_findenv_r+0x36>
 800ee14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ee18:	eb03 0508 	add.w	r5, r3, r8
 800ee1c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ee20:	2b3d      	cmp	r3, #61	; 0x3d
 800ee22:	d1ec      	bne.n	800edfe <_findenv_r+0x36>
 800ee24:	f8da 3000 	ldr.w	r3, [sl]
 800ee28:	ebab 0303 	sub.w	r3, fp, r3
 800ee2c:	109b      	asrs	r3, r3, #2
 800ee2e:	4638      	mov	r0, r7
 800ee30:	6033      	str	r3, [r6, #0]
 800ee32:	f000 fc45 	bl	800f6c0 <__env_unlock>
 800ee36:	1c68      	adds	r0, r5, #1
 800ee38:	e7dd      	b.n	800edf6 <_findenv_r+0x2e>
 800ee3a:	bf00      	nop
 800ee3c:	200000e0 	.word	0x200000e0

0800ee40 <_getenv_r>:
 800ee40:	b507      	push	{r0, r1, r2, lr}
 800ee42:	aa01      	add	r2, sp, #4
 800ee44:	f7ff ffc0 	bl	800edc8 <_findenv_r>
 800ee48:	b003      	add	sp, #12
 800ee4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ee50 <__gettzinfo>:
 800ee50:	4800      	ldr	r0, [pc, #0]	; (800ee54 <__gettzinfo+0x4>)
 800ee52:	4770      	bx	lr
 800ee54:	20000170 	.word	0x20000170

0800ee58 <labs>:
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	bfb8      	it	lt
 800ee5c:	4240      	neglt	r0, r0
 800ee5e:	4770      	bx	lr

0800ee60 <free>:
 800ee60:	4b02      	ldr	r3, [pc, #8]	; (800ee6c <free+0xc>)
 800ee62:	4601      	mov	r1, r0
 800ee64:	6818      	ldr	r0, [r3, #0]
 800ee66:	f7fe bec1 	b.w	800dbec <_free_r>
 800ee6a:	bf00      	nop
 800ee6c:	20000104 	.word	0x20000104

0800ee70 <__malloc_lock>:
 800ee70:	4801      	ldr	r0, [pc, #4]	; (800ee78 <__malloc_lock+0x8>)
 800ee72:	f7fe bea2 	b.w	800dbba <__retarget_lock_acquire_recursive>
 800ee76:	bf00      	nop
 800ee78:	20000b11 	.word	0x20000b11

0800ee7c <__malloc_unlock>:
 800ee7c:	4801      	ldr	r0, [pc, #4]	; (800ee84 <__malloc_unlock+0x8>)
 800ee7e:	f7fe be9e 	b.w	800dbbe <__retarget_lock_release_recursive>
 800ee82:	bf00      	nop
 800ee84:	20000b11 	.word	0x20000b11

0800ee88 <__ssputs_r>:
 800ee88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee8c:	688e      	ldr	r6, [r1, #8]
 800ee8e:	429e      	cmp	r6, r3
 800ee90:	4682      	mov	sl, r0
 800ee92:	460c      	mov	r4, r1
 800ee94:	4690      	mov	r8, r2
 800ee96:	461f      	mov	r7, r3
 800ee98:	d838      	bhi.n	800ef0c <__ssputs_r+0x84>
 800ee9a:	898a      	ldrh	r2, [r1, #12]
 800ee9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eea0:	d032      	beq.n	800ef08 <__ssputs_r+0x80>
 800eea2:	6825      	ldr	r5, [r4, #0]
 800eea4:	6909      	ldr	r1, [r1, #16]
 800eea6:	eba5 0901 	sub.w	r9, r5, r1
 800eeaa:	6965      	ldr	r5, [r4, #20]
 800eeac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	444b      	add	r3, r9
 800eeb8:	106d      	asrs	r5, r5, #1
 800eeba:	429d      	cmp	r5, r3
 800eebc:	bf38      	it	cc
 800eebe:	461d      	movcc	r5, r3
 800eec0:	0553      	lsls	r3, r2, #21
 800eec2:	d531      	bpl.n	800ef28 <__ssputs_r+0xa0>
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7fe fefd 	bl	800dcc4 <_malloc_r>
 800eeca:	4606      	mov	r6, r0
 800eecc:	b950      	cbnz	r0, 800eee4 <__ssputs_r+0x5c>
 800eece:	230c      	movs	r3, #12
 800eed0:	f8ca 3000 	str.w	r3, [sl]
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeda:	81a3      	strh	r3, [r4, #12]
 800eedc:	f04f 30ff 	mov.w	r0, #4294967295
 800eee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee4:	6921      	ldr	r1, [r4, #16]
 800eee6:	464a      	mov	r2, r9
 800eee8:	f7fe fe6a 	bl	800dbc0 <memcpy>
 800eeec:	89a3      	ldrh	r3, [r4, #12]
 800eeee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef6:	81a3      	strh	r3, [r4, #12]
 800eef8:	6126      	str	r6, [r4, #16]
 800eefa:	6165      	str	r5, [r4, #20]
 800eefc:	444e      	add	r6, r9
 800eefe:	eba5 0509 	sub.w	r5, r5, r9
 800ef02:	6026      	str	r6, [r4, #0]
 800ef04:	60a5      	str	r5, [r4, #8]
 800ef06:	463e      	mov	r6, r7
 800ef08:	42be      	cmp	r6, r7
 800ef0a:	d900      	bls.n	800ef0e <__ssputs_r+0x86>
 800ef0c:	463e      	mov	r6, r7
 800ef0e:	6820      	ldr	r0, [r4, #0]
 800ef10:	4632      	mov	r2, r6
 800ef12:	4641      	mov	r1, r8
 800ef14:	f000 fbda 	bl	800f6cc <memmove>
 800ef18:	68a3      	ldr	r3, [r4, #8]
 800ef1a:	1b9b      	subs	r3, r3, r6
 800ef1c:	60a3      	str	r3, [r4, #8]
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	4433      	add	r3, r6
 800ef22:	6023      	str	r3, [r4, #0]
 800ef24:	2000      	movs	r0, #0
 800ef26:	e7db      	b.n	800eee0 <__ssputs_r+0x58>
 800ef28:	462a      	mov	r2, r5
 800ef2a:	f000 fbe9 	bl	800f700 <_realloc_r>
 800ef2e:	4606      	mov	r6, r0
 800ef30:	2800      	cmp	r0, #0
 800ef32:	d1e1      	bne.n	800eef8 <__ssputs_r+0x70>
 800ef34:	6921      	ldr	r1, [r4, #16]
 800ef36:	4650      	mov	r0, sl
 800ef38:	f7fe fe58 	bl	800dbec <_free_r>
 800ef3c:	e7c7      	b.n	800eece <__ssputs_r+0x46>
	...

0800ef40 <_svfiprintf_r>:
 800ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef44:	4698      	mov	r8, r3
 800ef46:	898b      	ldrh	r3, [r1, #12]
 800ef48:	061b      	lsls	r3, r3, #24
 800ef4a:	b09d      	sub	sp, #116	; 0x74
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	460d      	mov	r5, r1
 800ef50:	4614      	mov	r4, r2
 800ef52:	d50e      	bpl.n	800ef72 <_svfiprintf_r+0x32>
 800ef54:	690b      	ldr	r3, [r1, #16]
 800ef56:	b963      	cbnz	r3, 800ef72 <_svfiprintf_r+0x32>
 800ef58:	2140      	movs	r1, #64	; 0x40
 800ef5a:	f7fe feb3 	bl	800dcc4 <_malloc_r>
 800ef5e:	6028      	str	r0, [r5, #0]
 800ef60:	6128      	str	r0, [r5, #16]
 800ef62:	b920      	cbnz	r0, 800ef6e <_svfiprintf_r+0x2e>
 800ef64:	230c      	movs	r3, #12
 800ef66:	603b      	str	r3, [r7, #0]
 800ef68:	f04f 30ff 	mov.w	r0, #4294967295
 800ef6c:	e0d1      	b.n	800f112 <_svfiprintf_r+0x1d2>
 800ef6e:	2340      	movs	r3, #64	; 0x40
 800ef70:	616b      	str	r3, [r5, #20]
 800ef72:	2300      	movs	r3, #0
 800ef74:	9309      	str	r3, [sp, #36]	; 0x24
 800ef76:	2320      	movs	r3, #32
 800ef78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef80:	2330      	movs	r3, #48	; 0x30
 800ef82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f12c <_svfiprintf_r+0x1ec>
 800ef86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef8a:	f04f 0901 	mov.w	r9, #1
 800ef8e:	4623      	mov	r3, r4
 800ef90:	469a      	mov	sl, r3
 800ef92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef96:	b10a      	cbz	r2, 800ef9c <_svfiprintf_r+0x5c>
 800ef98:	2a25      	cmp	r2, #37	; 0x25
 800ef9a:	d1f9      	bne.n	800ef90 <_svfiprintf_r+0x50>
 800ef9c:	ebba 0b04 	subs.w	fp, sl, r4
 800efa0:	d00b      	beq.n	800efba <_svfiprintf_r+0x7a>
 800efa2:	465b      	mov	r3, fp
 800efa4:	4622      	mov	r2, r4
 800efa6:	4629      	mov	r1, r5
 800efa8:	4638      	mov	r0, r7
 800efaa:	f7ff ff6d 	bl	800ee88 <__ssputs_r>
 800efae:	3001      	adds	r0, #1
 800efb0:	f000 80aa 	beq.w	800f108 <_svfiprintf_r+0x1c8>
 800efb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efb6:	445a      	add	r2, fp
 800efb8:	9209      	str	r2, [sp, #36]	; 0x24
 800efba:	f89a 3000 	ldrb.w	r3, [sl]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 80a2 	beq.w	800f108 <_svfiprintf_r+0x1c8>
 800efc4:	2300      	movs	r3, #0
 800efc6:	f04f 32ff 	mov.w	r2, #4294967295
 800efca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efce:	f10a 0a01 	add.w	sl, sl, #1
 800efd2:	9304      	str	r3, [sp, #16]
 800efd4:	9307      	str	r3, [sp, #28]
 800efd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efda:	931a      	str	r3, [sp, #104]	; 0x68
 800efdc:	4654      	mov	r4, sl
 800efde:	2205      	movs	r2, #5
 800efe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe4:	4851      	ldr	r0, [pc, #324]	; (800f12c <_svfiprintf_r+0x1ec>)
 800efe6:	f7f1 f913 	bl	8000210 <memchr>
 800efea:	9a04      	ldr	r2, [sp, #16]
 800efec:	b9d8      	cbnz	r0, 800f026 <_svfiprintf_r+0xe6>
 800efee:	06d0      	lsls	r0, r2, #27
 800eff0:	bf44      	itt	mi
 800eff2:	2320      	movmi	r3, #32
 800eff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eff8:	0711      	lsls	r1, r2, #28
 800effa:	bf44      	itt	mi
 800effc:	232b      	movmi	r3, #43	; 0x2b
 800effe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f002:	f89a 3000 	ldrb.w	r3, [sl]
 800f006:	2b2a      	cmp	r3, #42	; 0x2a
 800f008:	d015      	beq.n	800f036 <_svfiprintf_r+0xf6>
 800f00a:	9a07      	ldr	r2, [sp, #28]
 800f00c:	4654      	mov	r4, sl
 800f00e:	2000      	movs	r0, #0
 800f010:	f04f 0c0a 	mov.w	ip, #10
 800f014:	4621      	mov	r1, r4
 800f016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f01a:	3b30      	subs	r3, #48	; 0x30
 800f01c:	2b09      	cmp	r3, #9
 800f01e:	d94e      	bls.n	800f0be <_svfiprintf_r+0x17e>
 800f020:	b1b0      	cbz	r0, 800f050 <_svfiprintf_r+0x110>
 800f022:	9207      	str	r2, [sp, #28]
 800f024:	e014      	b.n	800f050 <_svfiprintf_r+0x110>
 800f026:	eba0 0308 	sub.w	r3, r0, r8
 800f02a:	fa09 f303 	lsl.w	r3, r9, r3
 800f02e:	4313      	orrs	r3, r2
 800f030:	9304      	str	r3, [sp, #16]
 800f032:	46a2      	mov	sl, r4
 800f034:	e7d2      	b.n	800efdc <_svfiprintf_r+0x9c>
 800f036:	9b03      	ldr	r3, [sp, #12]
 800f038:	1d19      	adds	r1, r3, #4
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	9103      	str	r1, [sp, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	bfbb      	ittet	lt
 800f042:	425b      	neglt	r3, r3
 800f044:	f042 0202 	orrlt.w	r2, r2, #2
 800f048:	9307      	strge	r3, [sp, #28]
 800f04a:	9307      	strlt	r3, [sp, #28]
 800f04c:	bfb8      	it	lt
 800f04e:	9204      	strlt	r2, [sp, #16]
 800f050:	7823      	ldrb	r3, [r4, #0]
 800f052:	2b2e      	cmp	r3, #46	; 0x2e
 800f054:	d10c      	bne.n	800f070 <_svfiprintf_r+0x130>
 800f056:	7863      	ldrb	r3, [r4, #1]
 800f058:	2b2a      	cmp	r3, #42	; 0x2a
 800f05a:	d135      	bne.n	800f0c8 <_svfiprintf_r+0x188>
 800f05c:	9b03      	ldr	r3, [sp, #12]
 800f05e:	1d1a      	adds	r2, r3, #4
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	9203      	str	r2, [sp, #12]
 800f064:	2b00      	cmp	r3, #0
 800f066:	bfb8      	it	lt
 800f068:	f04f 33ff 	movlt.w	r3, #4294967295
 800f06c:	3402      	adds	r4, #2
 800f06e:	9305      	str	r3, [sp, #20]
 800f070:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f13c <_svfiprintf_r+0x1fc>
 800f074:	7821      	ldrb	r1, [r4, #0]
 800f076:	2203      	movs	r2, #3
 800f078:	4650      	mov	r0, sl
 800f07a:	f7f1 f8c9 	bl	8000210 <memchr>
 800f07e:	b140      	cbz	r0, 800f092 <_svfiprintf_r+0x152>
 800f080:	2340      	movs	r3, #64	; 0x40
 800f082:	eba0 000a 	sub.w	r0, r0, sl
 800f086:	fa03 f000 	lsl.w	r0, r3, r0
 800f08a:	9b04      	ldr	r3, [sp, #16]
 800f08c:	4303      	orrs	r3, r0
 800f08e:	3401      	adds	r4, #1
 800f090:	9304      	str	r3, [sp, #16]
 800f092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f096:	4826      	ldr	r0, [pc, #152]	; (800f130 <_svfiprintf_r+0x1f0>)
 800f098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f09c:	2206      	movs	r2, #6
 800f09e:	f7f1 f8b7 	bl	8000210 <memchr>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d038      	beq.n	800f118 <_svfiprintf_r+0x1d8>
 800f0a6:	4b23      	ldr	r3, [pc, #140]	; (800f134 <_svfiprintf_r+0x1f4>)
 800f0a8:	bb1b      	cbnz	r3, 800f0f2 <_svfiprintf_r+0x1b2>
 800f0aa:	9b03      	ldr	r3, [sp, #12]
 800f0ac:	3307      	adds	r3, #7
 800f0ae:	f023 0307 	bic.w	r3, r3, #7
 800f0b2:	3308      	adds	r3, #8
 800f0b4:	9303      	str	r3, [sp, #12]
 800f0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b8:	4433      	add	r3, r6
 800f0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f0bc:	e767      	b.n	800ef8e <_svfiprintf_r+0x4e>
 800f0be:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	2001      	movs	r0, #1
 800f0c6:	e7a5      	b.n	800f014 <_svfiprintf_r+0xd4>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	3401      	adds	r4, #1
 800f0cc:	9305      	str	r3, [sp, #20]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	f04f 0c0a 	mov.w	ip, #10
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0da:	3a30      	subs	r2, #48	; 0x30
 800f0dc:	2a09      	cmp	r2, #9
 800f0de:	d903      	bls.n	800f0e8 <_svfiprintf_r+0x1a8>
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d0c5      	beq.n	800f070 <_svfiprintf_r+0x130>
 800f0e4:	9105      	str	r1, [sp, #20]
 800f0e6:	e7c3      	b.n	800f070 <_svfiprintf_r+0x130>
 800f0e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e7f0      	b.n	800f0d4 <_svfiprintf_r+0x194>
 800f0f2:	ab03      	add	r3, sp, #12
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	462a      	mov	r2, r5
 800f0f8:	4b0f      	ldr	r3, [pc, #60]	; (800f138 <_svfiprintf_r+0x1f8>)
 800f0fa:	a904      	add	r1, sp, #16
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	f3af 8000 	nop.w
 800f102:	1c42      	adds	r2, r0, #1
 800f104:	4606      	mov	r6, r0
 800f106:	d1d6      	bne.n	800f0b6 <_svfiprintf_r+0x176>
 800f108:	89ab      	ldrh	r3, [r5, #12]
 800f10a:	065b      	lsls	r3, r3, #25
 800f10c:	f53f af2c 	bmi.w	800ef68 <_svfiprintf_r+0x28>
 800f110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f112:	b01d      	add	sp, #116	; 0x74
 800f114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f118:	ab03      	add	r3, sp, #12
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	462a      	mov	r2, r5
 800f11e:	4b06      	ldr	r3, [pc, #24]	; (800f138 <_svfiprintf_r+0x1f8>)
 800f120:	a904      	add	r1, sp, #16
 800f122:	4638      	mov	r0, r7
 800f124:	f000 f87a 	bl	800f21c <_printf_i>
 800f128:	e7eb      	b.n	800f102 <_svfiprintf_r+0x1c2>
 800f12a:	bf00      	nop
 800f12c:	08010d0d 	.word	0x08010d0d
 800f130:	08010d17 	.word	0x08010d17
 800f134:	00000000 	.word	0x00000000
 800f138:	0800ee89 	.word	0x0800ee89
 800f13c:	08010d13 	.word	0x08010d13

0800f140 <_printf_common>:
 800f140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f144:	4616      	mov	r6, r2
 800f146:	4699      	mov	r9, r3
 800f148:	688a      	ldr	r2, [r1, #8]
 800f14a:	690b      	ldr	r3, [r1, #16]
 800f14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f150:	4293      	cmp	r3, r2
 800f152:	bfb8      	it	lt
 800f154:	4613      	movlt	r3, r2
 800f156:	6033      	str	r3, [r6, #0]
 800f158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f15c:	4607      	mov	r7, r0
 800f15e:	460c      	mov	r4, r1
 800f160:	b10a      	cbz	r2, 800f166 <_printf_common+0x26>
 800f162:	3301      	adds	r3, #1
 800f164:	6033      	str	r3, [r6, #0]
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	0699      	lsls	r1, r3, #26
 800f16a:	bf42      	ittt	mi
 800f16c:	6833      	ldrmi	r3, [r6, #0]
 800f16e:	3302      	addmi	r3, #2
 800f170:	6033      	strmi	r3, [r6, #0]
 800f172:	6825      	ldr	r5, [r4, #0]
 800f174:	f015 0506 	ands.w	r5, r5, #6
 800f178:	d106      	bne.n	800f188 <_printf_common+0x48>
 800f17a:	f104 0a19 	add.w	sl, r4, #25
 800f17e:	68e3      	ldr	r3, [r4, #12]
 800f180:	6832      	ldr	r2, [r6, #0]
 800f182:	1a9b      	subs	r3, r3, r2
 800f184:	42ab      	cmp	r3, r5
 800f186:	dc26      	bgt.n	800f1d6 <_printf_common+0x96>
 800f188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f18c:	1e13      	subs	r3, r2, #0
 800f18e:	6822      	ldr	r2, [r4, #0]
 800f190:	bf18      	it	ne
 800f192:	2301      	movne	r3, #1
 800f194:	0692      	lsls	r2, r2, #26
 800f196:	d42b      	bmi.n	800f1f0 <_printf_common+0xb0>
 800f198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f19c:	4649      	mov	r1, r9
 800f19e:	4638      	mov	r0, r7
 800f1a0:	47c0      	blx	r8
 800f1a2:	3001      	adds	r0, #1
 800f1a4:	d01e      	beq.n	800f1e4 <_printf_common+0xa4>
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	68e5      	ldr	r5, [r4, #12]
 800f1aa:	6832      	ldr	r2, [r6, #0]
 800f1ac:	f003 0306 	and.w	r3, r3, #6
 800f1b0:	2b04      	cmp	r3, #4
 800f1b2:	bf08      	it	eq
 800f1b4:	1aad      	subeq	r5, r5, r2
 800f1b6:	68a3      	ldr	r3, [r4, #8]
 800f1b8:	6922      	ldr	r2, [r4, #16]
 800f1ba:	bf0c      	ite	eq
 800f1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1c0:	2500      	movne	r5, #0
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	bfc4      	itt	gt
 800f1c6:	1a9b      	subgt	r3, r3, r2
 800f1c8:	18ed      	addgt	r5, r5, r3
 800f1ca:	2600      	movs	r6, #0
 800f1cc:	341a      	adds	r4, #26
 800f1ce:	42b5      	cmp	r5, r6
 800f1d0:	d11a      	bne.n	800f208 <_printf_common+0xc8>
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	e008      	b.n	800f1e8 <_printf_common+0xa8>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	4652      	mov	r2, sl
 800f1da:	4649      	mov	r1, r9
 800f1dc:	4638      	mov	r0, r7
 800f1de:	47c0      	blx	r8
 800f1e0:	3001      	adds	r0, #1
 800f1e2:	d103      	bne.n	800f1ec <_printf_common+0xac>
 800f1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ec:	3501      	adds	r5, #1
 800f1ee:	e7c6      	b.n	800f17e <_printf_common+0x3e>
 800f1f0:	18e1      	adds	r1, r4, r3
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	2030      	movs	r0, #48	; 0x30
 800f1f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f1fa:	4422      	add	r2, r4
 800f1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f204:	3302      	adds	r3, #2
 800f206:	e7c7      	b.n	800f198 <_printf_common+0x58>
 800f208:	2301      	movs	r3, #1
 800f20a:	4622      	mov	r2, r4
 800f20c:	4649      	mov	r1, r9
 800f20e:	4638      	mov	r0, r7
 800f210:	47c0      	blx	r8
 800f212:	3001      	adds	r0, #1
 800f214:	d0e6      	beq.n	800f1e4 <_printf_common+0xa4>
 800f216:	3601      	adds	r6, #1
 800f218:	e7d9      	b.n	800f1ce <_printf_common+0x8e>
	...

0800f21c <_printf_i>:
 800f21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f220:	7e0f      	ldrb	r7, [r1, #24]
 800f222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f224:	2f78      	cmp	r7, #120	; 0x78
 800f226:	4691      	mov	r9, r2
 800f228:	4680      	mov	r8, r0
 800f22a:	460c      	mov	r4, r1
 800f22c:	469a      	mov	sl, r3
 800f22e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f232:	d807      	bhi.n	800f244 <_printf_i+0x28>
 800f234:	2f62      	cmp	r7, #98	; 0x62
 800f236:	d80a      	bhi.n	800f24e <_printf_i+0x32>
 800f238:	2f00      	cmp	r7, #0
 800f23a:	f000 80d8 	beq.w	800f3ee <_printf_i+0x1d2>
 800f23e:	2f58      	cmp	r7, #88	; 0x58
 800f240:	f000 80a3 	beq.w	800f38a <_printf_i+0x16e>
 800f244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f24c:	e03a      	b.n	800f2c4 <_printf_i+0xa8>
 800f24e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f252:	2b15      	cmp	r3, #21
 800f254:	d8f6      	bhi.n	800f244 <_printf_i+0x28>
 800f256:	a101      	add	r1, pc, #4	; (adr r1, 800f25c <_printf_i+0x40>)
 800f258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f25c:	0800f2b5 	.word	0x0800f2b5
 800f260:	0800f2c9 	.word	0x0800f2c9
 800f264:	0800f245 	.word	0x0800f245
 800f268:	0800f245 	.word	0x0800f245
 800f26c:	0800f245 	.word	0x0800f245
 800f270:	0800f245 	.word	0x0800f245
 800f274:	0800f2c9 	.word	0x0800f2c9
 800f278:	0800f245 	.word	0x0800f245
 800f27c:	0800f245 	.word	0x0800f245
 800f280:	0800f245 	.word	0x0800f245
 800f284:	0800f245 	.word	0x0800f245
 800f288:	0800f3d5 	.word	0x0800f3d5
 800f28c:	0800f2f9 	.word	0x0800f2f9
 800f290:	0800f3b7 	.word	0x0800f3b7
 800f294:	0800f245 	.word	0x0800f245
 800f298:	0800f245 	.word	0x0800f245
 800f29c:	0800f3f7 	.word	0x0800f3f7
 800f2a0:	0800f245 	.word	0x0800f245
 800f2a4:	0800f2f9 	.word	0x0800f2f9
 800f2a8:	0800f245 	.word	0x0800f245
 800f2ac:	0800f245 	.word	0x0800f245
 800f2b0:	0800f3bf 	.word	0x0800f3bf
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	1d1a      	adds	r2, r3, #4
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	602a      	str	r2, [r5, #0]
 800f2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e0a3      	b.n	800f410 <_printf_i+0x1f4>
 800f2c8:	6820      	ldr	r0, [r4, #0]
 800f2ca:	6829      	ldr	r1, [r5, #0]
 800f2cc:	0606      	lsls	r6, r0, #24
 800f2ce:	f101 0304 	add.w	r3, r1, #4
 800f2d2:	d50a      	bpl.n	800f2ea <_printf_i+0xce>
 800f2d4:	680e      	ldr	r6, [r1, #0]
 800f2d6:	602b      	str	r3, [r5, #0]
 800f2d8:	2e00      	cmp	r6, #0
 800f2da:	da03      	bge.n	800f2e4 <_printf_i+0xc8>
 800f2dc:	232d      	movs	r3, #45	; 0x2d
 800f2de:	4276      	negs	r6, r6
 800f2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2e4:	485e      	ldr	r0, [pc, #376]	; (800f460 <_printf_i+0x244>)
 800f2e6:	230a      	movs	r3, #10
 800f2e8:	e019      	b.n	800f31e <_printf_i+0x102>
 800f2ea:	680e      	ldr	r6, [r1, #0]
 800f2ec:	602b      	str	r3, [r5, #0]
 800f2ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f2f2:	bf18      	it	ne
 800f2f4:	b236      	sxthne	r6, r6
 800f2f6:	e7ef      	b.n	800f2d8 <_printf_i+0xbc>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	6820      	ldr	r0, [r4, #0]
 800f2fc:	1d19      	adds	r1, r3, #4
 800f2fe:	6029      	str	r1, [r5, #0]
 800f300:	0601      	lsls	r1, r0, #24
 800f302:	d501      	bpl.n	800f308 <_printf_i+0xec>
 800f304:	681e      	ldr	r6, [r3, #0]
 800f306:	e002      	b.n	800f30e <_printf_i+0xf2>
 800f308:	0646      	lsls	r6, r0, #25
 800f30a:	d5fb      	bpl.n	800f304 <_printf_i+0xe8>
 800f30c:	881e      	ldrh	r6, [r3, #0]
 800f30e:	4854      	ldr	r0, [pc, #336]	; (800f460 <_printf_i+0x244>)
 800f310:	2f6f      	cmp	r7, #111	; 0x6f
 800f312:	bf0c      	ite	eq
 800f314:	2308      	moveq	r3, #8
 800f316:	230a      	movne	r3, #10
 800f318:	2100      	movs	r1, #0
 800f31a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f31e:	6865      	ldr	r5, [r4, #4]
 800f320:	60a5      	str	r5, [r4, #8]
 800f322:	2d00      	cmp	r5, #0
 800f324:	bfa2      	ittt	ge
 800f326:	6821      	ldrge	r1, [r4, #0]
 800f328:	f021 0104 	bicge.w	r1, r1, #4
 800f32c:	6021      	strge	r1, [r4, #0]
 800f32e:	b90e      	cbnz	r6, 800f334 <_printf_i+0x118>
 800f330:	2d00      	cmp	r5, #0
 800f332:	d04d      	beq.n	800f3d0 <_printf_i+0x1b4>
 800f334:	4615      	mov	r5, r2
 800f336:	fbb6 f1f3 	udiv	r1, r6, r3
 800f33a:	fb03 6711 	mls	r7, r3, r1, r6
 800f33e:	5dc7      	ldrb	r7, [r0, r7]
 800f340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f344:	4637      	mov	r7, r6
 800f346:	42bb      	cmp	r3, r7
 800f348:	460e      	mov	r6, r1
 800f34a:	d9f4      	bls.n	800f336 <_printf_i+0x11a>
 800f34c:	2b08      	cmp	r3, #8
 800f34e:	d10b      	bne.n	800f368 <_printf_i+0x14c>
 800f350:	6823      	ldr	r3, [r4, #0]
 800f352:	07de      	lsls	r6, r3, #31
 800f354:	d508      	bpl.n	800f368 <_printf_i+0x14c>
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	6861      	ldr	r1, [r4, #4]
 800f35a:	4299      	cmp	r1, r3
 800f35c:	bfde      	ittt	le
 800f35e:	2330      	movle	r3, #48	; 0x30
 800f360:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f364:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f368:	1b52      	subs	r2, r2, r5
 800f36a:	6122      	str	r2, [r4, #16]
 800f36c:	f8cd a000 	str.w	sl, [sp]
 800f370:	464b      	mov	r3, r9
 800f372:	aa03      	add	r2, sp, #12
 800f374:	4621      	mov	r1, r4
 800f376:	4640      	mov	r0, r8
 800f378:	f7ff fee2 	bl	800f140 <_printf_common>
 800f37c:	3001      	adds	r0, #1
 800f37e:	d14c      	bne.n	800f41a <_printf_i+0x1fe>
 800f380:	f04f 30ff 	mov.w	r0, #4294967295
 800f384:	b004      	add	sp, #16
 800f386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38a:	4835      	ldr	r0, [pc, #212]	; (800f460 <_printf_i+0x244>)
 800f38c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f390:	6829      	ldr	r1, [r5, #0]
 800f392:	6823      	ldr	r3, [r4, #0]
 800f394:	f851 6b04 	ldr.w	r6, [r1], #4
 800f398:	6029      	str	r1, [r5, #0]
 800f39a:	061d      	lsls	r5, r3, #24
 800f39c:	d514      	bpl.n	800f3c8 <_printf_i+0x1ac>
 800f39e:	07df      	lsls	r7, r3, #31
 800f3a0:	bf44      	itt	mi
 800f3a2:	f043 0320 	orrmi.w	r3, r3, #32
 800f3a6:	6023      	strmi	r3, [r4, #0]
 800f3a8:	b91e      	cbnz	r6, 800f3b2 <_printf_i+0x196>
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	f023 0320 	bic.w	r3, r3, #32
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	2310      	movs	r3, #16
 800f3b4:	e7b0      	b.n	800f318 <_printf_i+0xfc>
 800f3b6:	6823      	ldr	r3, [r4, #0]
 800f3b8:	f043 0320 	orr.w	r3, r3, #32
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	2378      	movs	r3, #120	; 0x78
 800f3c0:	4828      	ldr	r0, [pc, #160]	; (800f464 <_printf_i+0x248>)
 800f3c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3c6:	e7e3      	b.n	800f390 <_printf_i+0x174>
 800f3c8:	0659      	lsls	r1, r3, #25
 800f3ca:	bf48      	it	mi
 800f3cc:	b2b6      	uxthmi	r6, r6
 800f3ce:	e7e6      	b.n	800f39e <_printf_i+0x182>
 800f3d0:	4615      	mov	r5, r2
 800f3d2:	e7bb      	b.n	800f34c <_printf_i+0x130>
 800f3d4:	682b      	ldr	r3, [r5, #0]
 800f3d6:	6826      	ldr	r6, [r4, #0]
 800f3d8:	6961      	ldr	r1, [r4, #20]
 800f3da:	1d18      	adds	r0, r3, #4
 800f3dc:	6028      	str	r0, [r5, #0]
 800f3de:	0635      	lsls	r5, r6, #24
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	d501      	bpl.n	800f3e8 <_printf_i+0x1cc>
 800f3e4:	6019      	str	r1, [r3, #0]
 800f3e6:	e002      	b.n	800f3ee <_printf_i+0x1d2>
 800f3e8:	0670      	lsls	r0, r6, #25
 800f3ea:	d5fb      	bpl.n	800f3e4 <_printf_i+0x1c8>
 800f3ec:	8019      	strh	r1, [r3, #0]
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	6123      	str	r3, [r4, #16]
 800f3f2:	4615      	mov	r5, r2
 800f3f4:	e7ba      	b.n	800f36c <_printf_i+0x150>
 800f3f6:	682b      	ldr	r3, [r5, #0]
 800f3f8:	1d1a      	adds	r2, r3, #4
 800f3fa:	602a      	str	r2, [r5, #0]
 800f3fc:	681d      	ldr	r5, [r3, #0]
 800f3fe:	6862      	ldr	r2, [r4, #4]
 800f400:	2100      	movs	r1, #0
 800f402:	4628      	mov	r0, r5
 800f404:	f7f0 ff04 	bl	8000210 <memchr>
 800f408:	b108      	cbz	r0, 800f40e <_printf_i+0x1f2>
 800f40a:	1b40      	subs	r0, r0, r5
 800f40c:	6060      	str	r0, [r4, #4]
 800f40e:	6863      	ldr	r3, [r4, #4]
 800f410:	6123      	str	r3, [r4, #16]
 800f412:	2300      	movs	r3, #0
 800f414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f418:	e7a8      	b.n	800f36c <_printf_i+0x150>
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	462a      	mov	r2, r5
 800f41e:	4649      	mov	r1, r9
 800f420:	4640      	mov	r0, r8
 800f422:	47d0      	blx	sl
 800f424:	3001      	adds	r0, #1
 800f426:	d0ab      	beq.n	800f380 <_printf_i+0x164>
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	079b      	lsls	r3, r3, #30
 800f42c:	d413      	bmi.n	800f456 <_printf_i+0x23a>
 800f42e:	68e0      	ldr	r0, [r4, #12]
 800f430:	9b03      	ldr	r3, [sp, #12]
 800f432:	4298      	cmp	r0, r3
 800f434:	bfb8      	it	lt
 800f436:	4618      	movlt	r0, r3
 800f438:	e7a4      	b.n	800f384 <_printf_i+0x168>
 800f43a:	2301      	movs	r3, #1
 800f43c:	4632      	mov	r2, r6
 800f43e:	4649      	mov	r1, r9
 800f440:	4640      	mov	r0, r8
 800f442:	47d0      	blx	sl
 800f444:	3001      	adds	r0, #1
 800f446:	d09b      	beq.n	800f380 <_printf_i+0x164>
 800f448:	3501      	adds	r5, #1
 800f44a:	68e3      	ldr	r3, [r4, #12]
 800f44c:	9903      	ldr	r1, [sp, #12]
 800f44e:	1a5b      	subs	r3, r3, r1
 800f450:	42ab      	cmp	r3, r5
 800f452:	dcf2      	bgt.n	800f43a <_printf_i+0x21e>
 800f454:	e7eb      	b.n	800f42e <_printf_i+0x212>
 800f456:	2500      	movs	r5, #0
 800f458:	f104 0619 	add.w	r6, r4, #25
 800f45c:	e7f5      	b.n	800f44a <_printf_i+0x22e>
 800f45e:	bf00      	nop
 800f460:	08010d1e 	.word	0x08010d1e
 800f464:	08010d2f 	.word	0x08010d2f

0800f468 <sniprintf>:
 800f468:	b40c      	push	{r2, r3}
 800f46a:	b530      	push	{r4, r5, lr}
 800f46c:	4b17      	ldr	r3, [pc, #92]	; (800f4cc <sniprintf+0x64>)
 800f46e:	1e0c      	subs	r4, r1, #0
 800f470:	681d      	ldr	r5, [r3, #0]
 800f472:	b09d      	sub	sp, #116	; 0x74
 800f474:	da08      	bge.n	800f488 <sniprintf+0x20>
 800f476:	238b      	movs	r3, #139	; 0x8b
 800f478:	602b      	str	r3, [r5, #0]
 800f47a:	f04f 30ff 	mov.w	r0, #4294967295
 800f47e:	b01d      	add	sp, #116	; 0x74
 800f480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f484:	b002      	add	sp, #8
 800f486:	4770      	bx	lr
 800f488:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f48c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f490:	bf14      	ite	ne
 800f492:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f496:	4623      	moveq	r3, r4
 800f498:	9304      	str	r3, [sp, #16]
 800f49a:	9307      	str	r3, [sp, #28]
 800f49c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4a0:	9002      	str	r0, [sp, #8]
 800f4a2:	9006      	str	r0, [sp, #24]
 800f4a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f4aa:	ab21      	add	r3, sp, #132	; 0x84
 800f4ac:	a902      	add	r1, sp, #8
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	f7ff fd45 	bl	800ef40 <_svfiprintf_r>
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	bfbc      	itt	lt
 800f4ba:	238b      	movlt	r3, #139	; 0x8b
 800f4bc:	602b      	strlt	r3, [r5, #0]
 800f4be:	2c00      	cmp	r4, #0
 800f4c0:	d0dd      	beq.n	800f47e <sniprintf+0x16>
 800f4c2:	9b02      	ldr	r3, [sp, #8]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	701a      	strb	r2, [r3, #0]
 800f4c8:	e7d9      	b.n	800f47e <sniprintf+0x16>
 800f4ca:	bf00      	nop
 800f4cc:	20000104 	.word	0x20000104

0800f4d0 <siscanf>:
 800f4d0:	b40e      	push	{r1, r2, r3}
 800f4d2:	b510      	push	{r4, lr}
 800f4d4:	b09f      	sub	sp, #124	; 0x7c
 800f4d6:	ac21      	add	r4, sp, #132	; 0x84
 800f4d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f4dc:	f854 2b04 	ldr.w	r2, [r4], #4
 800f4e0:	9201      	str	r2, [sp, #4]
 800f4e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f4e6:	9004      	str	r0, [sp, #16]
 800f4e8:	9008      	str	r0, [sp, #32]
 800f4ea:	f7f0 fe79 	bl	80001e0 <strlen>
 800f4ee:	4b0c      	ldr	r3, [pc, #48]	; (800f520 <siscanf+0x50>)
 800f4f0:	9005      	str	r0, [sp, #20]
 800f4f2:	9009      	str	r0, [sp, #36]	; 0x24
 800f4f4:	930d      	str	r3, [sp, #52]	; 0x34
 800f4f6:	480b      	ldr	r0, [pc, #44]	; (800f524 <siscanf+0x54>)
 800f4f8:	9a01      	ldr	r2, [sp, #4]
 800f4fa:	6800      	ldr	r0, [r0, #0]
 800f4fc:	9403      	str	r4, [sp, #12]
 800f4fe:	2300      	movs	r3, #0
 800f500:	9311      	str	r3, [sp, #68]	; 0x44
 800f502:	9316      	str	r3, [sp, #88]	; 0x58
 800f504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f508:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f50c:	a904      	add	r1, sp, #16
 800f50e:	4623      	mov	r3, r4
 800f510:	f000 f980 	bl	800f814 <__ssvfiscanf_r>
 800f514:	b01f      	add	sp, #124	; 0x7c
 800f516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f51a:	b003      	add	sp, #12
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	0800de0d 	.word	0x0800de0d
 800f524:	20000104 	.word	0x20000104

0800f528 <strcpy>:
 800f528:	4603      	mov	r3, r0
 800f52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f52e:	f803 2b01 	strb.w	r2, [r3], #1
 800f532:	2a00      	cmp	r2, #0
 800f534:	d1f9      	bne.n	800f52a <strcpy+0x2>
 800f536:	4770      	bx	lr

0800f538 <strncmp>:
 800f538:	b510      	push	{r4, lr}
 800f53a:	b17a      	cbz	r2, 800f55c <strncmp+0x24>
 800f53c:	4603      	mov	r3, r0
 800f53e:	3901      	subs	r1, #1
 800f540:	1884      	adds	r4, r0, r2
 800f542:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f54a:	4290      	cmp	r0, r2
 800f54c:	d101      	bne.n	800f552 <strncmp+0x1a>
 800f54e:	42a3      	cmp	r3, r4
 800f550:	d101      	bne.n	800f556 <strncmp+0x1e>
 800f552:	1a80      	subs	r0, r0, r2
 800f554:	bd10      	pop	{r4, pc}
 800f556:	2800      	cmp	r0, #0
 800f558:	d1f3      	bne.n	800f542 <strncmp+0xa>
 800f55a:	e7fa      	b.n	800f552 <strncmp+0x1a>
 800f55c:	4610      	mov	r0, r2
 800f55e:	e7f9      	b.n	800f554 <strncmp+0x1c>

0800f560 <__tzcalc_limits>:
 800f560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	4605      	mov	r5, r0
 800f566:	f7ff fc73 	bl	800ee50 <__gettzinfo>
 800f56a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800f56e:	429d      	cmp	r5, r3
 800f570:	f340 8099 	ble.w	800f6a6 <__tzcalc_limits+0x146>
 800f574:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800f578:	18ac      	adds	r4, r5, r2
 800f57a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800f57e:	f240 126d 	movw	r2, #365	; 0x16d
 800f582:	10a4      	asrs	r4, r4, #2
 800f584:	fb02 4403 	mla	r4, r2, r3, r4
 800f588:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800f58c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800f590:	fb93 f3f2 	sdiv	r3, r3, r2
 800f594:	441c      	add	r4, r3
 800f596:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f59a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800f59e:	fb95 fcf3 	sdiv	ip, r5, r3
 800f5a2:	fb03 5c1c 	mls	ip, r3, ip, r5
 800f5a6:	186a      	adds	r2, r5, r1
 800f5a8:	fabc f68c 	clz	r6, ip
 800f5ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800f5b0:	f005 0303 	and.w	r3, r5, #3
 800f5b4:	4414      	add	r4, r2
 800f5b6:	2264      	movs	r2, #100	; 0x64
 800f5b8:	6045      	str	r5, [r0, #4]
 800f5ba:	fb95 f7f2 	sdiv	r7, r5, r2
 800f5be:	0976      	lsrs	r6, r6, #5
 800f5c0:	fb02 5717 	mls	r7, r2, r7, r5
 800f5c4:	4601      	mov	r1, r0
 800f5c6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	f04f 0a07 	mov.w	sl, #7
 800f5d0:	7a0d      	ldrb	r5, [r1, #8]
 800f5d2:	694b      	ldr	r3, [r1, #20]
 800f5d4:	2d4a      	cmp	r5, #74	; 0x4a
 800f5d6:	d12d      	bne.n	800f634 <__tzcalc_limits+0xd4>
 800f5d8:	9a00      	ldr	r2, [sp, #0]
 800f5da:	eb04 0e03 	add.w	lr, r4, r3
 800f5de:	b902      	cbnz	r2, 800f5e2 <__tzcalc_limits+0x82>
 800f5e0:	b917      	cbnz	r7, 800f5e8 <__tzcalc_limits+0x88>
 800f5e2:	f1bc 0f00 	cmp.w	ip, #0
 800f5e6:	d123      	bne.n	800f630 <__tzcalc_limits+0xd0>
 800f5e8:	2b3b      	cmp	r3, #59	; 0x3b
 800f5ea:	bfd4      	ite	le
 800f5ec:	2300      	movle	r3, #0
 800f5ee:	2301      	movgt	r3, #1
 800f5f0:	4473      	add	r3, lr
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	698d      	ldr	r5, [r1, #24]
 800f5f6:	4a2d      	ldr	r2, [pc, #180]	; (800f6ac <__tzcalc_limits+0x14c>)
 800f5f8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f5fc:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800f600:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800f602:	18ed      	adds	r5, r5, r3
 800f604:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800f608:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800f60c:	3128      	adds	r1, #40	; 0x28
 800f60e:	458b      	cmp	fp, r1
 800f610:	d1de      	bne.n	800f5d0 <__tzcalc_limits+0x70>
 800f612:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800f616:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800f61a:	428c      	cmp	r4, r1
 800f61c:	eb72 0303 	sbcs.w	r3, r2, r3
 800f620:	bfb4      	ite	lt
 800f622:	2301      	movlt	r3, #1
 800f624:	2300      	movge	r3, #0
 800f626:	6003      	str	r3, [r0, #0]
 800f628:	2001      	movs	r0, #1
 800f62a:	b003      	add	sp, #12
 800f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f630:	2300      	movs	r3, #0
 800f632:	e7dd      	b.n	800f5f0 <__tzcalc_limits+0x90>
 800f634:	2d44      	cmp	r5, #68	; 0x44
 800f636:	d101      	bne.n	800f63c <__tzcalc_limits+0xdc>
 800f638:	4423      	add	r3, r4
 800f63a:	e7db      	b.n	800f5f4 <__tzcalc_limits+0x94>
 800f63c:	9a00      	ldr	r2, [sp, #0]
 800f63e:	bb62      	cbnz	r2, 800f69a <__tzcalc_limits+0x13a>
 800f640:	2f00      	cmp	r7, #0
 800f642:	bf0c      	ite	eq
 800f644:	4635      	moveq	r5, r6
 800f646:	2501      	movne	r5, #1
 800f648:	68ca      	ldr	r2, [r1, #12]
 800f64a:	9201      	str	r2, [sp, #4]
 800f64c:	4a18      	ldr	r2, [pc, #96]	; (800f6b0 <__tzcalc_limits+0x150>)
 800f64e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800f652:	fb09 2505 	mla	r5, r9, r5, r2
 800f656:	46a6      	mov	lr, r4
 800f658:	f04f 0800 	mov.w	r8, #0
 800f65c:	3d04      	subs	r5, #4
 800f65e:	9a01      	ldr	r2, [sp, #4]
 800f660:	f108 0801 	add.w	r8, r8, #1
 800f664:	4542      	cmp	r2, r8
 800f666:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800f66a:	dc18      	bgt.n	800f69e <__tzcalc_limits+0x13e>
 800f66c:	f10e 0504 	add.w	r5, lr, #4
 800f670:	fb95 f8fa 	sdiv	r8, r5, sl
 800f674:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800f678:	eba5 0808 	sub.w	r8, r5, r8
 800f67c:	ebb3 0808 	subs.w	r8, r3, r8
 800f680:	690b      	ldr	r3, [r1, #16]
 800f682:	f103 33ff 	add.w	r3, r3, #4294967295
 800f686:	bf48      	it	mi
 800f688:	f108 0807 	addmi.w	r8, r8, #7
 800f68c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f690:	4443      	add	r3, r8
 800f692:	454b      	cmp	r3, r9
 800f694:	da05      	bge.n	800f6a2 <__tzcalc_limits+0x142>
 800f696:	4473      	add	r3, lr
 800f698:	e7ac      	b.n	800f5f4 <__tzcalc_limits+0x94>
 800f69a:	4635      	mov	r5, r6
 800f69c:	e7d4      	b.n	800f648 <__tzcalc_limits+0xe8>
 800f69e:	44ce      	add	lr, r9
 800f6a0:	e7dd      	b.n	800f65e <__tzcalc_limits+0xfe>
 800f6a2:	3b07      	subs	r3, #7
 800f6a4:	e7f5      	b.n	800f692 <__tzcalc_limits+0x132>
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	e7bf      	b.n	800f62a <__tzcalc_limits+0xca>
 800f6aa:	bf00      	nop
 800f6ac:	00015180 	.word	0x00015180
 800f6b0:	08010d40 	.word	0x08010d40

0800f6b4 <__env_lock>:
 800f6b4:	4801      	ldr	r0, [pc, #4]	; (800f6bc <__env_lock+0x8>)
 800f6b6:	f7fe ba80 	b.w	800dbba <__retarget_lock_acquire_recursive>
 800f6ba:	bf00      	nop
 800f6bc:	20000b10 	.word	0x20000b10

0800f6c0 <__env_unlock>:
 800f6c0:	4801      	ldr	r0, [pc, #4]	; (800f6c8 <__env_unlock+0x8>)
 800f6c2:	f7fe ba7c 	b.w	800dbbe <__retarget_lock_release_recursive>
 800f6c6:	bf00      	nop
 800f6c8:	20000b10 	.word	0x20000b10

0800f6cc <memmove>:
 800f6cc:	4288      	cmp	r0, r1
 800f6ce:	b510      	push	{r4, lr}
 800f6d0:	eb01 0402 	add.w	r4, r1, r2
 800f6d4:	d902      	bls.n	800f6dc <memmove+0x10>
 800f6d6:	4284      	cmp	r4, r0
 800f6d8:	4623      	mov	r3, r4
 800f6da:	d807      	bhi.n	800f6ec <memmove+0x20>
 800f6dc:	1e43      	subs	r3, r0, #1
 800f6de:	42a1      	cmp	r1, r4
 800f6e0:	d008      	beq.n	800f6f4 <memmove+0x28>
 800f6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6ea:	e7f8      	b.n	800f6de <memmove+0x12>
 800f6ec:	4402      	add	r2, r0
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	428a      	cmp	r2, r1
 800f6f2:	d100      	bne.n	800f6f6 <memmove+0x2a>
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6fe:	e7f7      	b.n	800f6f0 <memmove+0x24>

0800f700 <_realloc_r>:
 800f700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f704:	4680      	mov	r8, r0
 800f706:	4614      	mov	r4, r2
 800f708:	460e      	mov	r6, r1
 800f70a:	b921      	cbnz	r1, 800f716 <_realloc_r+0x16>
 800f70c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f710:	4611      	mov	r1, r2
 800f712:	f7fe bad7 	b.w	800dcc4 <_malloc_r>
 800f716:	b92a      	cbnz	r2, 800f724 <_realloc_r+0x24>
 800f718:	f7fe fa68 	bl	800dbec <_free_r>
 800f71c:	4625      	mov	r5, r4
 800f71e:	4628      	mov	r0, r5
 800f720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f724:	f000 fbb2 	bl	800fe8c <_malloc_usable_size_r>
 800f728:	4284      	cmp	r4, r0
 800f72a:	4607      	mov	r7, r0
 800f72c:	d802      	bhi.n	800f734 <_realloc_r+0x34>
 800f72e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f732:	d812      	bhi.n	800f75a <_realloc_r+0x5a>
 800f734:	4621      	mov	r1, r4
 800f736:	4640      	mov	r0, r8
 800f738:	f7fe fac4 	bl	800dcc4 <_malloc_r>
 800f73c:	4605      	mov	r5, r0
 800f73e:	2800      	cmp	r0, #0
 800f740:	d0ed      	beq.n	800f71e <_realloc_r+0x1e>
 800f742:	42bc      	cmp	r4, r7
 800f744:	4622      	mov	r2, r4
 800f746:	4631      	mov	r1, r6
 800f748:	bf28      	it	cs
 800f74a:	463a      	movcs	r2, r7
 800f74c:	f7fe fa38 	bl	800dbc0 <memcpy>
 800f750:	4631      	mov	r1, r6
 800f752:	4640      	mov	r0, r8
 800f754:	f7fe fa4a 	bl	800dbec <_free_r>
 800f758:	e7e1      	b.n	800f71e <_realloc_r+0x1e>
 800f75a:	4635      	mov	r5, r6
 800f75c:	e7df      	b.n	800f71e <_realloc_r+0x1e>

0800f75e <_sungetc_r>:
 800f75e:	b538      	push	{r3, r4, r5, lr}
 800f760:	1c4b      	adds	r3, r1, #1
 800f762:	4614      	mov	r4, r2
 800f764:	d103      	bne.n	800f76e <_sungetc_r+0x10>
 800f766:	f04f 35ff 	mov.w	r5, #4294967295
 800f76a:	4628      	mov	r0, r5
 800f76c:	bd38      	pop	{r3, r4, r5, pc}
 800f76e:	8993      	ldrh	r3, [r2, #12]
 800f770:	f023 0320 	bic.w	r3, r3, #32
 800f774:	8193      	strh	r3, [r2, #12]
 800f776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f778:	6852      	ldr	r2, [r2, #4]
 800f77a:	b2cd      	uxtb	r5, r1
 800f77c:	b18b      	cbz	r3, 800f7a2 <_sungetc_r+0x44>
 800f77e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f780:	4293      	cmp	r3, r2
 800f782:	dd08      	ble.n	800f796 <_sungetc_r+0x38>
 800f784:	6823      	ldr	r3, [r4, #0]
 800f786:	1e5a      	subs	r2, r3, #1
 800f788:	6022      	str	r2, [r4, #0]
 800f78a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f78e:	6863      	ldr	r3, [r4, #4]
 800f790:	3301      	adds	r3, #1
 800f792:	6063      	str	r3, [r4, #4]
 800f794:	e7e9      	b.n	800f76a <_sungetc_r+0xc>
 800f796:	4621      	mov	r1, r4
 800f798:	f000 fb3e 	bl	800fe18 <__submore>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d0f1      	beq.n	800f784 <_sungetc_r+0x26>
 800f7a0:	e7e1      	b.n	800f766 <_sungetc_r+0x8>
 800f7a2:	6921      	ldr	r1, [r4, #16]
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	b151      	cbz	r1, 800f7be <_sungetc_r+0x60>
 800f7a8:	4299      	cmp	r1, r3
 800f7aa:	d208      	bcs.n	800f7be <_sungetc_r+0x60>
 800f7ac:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f7b0:	42a9      	cmp	r1, r5
 800f7b2:	d104      	bne.n	800f7be <_sungetc_r+0x60>
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	3201      	adds	r2, #1
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	6062      	str	r2, [r4, #4]
 800f7bc:	e7d5      	b.n	800f76a <_sungetc_r+0xc>
 800f7be:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f7c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7c6:	6363      	str	r3, [r4, #52]	; 0x34
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	63a3      	str	r3, [r4, #56]	; 0x38
 800f7cc:	4623      	mov	r3, r4
 800f7ce:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f7d2:	6023      	str	r3, [r4, #0]
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e7dc      	b.n	800f792 <_sungetc_r+0x34>

0800f7d8 <__ssrefill_r>:
 800f7d8:	b510      	push	{r4, lr}
 800f7da:	460c      	mov	r4, r1
 800f7dc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f7de:	b169      	cbz	r1, 800f7fc <__ssrefill_r+0x24>
 800f7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7e4:	4299      	cmp	r1, r3
 800f7e6:	d001      	beq.n	800f7ec <__ssrefill_r+0x14>
 800f7e8:	f7fe fa00 	bl	800dbec <_free_r>
 800f7ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7ee:	6063      	str	r3, [r4, #4]
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	6360      	str	r0, [r4, #52]	; 0x34
 800f7f4:	b113      	cbz	r3, 800f7fc <__ssrefill_r+0x24>
 800f7f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7f8:	6023      	str	r3, [r4, #0]
 800f7fa:	bd10      	pop	{r4, pc}
 800f7fc:	6923      	ldr	r3, [r4, #16]
 800f7fe:	6023      	str	r3, [r4, #0]
 800f800:	2300      	movs	r3, #0
 800f802:	6063      	str	r3, [r4, #4]
 800f804:	89a3      	ldrh	r3, [r4, #12]
 800f806:	f043 0320 	orr.w	r3, r3, #32
 800f80a:	81a3      	strh	r3, [r4, #12]
 800f80c:	f04f 30ff 	mov.w	r0, #4294967295
 800f810:	e7f3      	b.n	800f7fa <__ssrefill_r+0x22>
	...

0800f814 <__ssvfiscanf_r>:
 800f814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f818:	460c      	mov	r4, r1
 800f81a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f81e:	2100      	movs	r1, #0
 800f820:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f824:	49a6      	ldr	r1, [pc, #664]	; (800fac0 <__ssvfiscanf_r+0x2ac>)
 800f826:	91a0      	str	r1, [sp, #640]	; 0x280
 800f828:	f10d 0804 	add.w	r8, sp, #4
 800f82c:	49a5      	ldr	r1, [pc, #660]	; (800fac4 <__ssvfiscanf_r+0x2b0>)
 800f82e:	4fa6      	ldr	r7, [pc, #664]	; (800fac8 <__ssvfiscanf_r+0x2b4>)
 800f830:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800facc <__ssvfiscanf_r+0x2b8>
 800f834:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f838:	4606      	mov	r6, r0
 800f83a:	91a1      	str	r1, [sp, #644]	; 0x284
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	7813      	ldrb	r3, [r2, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 815a 	beq.w	800fafa <__ssvfiscanf_r+0x2e6>
 800f846:	5dd9      	ldrb	r1, [r3, r7]
 800f848:	f011 0108 	ands.w	r1, r1, #8
 800f84c:	f102 0501 	add.w	r5, r2, #1
 800f850:	d019      	beq.n	800f886 <__ssvfiscanf_r+0x72>
 800f852:	6863      	ldr	r3, [r4, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	dd0f      	ble.n	800f878 <__ssvfiscanf_r+0x64>
 800f858:	6823      	ldr	r3, [r4, #0]
 800f85a:	781a      	ldrb	r2, [r3, #0]
 800f85c:	5cba      	ldrb	r2, [r7, r2]
 800f85e:	0712      	lsls	r2, r2, #28
 800f860:	d401      	bmi.n	800f866 <__ssvfiscanf_r+0x52>
 800f862:	462a      	mov	r2, r5
 800f864:	e7eb      	b.n	800f83e <__ssvfiscanf_r+0x2a>
 800f866:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f868:	3201      	adds	r2, #1
 800f86a:	9245      	str	r2, [sp, #276]	; 0x114
 800f86c:	6862      	ldr	r2, [r4, #4]
 800f86e:	3301      	adds	r3, #1
 800f870:	3a01      	subs	r2, #1
 800f872:	6062      	str	r2, [r4, #4]
 800f874:	6023      	str	r3, [r4, #0]
 800f876:	e7ec      	b.n	800f852 <__ssvfiscanf_r+0x3e>
 800f878:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f87a:	4621      	mov	r1, r4
 800f87c:	4630      	mov	r0, r6
 800f87e:	4798      	blx	r3
 800f880:	2800      	cmp	r0, #0
 800f882:	d0e9      	beq.n	800f858 <__ssvfiscanf_r+0x44>
 800f884:	e7ed      	b.n	800f862 <__ssvfiscanf_r+0x4e>
 800f886:	2b25      	cmp	r3, #37	; 0x25
 800f888:	d012      	beq.n	800f8b0 <__ssvfiscanf_r+0x9c>
 800f88a:	469a      	mov	sl, r3
 800f88c:	6863      	ldr	r3, [r4, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f340 8091 	ble.w	800f9b6 <__ssvfiscanf_r+0x1a2>
 800f894:	6822      	ldr	r2, [r4, #0]
 800f896:	7813      	ldrb	r3, [r2, #0]
 800f898:	4553      	cmp	r3, sl
 800f89a:	f040 812e 	bne.w	800fafa <__ssvfiscanf_r+0x2e6>
 800f89e:	6863      	ldr	r3, [r4, #4]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	6063      	str	r3, [r4, #4]
 800f8a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f8a6:	3201      	adds	r2, #1
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	6022      	str	r2, [r4, #0]
 800f8ac:	9345      	str	r3, [sp, #276]	; 0x114
 800f8ae:	e7d8      	b.n	800f862 <__ssvfiscanf_r+0x4e>
 800f8b0:	9141      	str	r1, [sp, #260]	; 0x104
 800f8b2:	9143      	str	r1, [sp, #268]	; 0x10c
 800f8b4:	7853      	ldrb	r3, [r2, #1]
 800f8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8b8:	bf02      	ittt	eq
 800f8ba:	2310      	moveq	r3, #16
 800f8bc:	1c95      	addeq	r5, r2, #2
 800f8be:	9341      	streq	r3, [sp, #260]	; 0x104
 800f8c0:	220a      	movs	r2, #10
 800f8c2:	46aa      	mov	sl, r5
 800f8c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f8c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f8cc:	2b09      	cmp	r3, #9
 800f8ce:	d91d      	bls.n	800f90c <__ssvfiscanf_r+0xf8>
 800f8d0:	487e      	ldr	r0, [pc, #504]	; (800facc <__ssvfiscanf_r+0x2b8>)
 800f8d2:	2203      	movs	r2, #3
 800f8d4:	f7f0 fc9c 	bl	8000210 <memchr>
 800f8d8:	b140      	cbz	r0, 800f8ec <__ssvfiscanf_r+0xd8>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	eba0 0009 	sub.w	r0, r0, r9
 800f8e0:	fa03 f000 	lsl.w	r0, r3, r0
 800f8e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8e6:	4318      	orrs	r0, r3
 800f8e8:	9041      	str	r0, [sp, #260]	; 0x104
 800f8ea:	4655      	mov	r5, sl
 800f8ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f8f0:	2b78      	cmp	r3, #120	; 0x78
 800f8f2:	d806      	bhi.n	800f902 <__ssvfiscanf_r+0xee>
 800f8f4:	2b57      	cmp	r3, #87	; 0x57
 800f8f6:	d810      	bhi.n	800f91a <__ssvfiscanf_r+0x106>
 800f8f8:	2b25      	cmp	r3, #37	; 0x25
 800f8fa:	d0c6      	beq.n	800f88a <__ssvfiscanf_r+0x76>
 800f8fc:	d856      	bhi.n	800f9ac <__ssvfiscanf_r+0x198>
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d064      	beq.n	800f9cc <__ssvfiscanf_r+0x1b8>
 800f902:	2303      	movs	r3, #3
 800f904:	9347      	str	r3, [sp, #284]	; 0x11c
 800f906:	230a      	movs	r3, #10
 800f908:	9342      	str	r3, [sp, #264]	; 0x108
 800f90a:	e071      	b.n	800f9f0 <__ssvfiscanf_r+0x1dc>
 800f90c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f90e:	fb02 1103 	mla	r1, r2, r3, r1
 800f912:	3930      	subs	r1, #48	; 0x30
 800f914:	9143      	str	r1, [sp, #268]	; 0x10c
 800f916:	4655      	mov	r5, sl
 800f918:	e7d3      	b.n	800f8c2 <__ssvfiscanf_r+0xae>
 800f91a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f91e:	2a20      	cmp	r2, #32
 800f920:	d8ef      	bhi.n	800f902 <__ssvfiscanf_r+0xee>
 800f922:	a101      	add	r1, pc, #4	; (adr r1, 800f928 <__ssvfiscanf_r+0x114>)
 800f924:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f928:	0800f9db 	.word	0x0800f9db
 800f92c:	0800f903 	.word	0x0800f903
 800f930:	0800f903 	.word	0x0800f903
 800f934:	0800fa39 	.word	0x0800fa39
 800f938:	0800f903 	.word	0x0800f903
 800f93c:	0800f903 	.word	0x0800f903
 800f940:	0800f903 	.word	0x0800f903
 800f944:	0800f903 	.word	0x0800f903
 800f948:	0800f903 	.word	0x0800f903
 800f94c:	0800f903 	.word	0x0800f903
 800f950:	0800f903 	.word	0x0800f903
 800f954:	0800fa4f 	.word	0x0800fa4f
 800f958:	0800fa25 	.word	0x0800fa25
 800f95c:	0800f9b3 	.word	0x0800f9b3
 800f960:	0800f9b3 	.word	0x0800f9b3
 800f964:	0800f9b3 	.word	0x0800f9b3
 800f968:	0800f903 	.word	0x0800f903
 800f96c:	0800fa29 	.word	0x0800fa29
 800f970:	0800f903 	.word	0x0800f903
 800f974:	0800f903 	.word	0x0800f903
 800f978:	0800f903 	.word	0x0800f903
 800f97c:	0800f903 	.word	0x0800f903
 800f980:	0800fa5f 	.word	0x0800fa5f
 800f984:	0800fa31 	.word	0x0800fa31
 800f988:	0800f9d3 	.word	0x0800f9d3
 800f98c:	0800f903 	.word	0x0800f903
 800f990:	0800f903 	.word	0x0800f903
 800f994:	0800fa5b 	.word	0x0800fa5b
 800f998:	0800f903 	.word	0x0800f903
 800f99c:	0800fa25 	.word	0x0800fa25
 800f9a0:	0800f903 	.word	0x0800f903
 800f9a4:	0800f903 	.word	0x0800f903
 800f9a8:	0800f9db 	.word	0x0800f9db
 800f9ac:	3b45      	subs	r3, #69	; 0x45
 800f9ae:	2b02      	cmp	r3, #2
 800f9b0:	d8a7      	bhi.n	800f902 <__ssvfiscanf_r+0xee>
 800f9b2:	2305      	movs	r3, #5
 800f9b4:	e01b      	b.n	800f9ee <__ssvfiscanf_r+0x1da>
 800f9b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f9b8:	4621      	mov	r1, r4
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	4798      	blx	r3
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	f43f af68 	beq.w	800f894 <__ssvfiscanf_r+0x80>
 800f9c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f040 808d 	bne.w	800fae6 <__ssvfiscanf_r+0x2d2>
 800f9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d0:	e08f      	b.n	800faf2 <__ssvfiscanf_r+0x2de>
 800f9d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f9d4:	f042 0220 	orr.w	r2, r2, #32
 800f9d8:	9241      	str	r2, [sp, #260]	; 0x104
 800f9da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f9dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9e0:	9241      	str	r2, [sp, #260]	; 0x104
 800f9e2:	2210      	movs	r2, #16
 800f9e4:	2b6f      	cmp	r3, #111	; 0x6f
 800f9e6:	9242      	str	r2, [sp, #264]	; 0x108
 800f9e8:	bf34      	ite	cc
 800f9ea:	2303      	movcc	r3, #3
 800f9ec:	2304      	movcs	r3, #4
 800f9ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800f9f0:	6863      	ldr	r3, [r4, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	dd42      	ble.n	800fa7c <__ssvfiscanf_r+0x268>
 800f9f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f9f8:	0659      	lsls	r1, r3, #25
 800f9fa:	d404      	bmi.n	800fa06 <__ssvfiscanf_r+0x1f2>
 800f9fc:	6823      	ldr	r3, [r4, #0]
 800f9fe:	781a      	ldrb	r2, [r3, #0]
 800fa00:	5cba      	ldrb	r2, [r7, r2]
 800fa02:	0712      	lsls	r2, r2, #28
 800fa04:	d441      	bmi.n	800fa8a <__ssvfiscanf_r+0x276>
 800fa06:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	dc50      	bgt.n	800faae <__ssvfiscanf_r+0x29a>
 800fa0c:	466b      	mov	r3, sp
 800fa0e:	4622      	mov	r2, r4
 800fa10:	a941      	add	r1, sp, #260	; 0x104
 800fa12:	4630      	mov	r0, r6
 800fa14:	f000 f876 	bl	800fb04 <_scanf_chars>
 800fa18:	2801      	cmp	r0, #1
 800fa1a:	d06e      	beq.n	800fafa <__ssvfiscanf_r+0x2e6>
 800fa1c:	2802      	cmp	r0, #2
 800fa1e:	f47f af20 	bne.w	800f862 <__ssvfiscanf_r+0x4e>
 800fa22:	e7cf      	b.n	800f9c4 <__ssvfiscanf_r+0x1b0>
 800fa24:	220a      	movs	r2, #10
 800fa26:	e7dd      	b.n	800f9e4 <__ssvfiscanf_r+0x1d0>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	9342      	str	r3, [sp, #264]	; 0x108
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	e7de      	b.n	800f9ee <__ssvfiscanf_r+0x1da>
 800fa30:	2308      	movs	r3, #8
 800fa32:	9342      	str	r3, [sp, #264]	; 0x108
 800fa34:	2304      	movs	r3, #4
 800fa36:	e7da      	b.n	800f9ee <__ssvfiscanf_r+0x1da>
 800fa38:	4629      	mov	r1, r5
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	f000 f9b4 	bl	800fda8 <__sccl>
 800fa40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa46:	9341      	str	r3, [sp, #260]	; 0x104
 800fa48:	4605      	mov	r5, r0
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e7cf      	b.n	800f9ee <__ssvfiscanf_r+0x1da>
 800fa4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa54:	9341      	str	r3, [sp, #260]	; 0x104
 800fa56:	2300      	movs	r3, #0
 800fa58:	e7c9      	b.n	800f9ee <__ssvfiscanf_r+0x1da>
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	e7c7      	b.n	800f9ee <__ssvfiscanf_r+0x1da>
 800fa5e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fa60:	06c3      	lsls	r3, r0, #27
 800fa62:	f53f aefe 	bmi.w	800f862 <__ssvfiscanf_r+0x4e>
 800fa66:	9b00      	ldr	r3, [sp, #0]
 800fa68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa6a:	1d19      	adds	r1, r3, #4
 800fa6c:	9100      	str	r1, [sp, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f010 0f01 	tst.w	r0, #1
 800fa74:	bf14      	ite	ne
 800fa76:	801a      	strhne	r2, [r3, #0]
 800fa78:	601a      	streq	r2, [r3, #0]
 800fa7a:	e6f2      	b.n	800f862 <__ssvfiscanf_r+0x4e>
 800fa7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa7e:	4621      	mov	r1, r4
 800fa80:	4630      	mov	r0, r6
 800fa82:	4798      	blx	r3
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d0b6      	beq.n	800f9f6 <__ssvfiscanf_r+0x1e2>
 800fa88:	e79c      	b.n	800f9c4 <__ssvfiscanf_r+0x1b0>
 800fa8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa8c:	3201      	adds	r2, #1
 800fa8e:	9245      	str	r2, [sp, #276]	; 0x114
 800fa90:	6862      	ldr	r2, [r4, #4]
 800fa92:	3a01      	subs	r2, #1
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	6062      	str	r2, [r4, #4]
 800fa98:	dd02      	ble.n	800faa0 <__ssvfiscanf_r+0x28c>
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	6023      	str	r3, [r4, #0]
 800fa9e:	e7ad      	b.n	800f9fc <__ssvfiscanf_r+0x1e8>
 800faa0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800faa2:	4621      	mov	r1, r4
 800faa4:	4630      	mov	r0, r6
 800faa6:	4798      	blx	r3
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d0a7      	beq.n	800f9fc <__ssvfiscanf_r+0x1e8>
 800faac:	e78a      	b.n	800f9c4 <__ssvfiscanf_r+0x1b0>
 800faae:	2b04      	cmp	r3, #4
 800fab0:	dc0e      	bgt.n	800fad0 <__ssvfiscanf_r+0x2bc>
 800fab2:	466b      	mov	r3, sp
 800fab4:	4622      	mov	r2, r4
 800fab6:	a941      	add	r1, sp, #260	; 0x104
 800fab8:	4630      	mov	r0, r6
 800faba:	f000 f87d 	bl	800fbb8 <_scanf_i>
 800fabe:	e7ab      	b.n	800fa18 <__ssvfiscanf_r+0x204>
 800fac0:	0800f75f 	.word	0x0800f75f
 800fac4:	0800f7d9 	.word	0x0800f7d9
 800fac8:	08010c0d 	.word	0x08010c0d
 800facc:	08010d13 	.word	0x08010d13
 800fad0:	4b0b      	ldr	r3, [pc, #44]	; (800fb00 <__ssvfiscanf_r+0x2ec>)
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	f43f aec5 	beq.w	800f862 <__ssvfiscanf_r+0x4e>
 800fad8:	466b      	mov	r3, sp
 800fada:	4622      	mov	r2, r4
 800fadc:	a941      	add	r1, sp, #260	; 0x104
 800fade:	4630      	mov	r0, r6
 800fae0:	f3af 8000 	nop.w
 800fae4:	e798      	b.n	800fa18 <__ssvfiscanf_r+0x204>
 800fae6:	89a3      	ldrh	r3, [r4, #12]
 800fae8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800faec:	bf18      	it	ne
 800faee:	f04f 30ff 	movne.w	r0, #4294967295
 800faf2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fafc:	e7f9      	b.n	800faf2 <__ssvfiscanf_r+0x2de>
 800fafe:	bf00      	nop
 800fb00:	00000000 	.word	0x00000000

0800fb04 <_scanf_chars>:
 800fb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb08:	4615      	mov	r5, r2
 800fb0a:	688a      	ldr	r2, [r1, #8]
 800fb0c:	4680      	mov	r8, r0
 800fb0e:	460c      	mov	r4, r1
 800fb10:	b932      	cbnz	r2, 800fb20 <_scanf_chars+0x1c>
 800fb12:	698a      	ldr	r2, [r1, #24]
 800fb14:	2a00      	cmp	r2, #0
 800fb16:	bf0c      	ite	eq
 800fb18:	2201      	moveq	r2, #1
 800fb1a:	f04f 32ff 	movne.w	r2, #4294967295
 800fb1e:	608a      	str	r2, [r1, #8]
 800fb20:	6822      	ldr	r2, [r4, #0]
 800fb22:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fbb4 <_scanf_chars+0xb0>
 800fb26:	06d1      	lsls	r1, r2, #27
 800fb28:	bf5f      	itttt	pl
 800fb2a:	681a      	ldrpl	r2, [r3, #0]
 800fb2c:	1d11      	addpl	r1, r2, #4
 800fb2e:	6019      	strpl	r1, [r3, #0]
 800fb30:	6816      	ldrpl	r6, [r2, #0]
 800fb32:	2700      	movs	r7, #0
 800fb34:	69a0      	ldr	r0, [r4, #24]
 800fb36:	b188      	cbz	r0, 800fb5c <_scanf_chars+0x58>
 800fb38:	2801      	cmp	r0, #1
 800fb3a:	d107      	bne.n	800fb4c <_scanf_chars+0x48>
 800fb3c:	682a      	ldr	r2, [r5, #0]
 800fb3e:	7811      	ldrb	r1, [r2, #0]
 800fb40:	6962      	ldr	r2, [r4, #20]
 800fb42:	5c52      	ldrb	r2, [r2, r1]
 800fb44:	b952      	cbnz	r2, 800fb5c <_scanf_chars+0x58>
 800fb46:	2f00      	cmp	r7, #0
 800fb48:	d031      	beq.n	800fbae <_scanf_chars+0xaa>
 800fb4a:	e022      	b.n	800fb92 <_scanf_chars+0x8e>
 800fb4c:	2802      	cmp	r0, #2
 800fb4e:	d120      	bne.n	800fb92 <_scanf_chars+0x8e>
 800fb50:	682b      	ldr	r3, [r5, #0]
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fb58:	071b      	lsls	r3, r3, #28
 800fb5a:	d41a      	bmi.n	800fb92 <_scanf_chars+0x8e>
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	06da      	lsls	r2, r3, #27
 800fb60:	bf5e      	ittt	pl
 800fb62:	682b      	ldrpl	r3, [r5, #0]
 800fb64:	781b      	ldrbpl	r3, [r3, #0]
 800fb66:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fb6a:	682a      	ldr	r2, [r5, #0]
 800fb6c:	686b      	ldr	r3, [r5, #4]
 800fb6e:	3201      	adds	r2, #1
 800fb70:	602a      	str	r2, [r5, #0]
 800fb72:	68a2      	ldr	r2, [r4, #8]
 800fb74:	3b01      	subs	r3, #1
 800fb76:	3a01      	subs	r2, #1
 800fb78:	606b      	str	r3, [r5, #4]
 800fb7a:	3701      	adds	r7, #1
 800fb7c:	60a2      	str	r2, [r4, #8]
 800fb7e:	b142      	cbz	r2, 800fb92 <_scanf_chars+0x8e>
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	dcd7      	bgt.n	800fb34 <_scanf_chars+0x30>
 800fb84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb88:	4629      	mov	r1, r5
 800fb8a:	4640      	mov	r0, r8
 800fb8c:	4798      	blx	r3
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d0d0      	beq.n	800fb34 <_scanf_chars+0x30>
 800fb92:	6823      	ldr	r3, [r4, #0]
 800fb94:	f013 0310 	ands.w	r3, r3, #16
 800fb98:	d105      	bne.n	800fba6 <_scanf_chars+0xa2>
 800fb9a:	68e2      	ldr	r2, [r4, #12]
 800fb9c:	3201      	adds	r2, #1
 800fb9e:	60e2      	str	r2, [r4, #12]
 800fba0:	69a2      	ldr	r2, [r4, #24]
 800fba2:	b102      	cbz	r2, 800fba6 <_scanf_chars+0xa2>
 800fba4:	7033      	strb	r3, [r6, #0]
 800fba6:	6923      	ldr	r3, [r4, #16]
 800fba8:	443b      	add	r3, r7
 800fbaa:	6123      	str	r3, [r4, #16]
 800fbac:	2000      	movs	r0, #0
 800fbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb2:	bf00      	nop
 800fbb4:	08010c0d 	.word	0x08010c0d

0800fbb8 <_scanf_i>:
 800fbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbbc:	4698      	mov	r8, r3
 800fbbe:	4b76      	ldr	r3, [pc, #472]	; (800fd98 <_scanf_i+0x1e0>)
 800fbc0:	460c      	mov	r4, r1
 800fbc2:	4682      	mov	sl, r0
 800fbc4:	4616      	mov	r6, r2
 800fbc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbca:	b087      	sub	sp, #28
 800fbcc:	ab03      	add	r3, sp, #12
 800fbce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbd2:	4b72      	ldr	r3, [pc, #456]	; (800fd9c <_scanf_i+0x1e4>)
 800fbd4:	69a1      	ldr	r1, [r4, #24]
 800fbd6:	4a72      	ldr	r2, [pc, #456]	; (800fda0 <_scanf_i+0x1e8>)
 800fbd8:	2903      	cmp	r1, #3
 800fbda:	bf18      	it	ne
 800fbdc:	461a      	movne	r2, r3
 800fbde:	68a3      	ldr	r3, [r4, #8]
 800fbe0:	9201      	str	r2, [sp, #4]
 800fbe2:	1e5a      	subs	r2, r3, #1
 800fbe4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fbe8:	bf88      	it	hi
 800fbea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fbee:	4627      	mov	r7, r4
 800fbf0:	bf82      	ittt	hi
 800fbf2:	eb03 0905 	addhi.w	r9, r3, r5
 800fbf6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fbfa:	60a3      	strhi	r3, [r4, #8]
 800fbfc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fc00:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fc04:	bf98      	it	ls
 800fc06:	f04f 0900 	movls.w	r9, #0
 800fc0a:	6023      	str	r3, [r4, #0]
 800fc0c:	463d      	mov	r5, r7
 800fc0e:	f04f 0b00 	mov.w	fp, #0
 800fc12:	6831      	ldr	r1, [r6, #0]
 800fc14:	ab03      	add	r3, sp, #12
 800fc16:	7809      	ldrb	r1, [r1, #0]
 800fc18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fc1c:	2202      	movs	r2, #2
 800fc1e:	f7f0 faf7 	bl	8000210 <memchr>
 800fc22:	b328      	cbz	r0, 800fc70 <_scanf_i+0xb8>
 800fc24:	f1bb 0f01 	cmp.w	fp, #1
 800fc28:	d159      	bne.n	800fcde <_scanf_i+0x126>
 800fc2a:	6862      	ldr	r2, [r4, #4]
 800fc2c:	b92a      	cbnz	r2, 800fc3a <_scanf_i+0x82>
 800fc2e:	6822      	ldr	r2, [r4, #0]
 800fc30:	2308      	movs	r3, #8
 800fc32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc36:	6063      	str	r3, [r4, #4]
 800fc38:	6022      	str	r2, [r4, #0]
 800fc3a:	6822      	ldr	r2, [r4, #0]
 800fc3c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fc40:	6022      	str	r2, [r4, #0]
 800fc42:	68a2      	ldr	r2, [r4, #8]
 800fc44:	1e51      	subs	r1, r2, #1
 800fc46:	60a1      	str	r1, [r4, #8]
 800fc48:	b192      	cbz	r2, 800fc70 <_scanf_i+0xb8>
 800fc4a:	6832      	ldr	r2, [r6, #0]
 800fc4c:	1c51      	adds	r1, r2, #1
 800fc4e:	6031      	str	r1, [r6, #0]
 800fc50:	7812      	ldrb	r2, [r2, #0]
 800fc52:	f805 2b01 	strb.w	r2, [r5], #1
 800fc56:	6872      	ldr	r2, [r6, #4]
 800fc58:	3a01      	subs	r2, #1
 800fc5a:	2a00      	cmp	r2, #0
 800fc5c:	6072      	str	r2, [r6, #4]
 800fc5e:	dc07      	bgt.n	800fc70 <_scanf_i+0xb8>
 800fc60:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fc64:	4631      	mov	r1, r6
 800fc66:	4650      	mov	r0, sl
 800fc68:	4790      	blx	r2
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	f040 8085 	bne.w	800fd7a <_scanf_i+0x1c2>
 800fc70:	f10b 0b01 	add.w	fp, fp, #1
 800fc74:	f1bb 0f03 	cmp.w	fp, #3
 800fc78:	d1cb      	bne.n	800fc12 <_scanf_i+0x5a>
 800fc7a:	6863      	ldr	r3, [r4, #4]
 800fc7c:	b90b      	cbnz	r3, 800fc82 <_scanf_i+0xca>
 800fc7e:	230a      	movs	r3, #10
 800fc80:	6063      	str	r3, [r4, #4]
 800fc82:	6863      	ldr	r3, [r4, #4]
 800fc84:	4947      	ldr	r1, [pc, #284]	; (800fda4 <_scanf_i+0x1ec>)
 800fc86:	6960      	ldr	r0, [r4, #20]
 800fc88:	1ac9      	subs	r1, r1, r3
 800fc8a:	f000 f88d 	bl	800fda8 <__sccl>
 800fc8e:	f04f 0b00 	mov.w	fp, #0
 800fc92:	68a3      	ldr	r3, [r4, #8]
 800fc94:	6822      	ldr	r2, [r4, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d03d      	beq.n	800fd16 <_scanf_i+0x15e>
 800fc9a:	6831      	ldr	r1, [r6, #0]
 800fc9c:	6960      	ldr	r0, [r4, #20]
 800fc9e:	f891 c000 	ldrb.w	ip, [r1]
 800fca2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d035      	beq.n	800fd16 <_scanf_i+0x15e>
 800fcaa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fcae:	d124      	bne.n	800fcfa <_scanf_i+0x142>
 800fcb0:	0510      	lsls	r0, r2, #20
 800fcb2:	d522      	bpl.n	800fcfa <_scanf_i+0x142>
 800fcb4:	f10b 0b01 	add.w	fp, fp, #1
 800fcb8:	f1b9 0f00 	cmp.w	r9, #0
 800fcbc:	d003      	beq.n	800fcc6 <_scanf_i+0x10e>
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	f109 39ff 	add.w	r9, r9, #4294967295
 800fcc4:	60a3      	str	r3, [r4, #8]
 800fcc6:	6873      	ldr	r3, [r6, #4]
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	6073      	str	r3, [r6, #4]
 800fcce:	dd1b      	ble.n	800fd08 <_scanf_i+0x150>
 800fcd0:	6833      	ldr	r3, [r6, #0]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	6033      	str	r3, [r6, #0]
 800fcd6:	68a3      	ldr	r3, [r4, #8]
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	60a3      	str	r3, [r4, #8]
 800fcdc:	e7d9      	b.n	800fc92 <_scanf_i+0xda>
 800fcde:	f1bb 0f02 	cmp.w	fp, #2
 800fce2:	d1ae      	bne.n	800fc42 <_scanf_i+0x8a>
 800fce4:	6822      	ldr	r2, [r4, #0]
 800fce6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fcea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fcee:	d1bf      	bne.n	800fc70 <_scanf_i+0xb8>
 800fcf0:	2310      	movs	r3, #16
 800fcf2:	6063      	str	r3, [r4, #4]
 800fcf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fcf8:	e7a2      	b.n	800fc40 <_scanf_i+0x88>
 800fcfa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fcfe:	6022      	str	r2, [r4, #0]
 800fd00:	780b      	ldrb	r3, [r1, #0]
 800fd02:	f805 3b01 	strb.w	r3, [r5], #1
 800fd06:	e7de      	b.n	800fcc6 <_scanf_i+0x10e>
 800fd08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fd0c:	4631      	mov	r1, r6
 800fd0e:	4650      	mov	r0, sl
 800fd10:	4798      	blx	r3
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d0df      	beq.n	800fcd6 <_scanf_i+0x11e>
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	05db      	lsls	r3, r3, #23
 800fd1a:	d50d      	bpl.n	800fd38 <_scanf_i+0x180>
 800fd1c:	42bd      	cmp	r5, r7
 800fd1e:	d909      	bls.n	800fd34 <_scanf_i+0x17c>
 800fd20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fd24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd28:	4632      	mov	r2, r6
 800fd2a:	4650      	mov	r0, sl
 800fd2c:	4798      	blx	r3
 800fd2e:	f105 39ff 	add.w	r9, r5, #4294967295
 800fd32:	464d      	mov	r5, r9
 800fd34:	42bd      	cmp	r5, r7
 800fd36:	d02d      	beq.n	800fd94 <_scanf_i+0x1dc>
 800fd38:	6822      	ldr	r2, [r4, #0]
 800fd3a:	f012 0210 	ands.w	r2, r2, #16
 800fd3e:	d113      	bne.n	800fd68 <_scanf_i+0x1b0>
 800fd40:	702a      	strb	r2, [r5, #0]
 800fd42:	6863      	ldr	r3, [r4, #4]
 800fd44:	9e01      	ldr	r6, [sp, #4]
 800fd46:	4639      	mov	r1, r7
 800fd48:	4650      	mov	r0, sl
 800fd4a:	47b0      	blx	r6
 800fd4c:	6821      	ldr	r1, [r4, #0]
 800fd4e:	f8d8 3000 	ldr.w	r3, [r8]
 800fd52:	f011 0f20 	tst.w	r1, #32
 800fd56:	d013      	beq.n	800fd80 <_scanf_i+0x1c8>
 800fd58:	1d1a      	adds	r2, r3, #4
 800fd5a:	f8c8 2000 	str.w	r2, [r8]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6018      	str	r0, [r3, #0]
 800fd62:	68e3      	ldr	r3, [r4, #12]
 800fd64:	3301      	adds	r3, #1
 800fd66:	60e3      	str	r3, [r4, #12]
 800fd68:	1bed      	subs	r5, r5, r7
 800fd6a:	44ab      	add	fp, r5
 800fd6c:	6925      	ldr	r5, [r4, #16]
 800fd6e:	445d      	add	r5, fp
 800fd70:	6125      	str	r5, [r4, #16]
 800fd72:	2000      	movs	r0, #0
 800fd74:	b007      	add	sp, #28
 800fd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7a:	f04f 0b00 	mov.w	fp, #0
 800fd7e:	e7ca      	b.n	800fd16 <_scanf_i+0x15e>
 800fd80:	1d1a      	adds	r2, r3, #4
 800fd82:	f8c8 2000 	str.w	r2, [r8]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f011 0f01 	tst.w	r1, #1
 800fd8c:	bf14      	ite	ne
 800fd8e:	8018      	strhne	r0, [r3, #0]
 800fd90:	6018      	streq	r0, [r3, #0]
 800fd92:	e7e6      	b.n	800fd62 <_scanf_i+0x1aa>
 800fd94:	2001      	movs	r0, #1
 800fd96:	e7ed      	b.n	800fd74 <_scanf_i+0x1bc>
 800fd98:	08010484 	.word	0x08010484
 800fd9c:	0800ea85 	.word	0x0800ea85
 800fda0:	0800e989 	.word	0x0800e989
 800fda4:	08010db9 	.word	0x08010db9

0800fda8 <__sccl>:
 800fda8:	b570      	push	{r4, r5, r6, lr}
 800fdaa:	780b      	ldrb	r3, [r1, #0]
 800fdac:	4604      	mov	r4, r0
 800fdae:	2b5e      	cmp	r3, #94	; 0x5e
 800fdb0:	bf0b      	itete	eq
 800fdb2:	784b      	ldrbeq	r3, [r1, #1]
 800fdb4:	1c48      	addne	r0, r1, #1
 800fdb6:	1c88      	addeq	r0, r1, #2
 800fdb8:	2200      	movne	r2, #0
 800fdba:	bf08      	it	eq
 800fdbc:	2201      	moveq	r2, #1
 800fdbe:	1e61      	subs	r1, r4, #1
 800fdc0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fdc4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fdc8:	42a9      	cmp	r1, r5
 800fdca:	d1fb      	bne.n	800fdc4 <__sccl+0x1c>
 800fdcc:	b90b      	cbnz	r3, 800fdd2 <__sccl+0x2a>
 800fdce:	3801      	subs	r0, #1
 800fdd0:	bd70      	pop	{r4, r5, r6, pc}
 800fdd2:	f082 0201 	eor.w	r2, r2, #1
 800fdd6:	54e2      	strb	r2, [r4, r3]
 800fdd8:	4605      	mov	r5, r0
 800fdda:	4628      	mov	r0, r5
 800fddc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fde0:	292d      	cmp	r1, #45	; 0x2d
 800fde2:	d006      	beq.n	800fdf2 <__sccl+0x4a>
 800fde4:	295d      	cmp	r1, #93	; 0x5d
 800fde6:	d0f3      	beq.n	800fdd0 <__sccl+0x28>
 800fde8:	b909      	cbnz	r1, 800fdee <__sccl+0x46>
 800fdea:	4628      	mov	r0, r5
 800fdec:	e7f0      	b.n	800fdd0 <__sccl+0x28>
 800fdee:	460b      	mov	r3, r1
 800fdf0:	e7f1      	b.n	800fdd6 <__sccl+0x2e>
 800fdf2:	786e      	ldrb	r6, [r5, #1]
 800fdf4:	2e5d      	cmp	r6, #93	; 0x5d
 800fdf6:	d0fa      	beq.n	800fdee <__sccl+0x46>
 800fdf8:	42b3      	cmp	r3, r6
 800fdfa:	dcf8      	bgt.n	800fdee <__sccl+0x46>
 800fdfc:	3502      	adds	r5, #2
 800fdfe:	4619      	mov	r1, r3
 800fe00:	3101      	adds	r1, #1
 800fe02:	428e      	cmp	r6, r1
 800fe04:	5462      	strb	r2, [r4, r1]
 800fe06:	dcfb      	bgt.n	800fe00 <__sccl+0x58>
 800fe08:	1af1      	subs	r1, r6, r3
 800fe0a:	3901      	subs	r1, #1
 800fe0c:	1c58      	adds	r0, r3, #1
 800fe0e:	42b3      	cmp	r3, r6
 800fe10:	bfa8      	it	ge
 800fe12:	2100      	movge	r1, #0
 800fe14:	1843      	adds	r3, r0, r1
 800fe16:	e7e0      	b.n	800fdda <__sccl+0x32>

0800fe18 <__submore>:
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	460c      	mov	r4, r1
 800fe1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fe20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe24:	4299      	cmp	r1, r3
 800fe26:	d11d      	bne.n	800fe64 <__submore+0x4c>
 800fe28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fe2c:	f7fd ff4a 	bl	800dcc4 <_malloc_r>
 800fe30:	b918      	cbnz	r0, 800fe3a <__submore+0x22>
 800fe32:	f04f 30ff 	mov.w	r0, #4294967295
 800fe36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe3e:	63a3      	str	r3, [r4, #56]	; 0x38
 800fe40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fe44:	6360      	str	r0, [r4, #52]	; 0x34
 800fe46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fe4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fe4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fe52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fe56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fe5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fe5e:	6020      	str	r0, [r4, #0]
 800fe60:	2000      	movs	r0, #0
 800fe62:	e7e8      	b.n	800fe36 <__submore+0x1e>
 800fe64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fe66:	0077      	lsls	r7, r6, #1
 800fe68:	463a      	mov	r2, r7
 800fe6a:	f7ff fc49 	bl	800f700 <_realloc_r>
 800fe6e:	4605      	mov	r5, r0
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d0de      	beq.n	800fe32 <__submore+0x1a>
 800fe74:	eb00 0806 	add.w	r8, r0, r6
 800fe78:	4601      	mov	r1, r0
 800fe7a:	4632      	mov	r2, r6
 800fe7c:	4640      	mov	r0, r8
 800fe7e:	f7fd fe9f 	bl	800dbc0 <memcpy>
 800fe82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fe86:	f8c4 8000 	str.w	r8, [r4]
 800fe8a:	e7e9      	b.n	800fe60 <__submore+0x48>

0800fe8c <_malloc_usable_size_r>:
 800fe8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe90:	1f18      	subs	r0, r3, #4
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	bfbc      	itt	lt
 800fe96:	580b      	ldrlt	r3, [r1, r0]
 800fe98:	18c0      	addlt	r0, r0, r3
 800fe9a:	4770      	bx	lr

0800fe9c <sqrt>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	ed2d 8b02 	vpush	{d8}
 800fea2:	ec55 4b10 	vmov	r4, r5, d0
 800fea6:	f000 f825 	bl	800fef4 <__ieee754_sqrt>
 800feaa:	4622      	mov	r2, r4
 800feac:	462b      	mov	r3, r5
 800feae:	4620      	mov	r0, r4
 800feb0:	4629      	mov	r1, r5
 800feb2:	eeb0 8a40 	vmov.f32	s16, s0
 800feb6:	eef0 8a60 	vmov.f32	s17, s1
 800feba:	f7f0 fe4f 	bl	8000b5c <__aeabi_dcmpun>
 800febe:	b990      	cbnz	r0, 800fee6 <sqrt+0x4a>
 800fec0:	2200      	movs	r2, #0
 800fec2:	2300      	movs	r3, #0
 800fec4:	4620      	mov	r0, r4
 800fec6:	4629      	mov	r1, r5
 800fec8:	f7f0 fe20 	bl	8000b0c <__aeabi_dcmplt>
 800fecc:	b158      	cbz	r0, 800fee6 <sqrt+0x4a>
 800fece:	f7fd fe49 	bl	800db64 <__errno>
 800fed2:	2321      	movs	r3, #33	; 0x21
 800fed4:	6003      	str	r3, [r0, #0]
 800fed6:	2200      	movs	r2, #0
 800fed8:	2300      	movs	r3, #0
 800feda:	4610      	mov	r0, r2
 800fedc:	4619      	mov	r1, r3
 800fede:	f7f0 fccd 	bl	800087c <__aeabi_ddiv>
 800fee2:	ec41 0b18 	vmov	d8, r0, r1
 800fee6:	eeb0 0a48 	vmov.f32	s0, s16
 800feea:	eef0 0a68 	vmov.f32	s1, s17
 800feee:	ecbd 8b02 	vpop	{d8}
 800fef2:	bd38      	pop	{r3, r4, r5, pc}

0800fef4 <__ieee754_sqrt>:
 800fef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef8:	ec55 4b10 	vmov	r4, r5, d0
 800fefc:	4e55      	ldr	r6, [pc, #340]	; (8010054 <__ieee754_sqrt+0x160>)
 800fefe:	43ae      	bics	r6, r5
 800ff00:	ee10 0a10 	vmov	r0, s0
 800ff04:	ee10 3a10 	vmov	r3, s0
 800ff08:	462a      	mov	r2, r5
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	d110      	bne.n	800ff30 <__ieee754_sqrt+0x3c>
 800ff0e:	ee10 2a10 	vmov	r2, s0
 800ff12:	462b      	mov	r3, r5
 800ff14:	f7f0 fb88 	bl	8000628 <__aeabi_dmul>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	4629      	mov	r1, r5
 800ff20:	f7f0 f9cc 	bl	80002bc <__adddf3>
 800ff24:	4604      	mov	r4, r0
 800ff26:	460d      	mov	r5, r1
 800ff28:	ec45 4b10 	vmov	d0, r4, r5
 800ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff30:	2d00      	cmp	r5, #0
 800ff32:	dc10      	bgt.n	800ff56 <__ieee754_sqrt+0x62>
 800ff34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ff38:	4330      	orrs	r0, r6
 800ff3a:	d0f5      	beq.n	800ff28 <__ieee754_sqrt+0x34>
 800ff3c:	b15d      	cbz	r5, 800ff56 <__ieee754_sqrt+0x62>
 800ff3e:	ee10 2a10 	vmov	r2, s0
 800ff42:	462b      	mov	r3, r5
 800ff44:	ee10 0a10 	vmov	r0, s0
 800ff48:	f7f0 f9b6 	bl	80002b8 <__aeabi_dsub>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	460b      	mov	r3, r1
 800ff50:	f7f0 fc94 	bl	800087c <__aeabi_ddiv>
 800ff54:	e7e6      	b.n	800ff24 <__ieee754_sqrt+0x30>
 800ff56:	1512      	asrs	r2, r2, #20
 800ff58:	d074      	beq.n	8010044 <__ieee754_sqrt+0x150>
 800ff5a:	07d4      	lsls	r4, r2, #31
 800ff5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ff60:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ff64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ff68:	bf5e      	ittt	pl
 800ff6a:	0fda      	lsrpl	r2, r3, #31
 800ff6c:	005b      	lslpl	r3, r3, #1
 800ff6e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ff72:	2400      	movs	r4, #0
 800ff74:	0fda      	lsrs	r2, r3, #31
 800ff76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ff7a:	107f      	asrs	r7, r7, #1
 800ff7c:	005b      	lsls	r3, r3, #1
 800ff7e:	2516      	movs	r5, #22
 800ff80:	4620      	mov	r0, r4
 800ff82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ff86:	1886      	adds	r6, r0, r2
 800ff88:	428e      	cmp	r6, r1
 800ff8a:	bfde      	ittt	le
 800ff8c:	1b89      	suble	r1, r1, r6
 800ff8e:	18b0      	addle	r0, r6, r2
 800ff90:	18a4      	addle	r4, r4, r2
 800ff92:	0049      	lsls	r1, r1, #1
 800ff94:	3d01      	subs	r5, #1
 800ff96:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ff9a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ff9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ffa2:	d1f0      	bne.n	800ff86 <__ieee754_sqrt+0x92>
 800ffa4:	462a      	mov	r2, r5
 800ffa6:	f04f 0e20 	mov.w	lr, #32
 800ffaa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ffae:	4281      	cmp	r1, r0
 800ffb0:	eb06 0c05 	add.w	ip, r6, r5
 800ffb4:	dc02      	bgt.n	800ffbc <__ieee754_sqrt+0xc8>
 800ffb6:	d113      	bne.n	800ffe0 <__ieee754_sqrt+0xec>
 800ffb8:	459c      	cmp	ip, r3
 800ffba:	d811      	bhi.n	800ffe0 <__ieee754_sqrt+0xec>
 800ffbc:	f1bc 0f00 	cmp.w	ip, #0
 800ffc0:	eb0c 0506 	add.w	r5, ip, r6
 800ffc4:	da43      	bge.n	801004e <__ieee754_sqrt+0x15a>
 800ffc6:	2d00      	cmp	r5, #0
 800ffc8:	db41      	blt.n	801004e <__ieee754_sqrt+0x15a>
 800ffca:	f100 0801 	add.w	r8, r0, #1
 800ffce:	1a09      	subs	r1, r1, r0
 800ffd0:	459c      	cmp	ip, r3
 800ffd2:	bf88      	it	hi
 800ffd4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ffd8:	eba3 030c 	sub.w	r3, r3, ip
 800ffdc:	4432      	add	r2, r6
 800ffde:	4640      	mov	r0, r8
 800ffe0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ffe4:	f1be 0e01 	subs.w	lr, lr, #1
 800ffe8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ffec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fff0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fff4:	d1db      	bne.n	800ffae <__ieee754_sqrt+0xba>
 800fff6:	430b      	orrs	r3, r1
 800fff8:	d006      	beq.n	8010008 <__ieee754_sqrt+0x114>
 800fffa:	1c50      	adds	r0, r2, #1
 800fffc:	bf13      	iteet	ne
 800fffe:	3201      	addne	r2, #1
 8010000:	3401      	addeq	r4, #1
 8010002:	4672      	moveq	r2, lr
 8010004:	f022 0201 	bicne.w	r2, r2, #1
 8010008:	1063      	asrs	r3, r4, #1
 801000a:	0852      	lsrs	r2, r2, #1
 801000c:	07e1      	lsls	r1, r4, #31
 801000e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010012:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010016:	bf48      	it	mi
 8010018:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801001c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010020:	4614      	mov	r4, r2
 8010022:	e781      	b.n	800ff28 <__ieee754_sqrt+0x34>
 8010024:	0ad9      	lsrs	r1, r3, #11
 8010026:	3815      	subs	r0, #21
 8010028:	055b      	lsls	r3, r3, #21
 801002a:	2900      	cmp	r1, #0
 801002c:	d0fa      	beq.n	8010024 <__ieee754_sqrt+0x130>
 801002e:	02cd      	lsls	r5, r1, #11
 8010030:	d50a      	bpl.n	8010048 <__ieee754_sqrt+0x154>
 8010032:	f1c2 0420 	rsb	r4, r2, #32
 8010036:	fa23 f404 	lsr.w	r4, r3, r4
 801003a:	1e55      	subs	r5, r2, #1
 801003c:	4093      	lsls	r3, r2
 801003e:	4321      	orrs	r1, r4
 8010040:	1b42      	subs	r2, r0, r5
 8010042:	e78a      	b.n	800ff5a <__ieee754_sqrt+0x66>
 8010044:	4610      	mov	r0, r2
 8010046:	e7f0      	b.n	801002a <__ieee754_sqrt+0x136>
 8010048:	0049      	lsls	r1, r1, #1
 801004a:	3201      	adds	r2, #1
 801004c:	e7ef      	b.n	801002e <__ieee754_sqrt+0x13a>
 801004e:	4680      	mov	r8, r0
 8010050:	e7bd      	b.n	800ffce <__ieee754_sqrt+0xda>
 8010052:	bf00      	nop
 8010054:	7ff00000 	.word	0x7ff00000

08010058 <_init>:
 8010058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005a:	bf00      	nop
 801005c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801005e:	bc08      	pop	{r3}
 8010060:	469e      	mov	lr, r3
 8010062:	4770      	bx	lr

08010064 <_fini>:
 8010064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010066:	bf00      	nop
 8010068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801006a:	bc08      	pop	{r3}
 801006c:	469e      	mov	lr, r3
 801006e:	4770      	bx	lr
